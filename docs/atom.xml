<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<link href="https://siiky.srht.site/atom.xml" rel="self" type="application/atom+xml"/>
<author><name>siiky</name></author>
<id>https://siiky.srht.site/</id>
<title type="text">nothing interesting here</title>
<updated>2022-08-11T00:00:00Z</updated>
<entry>
  <id>https://siiky.srht.site/kB45oC/zettelkasten_utility.gmi</id>
  <title type="text">RE: Zettelkasten Utility</title>
  <updated>2022-08-11T00:00:00Z</updated>
  <published>2022-08-10T00:00:00Z</published>
  <link href="https://siiky.srht.site/kB45oC/zettelkasten_utility.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/kB45oC/zettelkasten_utility.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# RE: Zettelkasten Utility
@siiky
2022/08/10
2022/08/11

I started almost a year ago (damn!) using Org Roam to finally try and organize my notes and random things I write. I heard about zettelkasten I don&#39;t even remember whence anymore, but it stuck with me. I spent a couple of weeks learning more about it, searching for (software) systems, &amp;c, until I finally settled on Org Roam. As a Vim user this was a very... interesting experience! But let&#39;s leave that for another day.


=&gt; gemini://blog.schmidhuberj.de/2022/08/07/when-does-a-zettelkasten-become-useful When does a Zettelkasten become useful?

&gt; Here, my notes are basically a structure-note for every big topic linking to structure-notes of every sub-topic linking to the actual information that sometimes links back to already learned information, but not from other subjects. The problem here is, that this is easily converted to a linear note structure, (...)
&gt; (...)
&gt; To basically summarize what I (believe) am doing differently in my Zettelkasten, I emphasize on collecting the information in a way I understand and is easy to search instead of linking the notes to create new ideas. Maybe the word &quot;wiki&quot; might be closer to what I am doing, but as I was starting off with the idea of creating a Zettelkasten, this word has stuck for now.

After reading both posts, I guess what I&#39;m doing is more like a wiki too. I have a page/file for a topic usually, where I write about it and how it relates to other topics. I tried opening some random notes just now (in Doom: SPC n r a) and like 5 in a row were pretty much useless. Some of these were created during the first few days, when I was kind of filling it up with whatever came to mind, kind of trying things out. Reflecting on how I use it too (more next) in retrospect it makes sense now that opening random notes doesn&#39;t prove too informative or interesting.

=&gt; gemini://rawtext.club/~mieum/relog/2022-08-08-zettelkasten_utility.gmi Zettelkasten Utility

&gt; So much thought and energy went into organizing and maintaining a sensible structure that it became kind of unwieldy and was ultimately not very flexible.

I sometimes feel this too, especially for larger pages it can become a yak shaving activity -- &quot;would it be better if I laid things out this way or that way?&quot; And whichever way I choose I lose, it&#39;s never the right one, because every time I come back to the page I get that same feeling, that maybe it&#39;s still not just right...

&gt; It seems to me that one reason people will tend to impose structure in a zettelkasten-like system is that they are digesting information that is already structured. It seems like it would make sense to replicate that structure---that it would be useful---especially, as Schmiddi suggests, if the point of the lecture you are attending is for students to replicate its contents.

Some of my most comprehensive and useful files are on Petri nets, and they exactly fit the description of this paragraph. I wrote these notes while reading the papers. Sometimes I would pause reading to take note or transcribe something directly on the computer, other times I would take note somewhere (a notebook or the paper itself) and later transcribe to the appropriate file. In general, the material wasn&#39;t adapted very much from the original text.


mieum clearly knows their zettelkasten shit better than I do. After reading their post it became apparent to me that my &quot;zettelkasten&quot; isn&#39;t that great quality. Even so! Not all is lost! I&#39;m using Org mode after all. This took me a long while to get familiar with but damn, all the praise people throw at it is well deserved.

I use it for pretty much everything I want to document for myself now. Pages I want to read/write about, books/videos/movies/series I want to read/watch, events with notes available right there, &amp;c, &amp;c. Everything that isn&#39;t in this capsule, or paper notebooks that I&#39;ll never pick up again, is in there. I have a significant collection of Org Roam files now. When I want to search for something I can, and I usually find what I&#39;m looking for. Things are tagged liberally (I had this insight early on luckily). I have URLs to external sources, associated files (PDFs, images, audio files, &amp;c), my own notes, quotes, code sometimes, ... Everything!

I may be a hoarder, but I think this is great! It&#39;s a lot better than my previous approach of writing random things in whichever random paper notebook is closest (I have 4 or 5 of these spread all over the place) and never getting around to re-read and transcribe it into some more organized notes system.

(BTW I have 714 files as of now, the first created on 2021/08/28 22:42:02 and the latest on 2022/08/09 17:13:50 according to their filenames)

&gt; The other reason I find is that people don&#39;t fully trust their tools, or their tools are cumbersome enough to inhibit a freer interaction with the zettelkasten, so it feels like structure is necessary to access or retrieve all the information it contains.

This is an interesting thought. Yeah, it may be that I don&#39;t trust the zettelkasten system and that leads me to try and organize monolithic notes from the start. But if that&#39;s the case (me not trusting it) I think it&#39;s more likely because I haven&#39;t used it correctly, rather than because I don&#39;t believe it works. I&#39;ve thought about this in the past, even before and after settling on Org Roam: maybe I&#39;m losing something for trying to use the zettelkasten system in a computer. It&#39;s so easy to put anything in (SPC n r f); I&#39;m not forced to think about what I&#39;m putting in; and I can always edit it later!

I wonder if I should start one with pen&amp;paper.


=&gt; ../petri_nets/logs.gmi Petri Nets Logs
  </content>
  <content type="text/html">

&lt;h1&gt;RE: Zettelkasten Utility&lt;/h1&gt;
&lt;p&gt;@siiky
2022/08/10
2022/08/11&lt;/p&gt;
&lt;p&gt;I started almost a year ago (damn!) using Org Roam to finally try and organize my notes and random things I write. I heard about zettelkasten I don&#39;t even remember whence anymore, but it stuck with me. I spent a couple of weeks learning more about it, searching for (software) systems, &amp;amp;c, until I finally settled on Org Roam. As a Vim user this was a very... interesting experience! But let&#39;s leave that for another day.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;gemini://blog.schmidhuberj.de/2022/08/07/when-does-a-zettelkasten-become-useful&quot;&gt;When does a Zettelkasten become useful?&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Here, my notes are basically a structure-note for every big topic linking to structure-notes of every sub-topic linking to the actual information that sometimes links back to already learned information, but not from other subjects. The problem here is, that this is easily converted to a linear note structure, (...)
(...)
To basically summarize what I (believe) am doing differently in my Zettelkasten, I emphasize on collecting the information in a way I understand and is easy to search instead of linking the notes to create new ideas. Maybe the word &amp;quot;wiki&amp;quot; might be closer to what I am doing, but as I was starting off with the idea of creating a Zettelkasten, this word has stuck for now.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;After reading both posts, I guess what I&#39;m doing is more like a wiki too. I have a page/file for a topic usually, where I write about it and how it relates to other topics. I tried opening some random notes just now (in Doom: SPC n r a) and like 5 in a row were pretty much useless. Some of these were created during the first few days, when I was kind of filling it up with whatever came to mind, kind of trying things out. Reflecting on how I use it too (more next) in retrospect it makes sense now that opening random notes doesn&#39;t prove too informative or interesting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;gemini://rawtext.club/~mieum/relog/2022-08-08-zettelkasten_utility.gmi&quot;&gt;Zettelkasten Utility&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;So much thought and energy went into organizing and maintaining a sensible structure that it became kind of unwieldy and was ultimately not very flexible.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I sometimes feel this too, especially for larger pages it can become a yak shaving activity -- &amp;quot;would it be better if I laid things out this way or that way?&amp;quot; And whichever way I choose I lose, it&#39;s never the right one, because every time I come back to the page I get that same feeling, that maybe it&#39;s still not just right...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It seems to me that one reason people will tend to impose structure in a zettelkasten-like system is that they are digesting information that is already structured. It seems like it would make sense to replicate that structure---that it would be useful---especially, as Schmiddi suggests, if the point of the lecture you are attending is for students to replicate its contents.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Some of my most comprehensive and useful files are on Petri nets, and they exactly fit the description of this paragraph. I wrote these notes while reading the papers. Sometimes I would pause reading to take note or transcribe something directly on the computer, other times I would take note somewhere (a notebook or the paper itself) and later transcribe to the appropriate file. In general, the material wasn&#39;t adapted very much from the original text.&lt;/p&gt;
&lt;p&gt;mieum clearly knows their zettelkasten shit better than I do. After reading their post it became apparent to me that my &amp;quot;zettelkasten&amp;quot; isn&#39;t that great quality. Even so! Not all is lost! I&#39;m using Org mode after all. This took me a long while to get familiar with but damn, all the praise people throw at it is well deserved.&lt;/p&gt;
&lt;p&gt;I use it for pretty much everything I want to document for myself now. Pages I want to read/write about, books/videos/movies/series I want to read/watch, events with notes available right there, &amp;amp;c, &amp;amp;c. Everything that isn&#39;t in this capsule, or paper notebooks that I&#39;ll never pick up again, is in there. I have a significant collection of Org Roam files now. When I want to search for something I can, and I usually find what I&#39;m looking for. Things are tagged liberally (I had this insight early on luckily). I have URLs to external sources, associated files (PDFs, images, audio files, &amp;amp;c), my own notes, quotes, code sometimes, ... Everything!&lt;/p&gt;
&lt;p&gt;I may be a hoarder, but I think this is great! It&#39;s a lot better than my previous approach of writing random things in whichever random paper notebook is closest (I have 4 or 5 of these spread all over the place) and never getting around to re-read and transcribe it into some more organized notes system.&lt;/p&gt;
&lt;p&gt;(BTW I have 714 files as of now, the first created on 2021/08/28 22:42:02 and the latest on 2022/08/09 17:13:50 according to their filenames)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The other reason I find is that people don&#39;t fully trust their tools, or their tools are cumbersome enough to inhibit a freer interaction with the zettelkasten, so it feels like structure is necessary to access or retrieve all the information it contains.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is an interesting thought. Yeah, it may be that I don&#39;t trust the zettelkasten system and that leads me to try and organize monolithic notes from the start. But if that&#39;s the case (me not trusting it) I think it&#39;s more likely because I haven&#39;t used it correctly, rather than because I don&#39;t believe it works. I&#39;ve thought about this in the past, even before and after settling on Org Roam: maybe I&#39;m losing something for trying to use the zettelkasten system in a computer. It&#39;s so easy to put anything in (SPC n r f); I&#39;m not forced to think about what I&#39;m putting in; and I can always edit it later!&lt;/p&gt;
&lt;p&gt;I wonder if I should start one with pen&amp;amp;paper.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../petri_nets/logs.gmi&quot;&gt;Petri Nets Logs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/books/list.gmi</id>
  <title type="text">Books list</title>
  <updated>2022-08-09T00:00:00Z</updated>
  <published>2020-12-21T00:00:00Z</published>
  <link href="https://siiky.srht.site/books/list.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/books/list.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Books list
@siiky
2020/12/21
2022/08/09

These are the books that I&#39;m reading, have read, or haven&#39;t read. You may find many of them on Gutenberg and/or Standard Ebooks, and some of them in the care list. If I don&#39;t forget, I&#39;ll link to their sources. Though less common, if I have a page dedicated to a book of this list I&#39;ll link to it instead, like I did with How to Avoid a Climate Disaster.

=&gt; https://www.gutenberg.org Gutenberg
=&gt; https://gutenberg.net.au Gutenberg Australia
=&gt; https://standardebooks.org Standard Ebooks
=&gt; ../care/list.gmi Care list

For some of them I don&#39;t have a good link so I may use a not so great one, like to Goodreads. Sorry in advance. I&#39;ll mark them &quot;DUB&quot;ious as a warning.

Please let me know if you find any of the links not working.

=&gt; ../contact.gmi Contact

# Reading

=&gt; https://gameprogrammingpatterns.com Bob Nystrom, Game Programming Patterns: 2021
=&gt; https://mitpress.mit.edu/books/little-typer Daniel P. Friedman &amp; David Thrane Christiansen, The Little Typer: 2021/02/06
=&gt; https://en.wikipedia.org/wiki/The_Astonishing_Hypothesis Francis Crick, The Astonishing Hypothesis: 2021/07/30
=&gt; https://pragprog.com/titles/jgotp/designing-elixir-systems-with-otp James Edward Gray &amp; Bruce A. Tate, Designing Elixir Systems With OTP: 2021/05/20
=&gt; https://www.ffms.pt/publicacoes/detalhe/5682/riscos-globais-e-biodiversidade Maria Amélia Martins-Loução, Riscos Globals e Biodiversidade: 2022/06/15
=&gt; ../care/list.gmi Mark Graham &amp; Martin Dittus, Geographies of Digital Exclusion: Data and Inequality: 2022/01/22
=&gt; https://theanarchistlibrary.org/library/anonymous-desert Desert, Anonymous: 2022/07/15

# Read

=&gt; https://en.wikipedia.org/wiki/Freshwater_(novel) Akwaeke Emezi, Freshwater: 2021/07/30~2021/08/23
=&gt; https://en.wikipedia.org/wiki/A_Happy_Death Albert Camus, A Happy Death: 2021/07/21~2021/07/28
=&gt; https://libcom.org/article/bread-and-freedom-albert-camus [DUB] Albert Camus, Bread and Freedom: 2020/12/23
=&gt; https://en.wikipedia.org/wiki/Albert_Camus Albert Camus, Create Dangerously: 2020/12/21~2020/12/22
=&gt; https://en.wikipedia.org/wiki/Albert_Camus Albert Camus, Defence of Intelligence: 2020/12/22
=&gt; https://en.wikipedia.org/wiki/The_Plague_(novel) Albert Camus, The Plague: 2022/04/15~2022/06/15
=&gt; https://en.wikipedia.org/wiki/The_Stranger_(Camus_novel) Albert Camus, The Stranger: 2019
=&gt; https://en.wikipedia.org/wiki/Brave_New_World Aldous Huxley, Brave New World: 2020
=&gt; https://www.simonandschuster.com/books/Personal-Finance-101/Alfred-Mill/Adams-101/9781507214350 Alfred Mill, Personal Finance 101: 2021/07/09~2021/07/18
=&gt; https://www.goodreads.com/book/show/44003026-manipulation [DUB] Arthur Horn, Manipulation: Dark Psychology to Manipulate and Control People: 2021/05/29~2021/06/01
=&gt; bill_gates.how_to_avoid_a_climate_disaster.gmi Bill Gates, How to Avoid a Climate Disaster: 2022/01/07~2022/04/05
=&gt; https://en.wikipedia.org/wiki/Sex_at_Dawn Christopher Ryan &amp; Cacilda Jethá, Sex at Dawn: 2021/06/08~2021/07/29
=&gt; https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy_(novel) Douglas Adams, The Hitchhiker&#39;s Guide to the Galaxy: 2021/06/13~2021/07/05
=&gt; https://en.wikipedia.org/wiki/The_Restaurant_at_the_End_of_the_Universe Douglas Adams, The Restaurant at the End of the Universe: 2021/11/14~2022/01/06
=&gt; https://standardebooks.org/ebooks/edgar-allan-poe/short-fiction Edgar Allan Poe, The Black Cat: 2022/05/30~2022/05/30
=&gt; https://standardebooks.org/ebooks/edgar-allan-poe/short-fiction Edgar Allan Poe, The Murders in the Rue Morgue: 2022/05/17~2022/05/17
=&gt; https://standardebooks.org/ebooks/edgar-allan-poe/short-fiction Edgar Allan Poe, The Mystery of Marie Rogêt: 2022/05/29~2022/05/30
=&gt; https://standardebooks.org/ebooks/epictetus/the-enchiridion/elizabeth-carter Epictetus, The Enchiridion: 2021/04/14~2021/04/16
=&gt; https://gutenberg.net.au/plusfifty-n-z.html#orwell George Orwell, 1984: 2020
=&gt; https://gutenberg.net.au/plusfifty-n-z.html#orwell George Orwell, Animal Farm: 2020
=&gt; https://en.wikipedia.org/wiki/A_Little_Life Hanya Yanagihara, A Little Life: 2020~2021/03/07
=&gt; https://standardebooks.org/ebooks/henry-david-thoreau/walden Henry David Thoreau, Walden: 2021/06/07~2021/07/29
=&gt; https://www.simonandschuster.com/books/The-Courage-to-Be-Disliked/Ichiro-Kishimi/9781501197277 Ichiro Kishimi &amp; Fumitake Koga, The Courage to Be Disliked: 2020
=&gt; https://en.wikipedia.org/wiki/The_Catcher_in_the_Rye J. D. Salinger, The Catcher in the Rye: 2019
=&gt; https://www.gutenberg.org/ebooks/849 Jerome K. Jerome, Idle Thoughts of an Idle Fellow: 2020
=&gt; https://www.independent.co.uk/arts-entertainment/short-story-blue-tigers-1194505.html Jorge Luis Borges, Blue Tigers: 2022/05/30~2022/05/30
=&gt; https://standardebooks.org/ebooks/karl-marx_friedrich-engels/the-communist-manifesto/samuel-moore Karl Marx &amp; Friedrich Engels, The Communist Manifesto: 2021/04/28~2021/05/03
=&gt; https://en.wikipedia.org/wiki/Never_Let_Me_Go_(novel) Kazuo Ishiguro, Never Let Me Go: 2020
=&gt; https://en.wikipedia.org/wiki/The_Remains_of_the_Day Kazuo Ishiguro, The Remains of the Day: 2020/12/14~2020/12/29
=&gt; https://standardebooks.org/ebooks/laozi/tao-te-ching/james-legge Laozi, Tao Te Ching: 2021/04/10~2021/04/14
=&gt; https://standardebooks.org/ebooks/leo-tolstoy/a-confession/aylmer-maude Leo Tolstoy, A Confession: 2021/04/20~2021/04/27
=&gt; https://standardebooks.org/ebooks/ludwig-wittgenstein/tractatus-logico-philosophicus/c-k-ogden Ludwig Wittgenstein, Tractatus Logico-Philosophicus: 2021/05/06~2021/06/05
=&gt; https://www.feedbooks.com/userbook/3501/tokyo-zero Marc Horne, Tokyo Zero
=&gt; https://www.goodreads.com/en/book/show/29588907 [DUB] Michael T. Stevens, The Art of Psychological Warfare: 2022/05/09~2022/05/16
=&gt; https://www.simonandschuster.com/books/Budgeting-101/Michele-Cagan/Adams-101/9781507209073 Michele Cagan, Budgeting 101: 2021/08/24~2021/09/05
=&gt; https://en.wikipedia.org/wiki/Fooled_by_Randomness Nassim Nicholas Taleb, Fooled by Randomness: 2020
=&gt; https://standardebooks.org/ebooks/niccolo-machiavelli/the-prince/w-k-marriott Niccolò Machiavelli, The Prince: 2021/07/30~2021/08/23
=&gt; https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy Nikolai Gogol, A May Night: 2021/03
=&gt; https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy Nikolai Gogol, Old-Fashioned Farmers: 2021/06/11
=&gt; https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy Nikolai Gogol, St. John&#39;s Eve: 2021/03
=&gt; https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy Nikolai Gogol, Taras Bulba: 2021/06/12~2021/06/24
=&gt; https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy Nikolai Gogol, The Night of Christmas Eve: 2021/05/31~2021/06/07
=&gt; https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy Nikolai Gogol, The Viy: 2021/08/24~2021/08/28
=&gt; https://www.simonandschuster.com/books/Philosophy-101/Paul-Kleinman/Adams-101/9781440567674 Paul Kleinman, Philosophy 101: 2020/12/20~2021/04/08
=&gt; https://www.simonandschuster.com/books/Psych-101/Paul-Kleinman/Adams-101/9781440543906 Paul Kleinman, Psych 101: 2020
=&gt; https://www.simonandschuster.com/books/Religion-101/Peter-Archer/Adams-101/9781440572630 Peter Archer, Religion 101: 2021/03/29~2021/05/28
=&gt; https://www.rifters.com/real/Behemoth.htm Peter Watts, Behemoth
=&gt; https://www.rifters.com/real/Blindsight.htm Peter Watts, Blindsight: 2020
=&gt; https://rifters.com/real/MAELSTROM.htm Peter Watts, Maelstrom
=&gt; https://www.rifters.com/real/STARFISH.htm Peter Watts, Starfish
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, Beyond Lies the Wub: 2020
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, Beyond the Door: 2020
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, Piper in the Woods: 2020
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, Second Variety: 2021/07/06~2021/07/09
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, The Crystal Crypt: 2020
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, The Defenders: 2020
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, The Gun: 2020
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, The Skull: 2020
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, The Variable Man: 2020
=&gt; https://standardebooks.org/ebooks/philip-k-dick/short-fiction Philip K. Dick, Tony and the Beetles: 2020
=&gt; https://en.wikipedia.org/wiki/Adjustment_Team Philip K. Dick, Adjustment Team: 2020
=&gt; https://en.wikipedia.org/wiki/Philip_K._Dick Philip K. Dick, Of Withered Apples: 2020
=&gt; https://en.wikipedia.org/wiki/The_Golden_Man Philip K. Dick, The Golden Man: 2021/05/30
=&gt; https://www.gutenberg.org/ebooks/1677 Plato, Alcibiades II: 2020
=&gt; https://www.gutenberg.org/ebooks/1676 Plato, Alcibiades I: 2020
=&gt; https://www.gutenberg.org/ebooks/1656 Plato, Apology: 2020
=&gt; https://www.gutenberg.org/ebooks/1580 Plato, Charmides: 2020
=&gt; https://www.gutenberg.org/ebooks/1616 Plato, Cratylus: 2022/02/22~2022/03/09
=&gt; https://www.gutenberg.org/ebooks/1571 Plato, Critias: 2020
=&gt; https://www.gutenberg.org/ebooks/1657 Plato, Crito: 2020
=&gt; https://www.gutenberg.org/ebooks/1681 Plato, Eryxias: 2020
=&gt; https://www.gutenberg.org/ebooks/1642 Plato, Euthyphro: 2020
=&gt; https://www.gutenberg.org/ebooks/1672 Plato, Gorgias: 2021~2021/03/13
=&gt; https://www.gutenberg.org/ebooks/1635 Plato, Ion: 2020
=&gt; https://www.gutenberg.org/ebooks/1673 Plato, Lesser Hippias: 2021/12/29
=&gt; https://www.gutenberg.org/ebooks/1572 Plato, Timaeus: 2020
=&gt; https://en.wikipedia.org/wiki/Discourse_on_the_Method René Descartes, Discourse on the Method: 2020
=&gt; https://en.wikipedia.org/wiki/Principles_of_Philosophy René Descartes, Selections from the Principles of Philosophy: 2020
=&gt; https://standardebooks.org/ebooks/robert-louis-stevenson/the-strange-case-of-dr-jekyll-and-mr-hyde Robert Louis Stevenson, The Strange Case of Dr. Jekyll and Mr. Hyde: 2020
=&gt; https://en.wikipedia.org/wiki/The_Shining_(novel) Stephen King, The Shining: 2019~2020
=&gt; http://www.stevetoutonghi.com/join/ Steve Toutonghi, Join: 2021/08/31~2021/11/10
=&gt; https://standardebooks.org/ebooks/sun-tzu/the-art-of-war/lionel-giles Sun Tzu, The Art of War
=&gt; https://susankayequinn.com/books/the-legacy-human Susan Kaye Quinn, The Legacy Human: 2020
=&gt; https://www.smashwords.com/books/view/234617 Travis Bughi, Beyond the Plains: 2020
=&gt; https://standardebooks.org/ebooks/victor-hugo/les-miserables/isabel-f-hapgood Victor Hugo, Les Misérables: 2020/01/01~2021/06/10
=&gt; https://standardebooks.org/ebooks/voltaire/candide/the-modern-library Voltaire, Candide: 2021/09/06~2021/10/04
=&gt; https://www.gutenberg.org/ebooks/2445 Voltaire, Letters on England: 2020~2021/01/21
=&gt; https://www.gutenberg.org/ebooks/30123 Voltaire, Micromegas: 2020
=&gt; https://www.gutenberg.org/ebooks/4683 Voltaire, Socrates: 2020
=&gt; https://www.aozora.gr.jp/cards/000311/card3693.html 宮本 百合子, 私の見た米国の少年: 2021/06/07
=&gt; https://www.aozora.gr.jp/cards/000081/card43736.html 宮沢 賢治, 『注文の多い料理店』序: 2021/06/05
=&gt; https://www.aozora.gr.jp/cards/000800/card53186.html 水上 滝太郎, 大人の眼と子供の眼: 2021
=&gt; https://www.aozora.gr.jp/cards/001584/card53182.html 秋田 雨雀, 三人の百姓: 2021/06/01~2021/06/02

# Dropped

=&gt; https://www.smashwords.com/books/view/273775 Travis Bughi, The Forest of Angor: 2020
=&gt; https://en.wikipedia.org/wiki/Guillaume_Pitron Guillaume Pitron, The Rare Metals War: 2020
  </content>
  <content type="text/html">

&lt;h1&gt;Books list&lt;/h1&gt;
&lt;p&gt;@siiky
2020/12/21
2022/08/09&lt;/p&gt;
&lt;p&gt;These are the books that I&#39;m reading, have read, or haven&#39;t read. You may find many of them on Gutenberg and/or Standard Ebooks, and some of them in the care list. If I don&#39;t forget, I&#39;ll link to their sources. Though less common, if I have a page dedicated to a book of this list I&#39;ll link to it instead, like I did with How to Avoid a Climate Disaster.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org&quot;&gt;Gutenberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gutenberg.net.au&quot;&gt;Gutenberg Australia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org&quot;&gt;Standard Ebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../care/list.gmi&quot;&gt;Care list&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;For some of them I don&#39;t have a good link so I may use a not so great one, like to Goodreads. Sorry in advance. I&#39;ll mark them &amp;quot;DUB&amp;quot;ious as a warning.&lt;/p&gt;
&lt;p&gt;Please let me know if you find any of the links not working.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../contact.gmi&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Reading&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gameprogrammingpatterns.com&quot;&gt;Bob Nystrom, Game Programming Patterns: 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mitpress.mit.edu/books/little-typer&quot;&gt;Daniel P. Friedman &amp;amp; David Thrane Christiansen, The Little Typer: 2021/02/06&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Astonishing_Hypothesis&quot;&gt;Francis Crick, The Astonishing Hypothesis: 2021/07/30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pragprog.com/titles/jgotp/designing-elixir-systems-with-otp&quot;&gt;James Edward Gray &amp;amp; Bruce A. Tate, Designing Elixir Systems With OTP: 2021/05/20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ffms.pt/publicacoes/detalhe/5682/riscos-globais-e-biodiversidade&quot;&gt;Maria Amélia Martins-Loução, Riscos Globals e Biodiversidade: 2022/06/15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../care/list.gmi&quot;&gt;Mark Graham &amp;amp; Martin Dittus, Geographies of Digital Exclusion: Data and Inequality: 2022/01/22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://theanarchistlibrary.org/library/anonymous-desert&quot;&gt;Desert, Anonymous: 2022/07/15&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Read&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Freshwater_(novel)&quot;&gt;Akwaeke Emezi, Freshwater: 2021/07/30~2021/08/23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/A_Happy_Death&quot;&gt;Albert Camus, A Happy Death: 2021/07/21~2021/07/28&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[[DUB] Albert Camus, Bread and Freedom: 2020/12/23](https://libcom.org/article/bread-and-freedom-albert-camus)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Albert_Camus&quot;&gt;Albert Camus, Create Dangerously: 2020/12/21~2020/12/22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Albert_Camus&quot;&gt;Albert Camus, Defence of Intelligence: 2020/12/22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Plague_(novel)&quot;&gt;Albert Camus, The Plague: 2022/04/15~2022/06/15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Stranger_(Camus_novel)&quot;&gt;Albert Camus, The Stranger: 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Brave_New_World&quot;&gt;Aldous Huxley, Brave New World: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.simonandschuster.com/books/Personal-Finance-101/Alfred-Mill/Adams-101/9781507214350&quot;&gt;Alfred Mill, Personal Finance 101: 2021/07/09~2021/07/18&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[[DUB] Arthur Horn, Manipulation: Dark Psychology to Manipulate and Control People: 2021/05/29~2021/06/01](https://www.goodreads.com/book/show/44003026-manipulation)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;bill_gates.how_to_avoid_a_climate_disaster.gmi&quot;&gt;Bill Gates, How to Avoid a Climate Disaster: 2022/01/07~2022/04/05&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sex_at_Dawn&quot;&gt;Christopher Ryan &amp;amp; Cacilda Jethá, Sex at Dawn: 2021/06/08~2021/07/29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy_(novel)&quot;&gt;Douglas Adams, The Hitchhiker&#39;s Guide to the Galaxy: 2021/06/13~2021/07/05&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Restaurant_at_the_End_of_the_Universe&quot;&gt;Douglas Adams, The Restaurant at the End of the Universe: 2021/11/14~2022/01/06&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/edgar-allan-poe/short-fiction&quot;&gt;Edgar Allan Poe, The Black Cat: 2022/05/30~2022/05/30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/edgar-allan-poe/short-fiction&quot;&gt;Edgar Allan Poe, The Murders in the Rue Morgue: 2022/05/17~2022/05/17&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/edgar-allan-poe/short-fiction&quot;&gt;Edgar Allan Poe, The Mystery of Marie Rogêt: 2022/05/29~2022/05/30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/epictetus/the-enchiridion/elizabeth-carter&quot;&gt;Epictetus, The Enchiridion: 2021/04/14~2021/04/16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gutenberg.net.au/plusfifty-n-z.html#orwell&quot;&gt;George Orwell, 1984: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gutenberg.net.au/plusfifty-n-z.html#orwell&quot;&gt;George Orwell, Animal Farm: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/A_Little_Life&quot;&gt;Hanya Yanagihara, A Little Life: 2020~2021/03/07&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/henry-david-thoreau/walden&quot;&gt;Henry David Thoreau, Walden: 2021/06/07~2021/07/29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.simonandschuster.com/books/The-Courage-to-Be-Disliked/Ichiro-Kishimi/9781501197277&quot;&gt;Ichiro Kishimi &amp;amp; Fumitake Koga, The Courage to Be Disliked: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Catcher_in_the_Rye&quot;&gt;J. D. Salinger, The Catcher in the Rye: 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/849&quot;&gt;Jerome K. Jerome, Idle Thoughts of an Idle Fellow: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.independent.co.uk/arts-entertainment/short-story-blue-tigers-1194505.html&quot;&gt;Jorge Luis Borges, Blue Tigers: 2022/05/30~2022/05/30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/karl-marx_friedrich-engels/the-communist-manifesto/samuel-moore&quot;&gt;Karl Marx &amp;amp; Friedrich Engels, The Communist Manifesto: 2021/04/28~2021/05/03&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Never_Let_Me_Go_(novel)&quot;&gt;Kazuo Ishiguro, Never Let Me Go: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Remains_of_the_Day&quot;&gt;Kazuo Ishiguro, The Remains of the Day: 2020/12/14~2020/12/29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/laozi/tao-te-ching/james-legge&quot;&gt;Laozi, Tao Te Ching: 2021/04/10~2021/04/14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/leo-tolstoy/a-confession/aylmer-maude&quot;&gt;Leo Tolstoy, A Confession: 2021/04/20~2021/04/27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/ludwig-wittgenstein/tractatus-logico-philosophicus/c-k-ogden&quot;&gt;Ludwig Wittgenstein, Tractatus Logico-Philosophicus: 2021/05/06~2021/06/05&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.feedbooks.com/userbook/3501/tokyo-zero&quot;&gt;Marc Horne, Tokyo Zero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[[DUB] Michael T. Stevens, The Art of Psychological Warfare: 2022/05/09~2022/05/16](https://www.goodreads.com/en/book/show/29588907)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.simonandschuster.com/books/Budgeting-101/Michele-Cagan/Adams-101/9781507209073&quot;&gt;Michele Cagan, Budgeting 101: 2021/08/24~2021/09/05&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fooled_by_Randomness&quot;&gt;Nassim Nicholas Taleb, Fooled by Randomness: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/niccolo-machiavelli/the-prince/w-k-marriott&quot;&gt;Niccolò Machiavelli, The Prince: 2021/07/30~2021/08/23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy&quot;&gt;Nikolai Gogol, A May Night: 2021/03&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy&quot;&gt;Nikolai Gogol, Old-Fashioned Farmers: 2021/06/11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy&quot;&gt;Nikolai Gogol, St. John&#39;s Eve: 2021/03&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy&quot;&gt;Nikolai Gogol, Taras Bulba: 2021/06/12~2021/06/24&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy&quot;&gt;Nikolai Gogol, The Night of Christmas Eve: 2021/05/31~2021/06/07&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/nikolai-gogol/short-fiction/claud-field_isabel-f-hapgood_vizetelly-and-company_george-tolstoy&quot;&gt;Nikolai Gogol, The Viy: 2021/08/24~2021/08/28&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.simonandschuster.com/books/Philosophy-101/Paul-Kleinman/Adams-101/9781440567674&quot;&gt;Paul Kleinman, Philosophy 101: 2020/12/20~2021/04/08&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.simonandschuster.com/books/Psych-101/Paul-Kleinman/Adams-101/9781440543906&quot;&gt;Paul Kleinman, Psych 101: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.simonandschuster.com/books/Religion-101/Peter-Archer/Adams-101/9781440572630&quot;&gt;Peter Archer, Religion 101: 2021/03/29~2021/05/28&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rifters.com/real/Behemoth.htm&quot;&gt;Peter Watts, Behemoth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rifters.com/real/Blindsight.htm&quot;&gt;Peter Watts, Blindsight: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rifters.com/real/MAELSTROM.htm&quot;&gt;Peter Watts, Maelstrom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rifters.com/real/STARFISH.htm&quot;&gt;Peter Watts, Starfish&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, Beyond Lies the Wub: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, Beyond the Door: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, Piper in the Woods: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, Second Variety: 2021/07/06~2021/07/09&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, The Crystal Crypt: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, The Defenders: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, The Gun: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, The Skull: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, The Variable Man: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/philip-k-dick/short-fiction&quot;&gt;Philip K. Dick, Tony and the Beetles: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Adjustment_Team&quot;&gt;Philip K. Dick, Adjustment Team: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Philip_K._Dick&quot;&gt;Philip K. Dick, Of Withered Apples: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Golden_Man&quot;&gt;Philip K. Dick, The Golden Man: 2021/05/30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1677&quot;&gt;Plato, Alcibiades II: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1676&quot;&gt;Plato, Alcibiades I: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1656&quot;&gt;Plato, Apology: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1580&quot;&gt;Plato, Charmides: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1616&quot;&gt;Plato, Cratylus: 2022/02/22~2022/03/09&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1571&quot;&gt;Plato, Critias: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1657&quot;&gt;Plato, Crito: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1681&quot;&gt;Plato, Eryxias: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1642&quot;&gt;Plato, Euthyphro: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1672&quot;&gt;Plato, Gorgias: 2021~2021/03/13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1635&quot;&gt;Plato, Ion: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1673&quot;&gt;Plato, Lesser Hippias: 2021/12/29&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1572&quot;&gt;Plato, Timaeus: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Discourse_on_the_Method&quot;&gt;René Descartes, Discourse on the Method: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Principles_of_Philosophy&quot;&gt;René Descartes, Selections from the Principles of Philosophy: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/robert-louis-stevenson/the-strange-case-of-dr-jekyll-and-mr-hyde&quot;&gt;Robert Louis Stevenson, The Strange Case of Dr. Jekyll and Mr. Hyde: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Shining_(novel)&quot;&gt;Stephen King, The Shining: 2019~2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.stevetoutonghi.com/join/&quot;&gt;Steve Toutonghi, Join: 2021/08/31~2021/11/10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/sun-tzu/the-art-of-war/lionel-giles&quot;&gt;Sun Tzu, The Art of War&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://susankayequinn.com/books/the-legacy-human&quot;&gt;Susan Kaye Quinn, The Legacy Human: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smashwords.com/books/view/234617&quot;&gt;Travis Bughi, Beyond the Plains: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/victor-hugo/les-miserables/isabel-f-hapgood&quot;&gt;Victor Hugo, Les Misérables: 2020/01/01~2021/06/10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/voltaire/candide/the-modern-library&quot;&gt;Voltaire, Candide: 2021/09/06~2021/10/04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/2445&quot;&gt;Voltaire, Letters on England: 2020~2021/01/21&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/30123&quot;&gt;Voltaire, Micromegas: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/4683&quot;&gt;Voltaire, Socrates: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.aozora.gr.jp/cards/000311/card3693.html&quot;&gt;宮本 百合子, 私の見た米国の少年: 2021/06/07&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.aozora.gr.jp/cards/000081/card43736.html&quot;&gt;宮沢 賢治, 『注文の多い料理店』序: 2021/06/05&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.aozora.gr.jp/cards/000800/card53186.html&quot;&gt;水上 滝太郎, 大人の眼と子供の眼: 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.aozora.gr.jp/cards/001584/card53182.html&quot;&gt;秋田 雨雀, 三人の百姓: 2021/06/01~2021/06/02&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Dropped&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smashwords.com/books/view/273775&quot;&gt;Travis Bughi, The Forest of Angor: 2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Guillaume_Pitron&quot;&gt;Guillaume Pitron, The Rare Metals War: 2020&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/projects/gemini-ipfs-gateway.gmi</id>
  <title type="text">gemini-ipfs-gateway</title>
  <updated>2022-08-08T00:00:00Z</updated>
  <published>2022-08-07T00:00:00Z</published>
  <link href="https://siiky.srht.site/projects/gemini-ipfs-gateway.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/projects/gemini-ipfs-gateway.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# gemini-ipfs-gateway
@siiky
2022/08/07
2022/08/08

I&#39;ve been slowly working on a read-only Gemini IPFS gateway -- or is it an IPFS Gemini gateway? I still don&#39;t know... It&#39;s a Gemini server you can use to access the IPFS network, like the Kubo&#39;s HTTP gateway.

There&#39;s a similar project by hsanjuan (who is one of the IPFS devs I think), but for one I didn&#39;t want to mess with Go, and for another it starts up a new lite IPFS node instead of using the local node -- why not? It&#39;s already running anyway.

There were lots of tiny details here and there that made things go wrong, but I think I got the Good Case a&#39;workin&#39;! I can browse my own capsule through it just fine. I don&#39;t have anything else to try for now, and my plans for the gateway are still vague, but hopefully this&#39;ll be interesting enough to people into both Gemini and IPFS that they give it a go.

It supports both IPFS and IPNS, but no CIDv0s (because it uses only the &quot;subdomain trick&quot;; see Usage). It&#39;s based on Kooda&#39;s geminid (with small changes from me), ipfs.scm, and ttltbl.scm (something I hacked together tonight).

=&gt; gemini://rawtext.club/~sloum/geminilist/005449.gmi &quot;[ANN] Gemini-IPFS gateway&quot;, hsanjuan
=&gt; https://www.upyum.com/cgit.cgi/geminid geminid (by Kooda)
=&gt; ipfs.gmi ipfs.scm
=&gt; https://git.sr.ht/~siiky/geminid/tree/experiments geminid (IPFS branch)
=&gt; https://git.sr.ht/~siiky/ttltbl.scm ttltbl.scm

## Usage

How do you actually use it? The URLs are similar to those you&#39;d see with the HTTP gateway.

Pick a CID (this capsule&#39;s for example), and go here:

=&gt; ../ipfs.txt Capsule CID
=&gt; gemini://&lt;cid&gt;.ipfs.localhost/

There&#39;s also an example page:

=&gt; gemini://bafkreie5eda6jkhtxi5c3pcpaqqlwl2xfkgasqk555vtljcdrfy3uyio4a.ipfs.localhost/
=&gt; ../hello.gmi

As long as links are relative (link/to/some/../file.txt) or absolute but without scheme://hostname/ (/link/to/file.txt), everything just works inside the IPFS network.

Note that the server doesn&#39;t list directories -- a little bit of intentionally and a little bit out of laziness. When you try to access a directory you&#39;re redirected to /index.gmi (this is a Gemini server after all). If there&#39;s no index.gmi then it borks. But it doesn&#39;t work only with Gemini capsules either, ofc! It should serve any files the HTTP gateway would too.


To access IPNS, pick a CID or name, and go here:

=&gt; gemini://&lt;cid&gt;.ipns.localhost/
=&gt; gemini://&lt;name&gt;.ipns.localhost/

For example the IPFS site (apparently they changed domains from .io to .tech?):

=&gt; gemini://ipfs.io.ipns.localhost/index.html
=&gt; gemini://ipfs.tech.ipns.localhost/index.html

Your Gemini client won&#39;t render the HTML page probably, but you&#39;ll get the content!

For some reason Lagrange doesn&#39;t like one of these two, doesn&#39;t even send a request to the gateway, instead saying &quot;failed to look up hostname&quot;. The other works fine, I have no idea why, but it really didn&#39;t look like a problem with the gateway.

## Setup

Install and run the Kubo node.

=&gt; https://ipfs.tech/#install

Install CHICKEN 5.

=&gt; https://code.call-cc.org

Install the ipfs egg:

```sh
chicken-install ipfs
```

Install ttltbl:

```sh
git clone --depth=1 https://git.sr.ht/~siiky/ttltbl.scm
cd ttltbl.scm
chicken-install
cd ..
```

Install the WIP IPFS branch of my geminid fork:

```sh
git clone --depth=1 --branch experiments https://git.sr.ht/~siiky/geminid
cd geminid
chicken-install
```

Generate a cert (suggestions welcome, I don&#39;t understand any of this shit):

```sh
openssl req -new -subj &#39;/CN=localhost&#39; -addext &#39;subjectAltName = DNS:*.localhost&#39; -x509 -newkey ec -pkeyopt ec_paramgen_curve:prime256v1 -days 1825 -nodes -out wild-cert.pem -keyout wild-key.pem
```

Run the gateway:

```sh
csi -s ipfs-server.scm
```

## Architecture

Not much to say about it. The gateway accepts Gemini requests, interacts with the Kubo node through its RPC API (resolve IPNS CIDs/names if necessary, ask the type of a UnixFS object, and read the actual content), and sends back results.

The post so far described how the gateway works with the ipfs-request-handler, which dynamically accepts an IPFS/IPNS CID/Name and serves content the user asks for. There&#39;s also constant-scheme/root-cid which, when given the scheme (ipfs/ipns) and CID/Name, works like any other Gemini server, serving content from that CID/Name tree only! This latter would be a pretty cool way to publish content. Similar to SourceHut pages but instead of sending a tarball with the content you send the CID/Name of the content.
  </content>
  <content type="text/html">

&lt;h1&gt;gemini-ipfs-gateway&lt;/h1&gt;
&lt;p&gt;@siiky
2022/08/07
2022/08/08&lt;/p&gt;
&lt;p&gt;I&#39;ve been slowly working on a read-only Gemini IPFS gateway -- or is it an IPFS Gemini gateway? I still don&#39;t know... It&#39;s a Gemini server you can use to access the IPFS network, like the Kubo&#39;s HTTP gateway.&lt;/p&gt;
&lt;p&gt;There&#39;s a similar project by hsanjuan (who is one of the IPFS devs I think), but for one I didn&#39;t want to mess with Go, and for another it starts up a new lite IPFS node instead of using the local node -- why not? It&#39;s already running anyway.&lt;/p&gt;
&lt;p&gt;There were lots of tiny details here and there that made things go wrong, but I think I got the Good Case a&#39;workin&#39;! I can browse my own capsule through it just fine. I don&#39;t have anything else to try for now, and my plans for the gateway are still vague, but hopefully this&#39;ll be interesting enough to people into both Gemini and IPFS that they give it a go.&lt;/p&gt;
&lt;p&gt;It supports both IPFS and IPNS, but no CIDv0s (because it uses only the &amp;quot;subdomain trick&amp;quot;; see Usage). It&#39;s based on Kooda&#39;s geminid (with small changes from me), ipfs.scm, and ttltbl.scm (something I hacked together tonight).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[&amp;quot;[ANN] Gemini-IPFS gateway&amp;quot;, hsanjuan](gemini://rawtext.club/~sloum/geminilist/005449.gmi)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.upyum.com/cgit.cgi/geminid&quot;&gt;geminid (by Kooda)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;ipfs.html&quot;&gt;ipfs.scm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~siiky/geminid/tree/experiments&quot;&gt;geminid (IPFS branch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~siiky/ttltbl.scm&quot;&gt;ttltbl.scm&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;How do you actually use it? The URLs are similar to those you&#39;d see with the HTTP gateway.&lt;/p&gt;
&lt;p&gt;Pick a CID (this capsule&#39;s for example), and go here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../ipfs.txt&quot;&gt;Capsule CID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;gemini://&amp;lt;cid&quot;&gt;gemini://&amp;lt;cid&lt;/a&gt;.ipfs.localhost/&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;There&#39;s also an example page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;gemini://bafkreie5eda6jkhtxi5c3pcpaqqlwl2xfkgasqk555vtljcdrfy3uyio4a.ipfs.localhost/&quot;&gt;gemini://bafkreie5eda6jkhtxi5c3pcpaqqlwl2xfkgasqk555vtljcdrfy3uyio4a.ipfs.localhost/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;../hello.gmi&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;As long as links are relative (link/to/some/../file.txt) or absolute but without scheme://hostname/ (/link/to/file.txt), everything just works inside the IPFS network.&lt;/p&gt;
&lt;p&gt;Note that the server doesn&#39;t list directories -- a little bit of intentionally and a little bit out of laziness. When you try to access a directory you&#39;re redirected to /index.gmi (this is a Gemini server after all). If there&#39;s no index.gmi then it borks. But it doesn&#39;t work only with Gemini capsules either, ofc! It should serve any files the HTTP gateway would too.&lt;/p&gt;
&lt;p&gt;To access IPNS, pick a CID or name, and go here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;gemini://&amp;lt;cid&quot;&gt;gemini://&amp;lt;cid&lt;/a&gt;.ipns.localhost/&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;gemini://&amp;lt;name&quot;&gt;gemini://&amp;lt;name&lt;/a&gt;.ipns.localhost/&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;For example the IPFS site (apparently they changed domains from .io to .tech?):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;gemini://ipfs.io.ipns.localhost/index.html&quot;&gt;gemini://ipfs.io.ipns.localhost/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;gemini://ipfs.tech.ipns.localhost/index.html&quot;&gt;gemini://ipfs.tech.ipns.localhost/index.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Your Gemini client won&#39;t render the HTML page probably, but you&#39;ll get the content!&lt;/p&gt;
&lt;p&gt;For some reason Lagrange doesn&#39;t like one of these two, doesn&#39;t even send a request to the gateway, instead saying &amp;quot;failed to look up hostname&amp;quot;. The other works fine, I have no idea why, but it really didn&#39;t look like a problem with the gateway.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Install and run the Kubo node.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ipfs.tech/#install&quot;&gt;https://ipfs.tech/#install&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Install CHICKEN 5.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://code.call-cc.org&quot;&gt;https://code.call-cc.org&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Install the ipfs egg:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chicken-install ipfs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install ttltbl:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone --depth=1 https://git.sr.ht/~siiky/ttltbl.scm
cd ttltbl.scm
chicken-install
cd ..
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the WIP IPFS branch of my geminid fork:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone --depth=1 --branch experiments https://git.sr.ht/~siiky/geminid
cd geminid
chicken-install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate a cert (suggestions welcome, I don&#39;t understand any of this shit):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl req -new -subj &#39;/CN=localhost&#39; -addext &#39;subjectAltName = DNS:*.localhost&#39; -x509 -newkey ec -pkeyopt ec_paramgen_curve:prime256v1 -days 1825 -nodes -out wild-cert.pem -keyout wild-key.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the gateway:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;csi -s ipfs-server.scm
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Architecture&lt;/h2&gt;
&lt;p&gt;Not much to say about it. The gateway accepts Gemini requests, interacts with the Kubo node through its RPC API (resolve IPNS CIDs/names if necessary, ask the type of a UnixFS object, and read the actual content), and sends back results.&lt;/p&gt;
&lt;p&gt;The post so far described how the gateway works with the ipfs-request-handler, which dynamically accepts an IPFS/IPNS CID/Name and serves content the user asks for. There&#39;s also constant-scheme/root-cid which, when given the scheme (ipfs/ipns) and CID/Name, works like any other Gemini server, serving content from that CID/Name tree only! This latter would be a pretty cool way to publish content. Similar to SourceHut pages but instead of sending a tarball with the content you send the CID/Name of the content.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/psychology/naturally-ungood.gmi</id>
  <title type="text">Naturally Ungood</title>
  <updated>2022-08-07T00:00:00Z</updated>
  <published>2022-08-07T00:00:00Z</published>
  <link href="https://siiky.srht.site/psychology/naturally-ungood.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/psychology/naturally-ungood.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Naturally Ungood
@siiky
2022/08/07
2022/08/07

I had this thought like 2 days ago, that people aren&#39;t naturally ungood and selfish, but instead do what seems to them to be the best way to minimize their own misery. Obviously it doesn&#39;t lead to the globally optimal results (both intuitively and empirically), but what is one to do? What is one to do when everything around is so out of one&#39;s control and in general so misery inducing?

I don&#39;t know why it popped into my head while in the shower, but the thought was surely in part inspired by the recent &quot;Human Un-nature&quot;, and an interview with Aaron Swartz where he mentioned the book &quot;Moral Mazes&quot;. If memory serves me right (it&#39;s been several months) his own description of the book was something like, the decisions people make in companies are rational and even morally good decisions, possibly the best, but somehow the results are what we see all around us. It&#39;s in my reading list.

I think it&#39;ll help me internally. I fail as much as anybody. It&#39;ll help me tolerate the actions of others but also my own, hopefully.

=&gt; gemini://beyondneolithic.life/posts/human_un-nature.gmi &quot;Human Un-nature&quot;
=&gt; gemini://degrowther.smol.pub/20220804_human_nature &quot;Re: Human Un-nature&quot;, degrowther
=&gt; https://invidious.snopyta.org/watch?v=JUt5gjqNI1w &quot;We Can Change The World&quot;
=&gt; gemini://gemi.dev/cgi-bin/wp.cgi/view?Moral_Mazes &quot;Moral Mazes&quot;, Robert Jackall
=&gt; gemini://gemi.dev/cgi-bin/wp.cgi/view?Aaron_Swartz Aaron Swartz
  </content>
  <content type="text/html">

&lt;h1&gt;Naturally Ungood&lt;/h1&gt;
&lt;p&gt;@siiky
2022/08/07
2022/08/07&lt;/p&gt;
&lt;p&gt;I had this thought like 2 days ago, that people aren&#39;t naturally ungood and selfish, but instead do what seems to them to be the best way to minimize their own misery. Obviously it doesn&#39;t lead to the globally optimal results (both intuitively and empirically), but what is one to do? What is one to do when everything around is so out of one&#39;s control and in general so misery inducing?&lt;/p&gt;
&lt;p&gt;I don&#39;t know why it popped into my head while in the shower, but the thought was surely in part inspired by the recent &amp;quot;Human Un-nature&amp;quot;, and an interview with Aaron Swartz where he mentioned the book &amp;quot;Moral Mazes&amp;quot;. If memory serves me right (it&#39;s been several months) his own description of the book was something like, the decisions people make in companies are rational and even morally good decisions, possibly the best, but somehow the results are what we see all around us. It&#39;s in my reading list.&lt;/p&gt;
&lt;p&gt;I think it&#39;ll help me internally. I fail as much as anybody. It&#39;ll help me tolerate the actions of others but also my own, hopefully.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;gemini://beyondneolithic.life/posts/human_un-nature.gmi&quot;&gt;&amp;quot;Human Un-nature&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;gemini://degrowther.smol.pub/20220804_human_nature&quot;&gt;&amp;quot;Re: Human Un-nature&amp;quot;, degrowther&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://invidious.snopyta.org/watch?v=JUt5gjqNI1w&quot;&gt;&amp;quot;We Can Change The World&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;gemini://gemi.dev/cgi-bin/wp.cgi/view?Moral_Mazes&quot;&gt;&amp;quot;Moral Mazes&amp;quot;, Robert Jackall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;gemini://gemi.dev/cgi-bin/wp.cgi/view?Aaron_Swartz&quot;&gt;Aaron Swartz&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/kB45oC/gemini-handlers.gmi</id>
  <title type="text">Custom Gemini Handlers</title>
  <updated>2022-08-06T00:00:00Z</updated>
  <published>2022-08-06T00:00:00Z</published>
  <link href="https://siiky.srht.site/kB45oC/gemini-handlers.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/kB45oC/gemini-handlers.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Custom Gemini Handlers
@siiky
2022/08/06
2022/08/06

Just learned how to setup custom handlers for the gemini scheme in Firefox and XDG.

For Firefox, go to about:config, create a new boolean variable named network.protocol-handler.expose.gemini and set it to false. Open a gemini URL, choose your Gemini client and you&#39;re good to go.

For XDG, create a desktop file in ~/.local/share/applications/ (or your equivalent) with the following content, replacing Lagrange with your client of choice:

```lagrange.desktop
[Desktop Entry]
Type=Application
Name=Lagrange Gemini Client
Exec=lagrange %u
StartupNotify=false
MimeType=x-scheme-handler/gemini;
```

And you&#39;re good to go, opening gemini URLs with xdg-open or clicking things should work now. It seemed to take effect immediately here.

Reference:

=&gt; https://stackoverflow.com/questions/22729686/set-custom-protocol-handler-in-firefox
=&gt; https://kb.mozillazine.org/Register_protocol#Firefox_3.5_and_above
=&gt; https://unix.stackexchange.com/questions/497146/create-a-custom-url-protocol-handler
  </content>
  <content type="text/html">

&lt;h1&gt;Custom Gemini Handlers&lt;/h1&gt;
&lt;p&gt;@siiky
2022/08/06
2022/08/06&lt;/p&gt;
&lt;p&gt;Just learned how to setup custom handlers for the gemini scheme in Firefox and XDG.&lt;/p&gt;
&lt;p&gt;For Firefox, go to about:config, create a new boolean variable named network.protocol-handler.expose.gemini and set it to false. Open a gemini URL, choose your Gemini client and you&#39;re good to go.&lt;/p&gt;
&lt;p&gt;For XDG, create a desktop file in ~/.local/share/applications/ (or your equivalent) with the following content, replacing Lagrange with your client of choice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Desktop Entry]
Type=Application
Name=Lagrange Gemini Client
Exec=lagrange %u
StartupNotify=false
MimeType=x-scheme-handler/gemini;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you&#39;re good to go, opening gemini URLs with xdg-open or clicking things should work now. It seemed to take effect immediately here.&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/22729686/set-custom-protocol-handler-in-firefox&quot;&gt;https://stackoverflow.com/questions/22729686/set-custom-protocol-handler-in-firefox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kb.mozillazine.org/Register_protocol#Firefox_3.5_and_above&quot;&gt;https://kb.mozillazine.org/Register_protocol#Firefox_3.5_and_above&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/questions/497146/create-a-custom-url-protocol-handler&quot;&gt;https://unix.stackexchange.com/questions/497146/create-a-custom-url-protocol-handler&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/petri_nets/log004.gmi</id>
  <title type="text">Petri Nets Log #004</title>
  <updated>2022-08-04T00:00:00Z</updated>
  <published>2022-08-04T00:00:00Z</published>
  <link href="https://siiky.srht.site/petri_nets/log004.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/petri_nets/log004.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Petri Nets Log #004
@siiky
2022/08/04
2022/08/04

Started reading &quot;The Application of Petri Nets to Workflow Management&quot;, by W.M.P. van der Aalst last friday and finished today. You need paid access to download the PDF but I can send it to you in case you&#39;re interested, just contact me.

As the title suggests the paper is not about programming but workflow management. Specifically, it&#39;s about how the processes executed in a company&#39;s context can be modeled by Petri nets, and reasons why that is a good thing. A recurrent example was that of an insurance/complaints company, where customers may submit complaints and the company processes them to decide whether the customer is right or not.

The definition wasn&#39;t too different from the Statebox one (see log #001), but lots of interesting little things are discussed in the paper that can also be applied to programming, and specifically a Petri nets programming language implementation (that I&#39;m gonna call &quot;execution environment&quot;).

## Resources

Resources are the entities that execute an enabled transition. In the context of the insurance company, a transition may be &quot;reviewing a complaint form&quot;, and the person that does the review is the resource (don&#39;t squint too hard on the terminology). In the context of programming, a transition is a piece of code, and the resource that executes it may be a number of different things! In a strictly sequential execution environment, the resource is some CPU time of the process; in a parallel execution environment it could be some CPU time of an OS thread; but it could also be a whole green thread (read: Erlang (BEAM) process).

In the last case, I can think of at least two alternatives (using BEAM to make things more concrete): either there is a specific process for each transition, which executes only that specific transition when it is enabled; or a process is spawned each time a transition is fired, letting even the same transition execute concurrently (as long as both can fire, of course; e.g., they fire sequentially but execute in parallel).


Thus, an execution environment must either make decisions about the execution semantics and force these semantics down the throats of the programmers; or it must give the programmers the tools to choose the semantics they think fit their problems best.

The former is basically the case for ALL programming languages, which I can easily understand. It&#39;s difficult enough to write a good implementation let alone several good implementations that may be used based on configurations or whatnot, possibly changed at runtime.

## Routing

Something that isn&#39;t mentioned in the Statebox monograph is different &quot;routing&quot; types. The WF-nets paper mentions four distinct types but I believe there are technically only two of them.

The four types are (a) sequential, (b) parallel, (c) conditional, and (d) iterative. Next follow my own representations of Fig. 3, as close to the real ones as I can (they don&#39;t indeed have places represented, only transitions).

=&gt; seq_routing.png Sequential routing
=&gt; par_routing.png Parallel routing
=&gt; cond_routing.png Conditional routing
=&gt; iter_routing.png Iterative routing

There&#39;s nothing to say about sequential routing. There&#39;s nothing much to say about parallel routing (the output of a transition is fed into two other transitions). And there&#39;s nothing to say about iterative routing either -- the image didn&#39;t come so well but notice that the result of B is fed back into B. All three of these are essentially the parallel routing, and there&#39;s nothing in the Statebox definition preventing any of these cases.

Conditional routing is the new guy here. In conditional routing either B or C fire after A firing, but not both! Unless I completely missed it in the Statebox monograph, there&#39;s no concept of conditionally sending tokens to this or that place. All transitions must always put their multiplicity of tokens in the destination places. In retrospect, I remember seeing some example model (the smart contract gambling one) where a transition could either succeed or fail, which had two &quot;success&quot; and &quot;failure&quot; transitions after it, and wondering why that choice wasn&#39;t represented. See the &quot;Fail&quot; and &quot;Pass&quot; coming after &quot;OracleCallback&quot; in the following image.

=&gt; gambling.png

Now I&#39;m wondering how/if Statebox plan to tackle this.

Additionally two different kinds of conditional routing are presented in the WF-nets paper, but I haven&#39;t transcribed and compiled all of my notes yet so this is it for now.


=&gt; https://doi.org/10.1142/S0218126698000043
=&gt; https://blog.statebox.org/behavioral-programming-with-petri-nets-%C3%A0-la-functional-way-smart-contracts-96d801cef8cc &quot;Behavioral Programming with Petri Nets à la Functional Way — Smart Contracts&quot;, Fabrizio Romano Genovese
=&gt; log001.gmi Log #001
=&gt; ../contact.gmi Contact


=&gt; logs.gmi Logs index
  </content>
  <content type="text/html">

&lt;h1&gt;Petri Nets Log #004&lt;/h1&gt;
&lt;p&gt;@siiky
2022/08/04
2022/08/04&lt;/p&gt;
&lt;p&gt;Started reading &amp;quot;The Application of Petri Nets to Workflow Management&amp;quot;, by W.M.P. van der Aalst last friday and finished today. You need paid access to download the PDF but I can send it to you in case you&#39;re interested, just contact me.&lt;/p&gt;
&lt;p&gt;As the title suggests the paper is not about programming but workflow management. Specifically, it&#39;s about how the processes executed in a company&#39;s context can be modeled by Petri nets, and reasons why that is a good thing. A recurrent example was that of an insurance/complaints company, where customers may submit complaints and the company processes them to decide whether the customer is right or not.&lt;/p&gt;
&lt;p&gt;The definition wasn&#39;t too different from the Statebox one (see log #001), but lots of interesting little things are discussed in the paper that can also be applied to programming, and specifically a Petri nets programming language implementation (that I&#39;m gonna call &amp;quot;execution environment&amp;quot;).&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Resources are the entities that execute an enabled transition. In the context of the insurance company, a transition may be &amp;quot;reviewing a complaint form&amp;quot;, and the person that does the review is the resource (don&#39;t squint too hard on the terminology). In the context of programming, a transition is a piece of code, and the resource that executes it may be a number of different things! In a strictly sequential execution environment, the resource is some CPU time of the process; in a parallel execution environment it could be some CPU time of an OS thread; but it could also be a whole green thread (read: Erlang (BEAM) process).&lt;/p&gt;
&lt;p&gt;In the last case, I can think of at least two alternatives (using BEAM to make things more concrete): either there is a specific process for each transition, which executes only that specific transition when it is enabled; or a process is spawned each time a transition is fired, letting even the same transition execute concurrently (as long as both can fire, of course; e.g., they fire sequentially but execute in parallel).&lt;/p&gt;
&lt;p&gt;Thus, an execution environment must either make decisions about the execution semantics and force these semantics down the throats of the programmers; or it must give the programmers the tools to choose the semantics they think fit their problems best.&lt;/p&gt;
&lt;p&gt;The former is basically the case for ALL programming languages, which I can easily understand. It&#39;s difficult enough to write a good implementation let alone several good implementations that may be used based on configurations or whatnot, possibly changed at runtime.&lt;/p&gt;
&lt;h2&gt;Routing&lt;/h2&gt;
&lt;p&gt;Something that isn&#39;t mentioned in the Statebox monograph is different &amp;quot;routing&amp;quot; types. The WF-nets paper mentions four distinct types but I believe there are technically only two of them.&lt;/p&gt;
&lt;p&gt;The four types are (a) sequential, (b) parallel, (c) conditional, and (d) iterative. Next follow my own representations of Fig. 3, as close to the real ones as I can (they don&#39;t indeed have places represented, only transitions).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;seq_routing.png&quot; alt=&quot;Sequential routing&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;par_routing.png&quot; alt=&quot;Parallel routing&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;cond_routing.png&quot; alt=&quot;Conditional routing&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;iter_routing.png&quot; alt=&quot;Iterative routing&quot; /&gt;&lt;/p&gt;
&lt;p&gt;There&#39;s nothing to say about sequential routing. There&#39;s nothing much to say about parallel routing (the output of a transition is fed into two other transitions). And there&#39;s nothing to say about iterative routing either -- the image didn&#39;t come so well but notice that the result of B is fed back into B. All three of these are essentially the parallel routing, and there&#39;s nothing in the Statebox definition preventing any of these cases.&lt;/p&gt;
&lt;p&gt;Conditional routing is the new guy here. In conditional routing either B or C fire after A firing, but not both! Unless I completely missed it in the Statebox monograph, there&#39;s no concept of conditionally sending tokens to this or that place. All transitions must always put their multiplicity of tokens in the destination places. In retrospect, I remember seeing some example model (the smart contract gambling one) where a transition could either succeed or fail, which had two &amp;quot;success&amp;quot; and &amp;quot;failure&amp;quot; transitions after it, and wondering why that choice wasn&#39;t represented. See the &amp;quot;Fail&amp;quot; and &amp;quot;Pass&amp;quot; coming after &amp;quot;OracleCallback&amp;quot; in the following image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;gambling.png&quot; alt /&gt;&lt;/p&gt;
&lt;p&gt;Now I&#39;m wondering how/if Statebox plan to tackle this.&lt;/p&gt;
&lt;p&gt;Additionally two different kinds of conditional routing are presented in the WF-nets paper, but I haven&#39;t transcribed and compiled all of my notes yet so this is it for now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://doi.org/10.1142/S0218126698000043&quot;&gt;https://doi.org/10.1142/S0218126698000043&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.statebox.org/behavioral-programming-with-petri-nets-%C3%A0-la-functional-way-smart-contracts-96d801cef8cc&quot;&gt;&amp;quot;Behavioral Programming with Petri Nets à la Functional Way — Smart Contracts&amp;quot;, Fabrizio Romano Genovese&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;log001.gmi&quot;&gt;Log #001&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;../contact.gmi&quot;&gt;Contact&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;logs.gmi&quot;&gt;Logs index&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/meta/dates.gmi</id>
  <title type="text">Post dates</title>
  <updated>2022-08-03T00:00:00Z</updated>
  <published>2022-06-23T00:00:00Z</published>
  <link href="https://siiky.srht.site/meta/dates.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/meta/dates.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Post dates
@siiky
2022/06/23
2022/08/03

Until now, I&#39;d never &quot;standardized&quot; what the dates on my site mean, even though I&#39;ve been consistent with them everywhere (not much to screw up anyway): both on the index and the posts themselves, the dates are always when I started writing the post (or created the file, at least). So there are unfinished (unstarted, even) posts that, were I to finish and publish, would get the date I first created them on the index. This isn&#39;t great. And something similarly ungreat happens with posts that I take a long time to write (actually actively writing), sometimes across a few days of a week -- the post has a certain date, but in reality it&#39;s published only some days later -- usually leading to interleaving of posts: start post A, start post B, publish post B, publish post A.

I started thinking about this because I&#39;ve been lurking Geminispace for a bit now, and liking it a lot! So I&#39;m planning on writing in Gemtext from now on, instead of Markdown or Org, and convert my site to a Gemini capsule (still making HTML available through HTTPS for anyone not with it &lt;insert Dr. Evil reference here&gt;). Turning the index, which is one of the most complex parts of my site, into a simple Gemtext page, is just... hmhmhm! And, other than the index being the front-page, serving at the same time as the &quot;feed&quot; that people can subscribe to is also just... hmhmhm!

But with that comes a problem, because I update posts, some more than others, some days more than others, but, posts don&#39;t necessarily remain as they were first published. Because of it, and of the interleaving I mentioned above, I&#39;ll start using a new convention -- slightly harder to maintain, but if I don&#39;t screw up should be worth it:

Posts themselves will have the date of when I first started writing or first created the file, while the index (feed) will have the date of the last update instead. This way should give no jumps to the past when I publish new posts, and at the same time works as an updates notifier (though I still have to test how clients behave).
  </content>
  <content type="text/html">

&lt;h1&gt;Post dates&lt;/h1&gt;
&lt;p&gt;@siiky
2022/06/23
2022/08/03&lt;/p&gt;
&lt;p&gt;Until now, I&#39;d never &amp;quot;standardized&amp;quot; what the dates on my site mean, even though I&#39;ve been consistent with them everywhere (not much to screw up anyway): both on the index and the posts themselves, the dates are always when I started writing the post (or created the file, at least). So there are unfinished (unstarted, even) posts that, were I to finish and publish, would get the date I first created them on the index. This isn&#39;t great. And something similarly ungreat happens with posts that I take a long time to write (actually actively writing), sometimes across a few days of a week -- the post has a certain date, but in reality it&#39;s published only some days later -- usually leading to interleaving of posts: start post A, start post B, publish post B, publish post A.&lt;/p&gt;
&lt;p&gt;I started thinking about this because I&#39;ve been lurking Geminispace for a bit now, and liking it a lot! So I&#39;m planning on writing in Gemtext from now on, instead of Markdown or Org, and convert my site to a Gemini capsule (still making HTML available through HTTPS for anyone not with it &amp;lt;insert Dr. Evil reference here&amp;gt;). Turning the index, which is one of the most complex parts of my site, into a simple Gemtext page, is just... hmhmhm! And, other than the index being the front-page, serving at the same time as the &amp;quot;feed&amp;quot; that people can subscribe to is also just... hmhmhm!&lt;/p&gt;
&lt;p&gt;But with that comes a problem, because I update posts, some more than others, some days more than others, but, posts don&#39;t necessarily remain as they were first published. Because of it, and of the interleaving I mentioned above, I&#39;ll start using a new convention -- slightly harder to maintain, but if I don&#39;t screw up should be worth it:&lt;/p&gt;
&lt;p&gt;Posts themselves will have the date of when I first started writing or first created the file, while the index (feed) will have the date of the last update instead. This way should give no jumps to the past when I publish new posts, and at the same time works as an updates notifier (though I still have to test how clients behave).&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/programming/shell.gmi</id>
  <title type="text">RE: Misadventures with bash shell</title>
  <updated>2022-08-02T00:00:00Z</updated>
  <published>2022-08-01T00:00:00Z</published>
  <link href="https://siiky.srht.site/programming/shell.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/programming/shell.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# RE: Misadventures with bash shell
@siiky
2022/08/01
2022/08/02

As StackSmith prompted:

&gt; In the meantime, if you have a few minutes, write about why you love your shell.  I really want to know.

=&gt; gemini://gemini.ctrl-c.club/~stack/gemlog/2022-08-01.bash.gmi Misadventures with bash shell

I don&#39;t love it, I even agree with some of the points raised, but after learning it one has to admit: most tasks are damn terse. And I can&#39;t imagine any Lisp-like syntax that could come even close -- BTW it&#39;s been tried at least once, that I know of:

=&gt; https://scsh.net Scsh
=&gt; https://en.wikipedia.org/wiki/Scsh Scsh (Wikipedia)


Maybe interesting, maybe not, but here are some of the features I use most often. I never know what&#39;s the right if/then syntax either, so when I want this:

```scm
(when (file-exists? &quot;...&quot;)
  (do-this)
  (and-that))

(unless (file-exists? &quot;...&quot;)
  (do-this)
  (and-that))
```

I write this instead:

```bash
[ -f &quot;...&quot; ] &amp;&amp; (do-this; do-that)

[ -f &quot;...&quot; ] || (do-this; do-that)
```

No more guessing where the hell the bang should go.

Loops all follow the same pattern:

```bash
for/while/until ...; do ...; done
```

You can put the body of the loop in the background too, but obviously be careful not to forkbomb yourself.

```bash
for/while/until ...; do ... &amp; done
```

Something I do often to start multiple terminals in the same Nix shell:

```bash
exec nix-shell --run &#39;sh -c &quot;for i in {1..4}; do terminal &amp; done&quot;&#39; &amp;
```

The `exec ... &amp;` makes the nix-shell and child processes &quot;independent&quot;, so that I can continue to use the current terminal and/or close it without affecting the others. `for i in {1..4}` is equivalent to `for i in 1 2 3 4`. I think this syntax is relatively &quot;new&quot;; if you don&#39;t have it, you can use seq instead:

```bash
for i in `seq 1 4`; do ...; done
```

Doing something for each line of input:

```bash
some-command | while read line; do ...; done
```

read alone is a can of worms. It&#39;s very useful for simple things so worth knowing.

And some of the most important stuff: strings! There are 3 &quot;types&quot;: single quote, double quote, and backtick (plus $(...)). If you&#39;re unsure what type of string you need, go with single quotes because they&#39;re the safest and least surprising. If you need to interpolate values into your string, use double quote strings. If you need the result of a command as a string, use backticks (like the seq above). Backticks can be embedded in other string types.

```bash
test=hello
echo &#39;hello world&#39;         # &quot;hello world&quot;
echo &#39;$test world&#39;         # &quot;$test world&quot;
echo &quot;$test world&quot;         # &quot;hello world&quot;
echo `echo &quot;$test world&quot;`  # &quot;hello world&quot;
echo $(echo &quot;$test world&quot;) # &quot;hello world&quot;
```

(I got some examples wrong as I was writing this haha)

In extreme cases, even though it&#39;s a mess to read, you can take advantage of automatic string concatenation to mix string types.

```bash
echo &#39;a string with a single quote (&#39;&quot;&#39;&quot;&#39;)&#39;
echo &quot;a string with a double quote (&quot;&#39;&quot;&#39;&quot;)&quot;
```

I&#39;ve tried escaping in the past and failed too many times. This has never failed me once.


As a sort of conclusion: for some reason bash is one of the most, if not the most, popular interactive shell. Probably because it&#39;s the default in many Linux distros, especially the biggest ones. The default effect certainly worked with me because I&#39;m still &quot;stuck&quot; with it. But bash isn&#39;t the only one out there, so if you don&#39;t like it, do yourself a favor and try a different one! Some shells I can think of: fish, zsh, ksh, ion (of RedoxOS), csh.

As for me, I&#39;ve read my share of shit-throwing at bash, but it&#39;s been working OK. I don&#39;t need the fancy features offered by fish or zsh. If I tried any new interactive shell, it&#39;d probably by zsh or ion.
  </content>
  <content type="text/html">

&lt;h1&gt;RE: Misadventures with bash shell&lt;/h1&gt;
&lt;p&gt;@siiky
2022/08/01
2022/08/02&lt;/p&gt;
&lt;p&gt;As StackSmith prompted:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the meantime, if you have a few minutes, write about why you love your shell.  I really want to know.&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;gemini://gemini.ctrl-c.club/~stack/gemlog/2022-08-01.bash.gmi&quot;&gt;Misadventures with bash shell&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I don&#39;t love it, I even agree with some of the points raised, but after learning it one has to admit: most tasks are damn terse. And I can&#39;t imagine any Lisp-like syntax that could come even close -- BTW it&#39;s been tried at least once, that I know of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://scsh.net&quot;&gt;Scsh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Scsh&quot;&gt;Scsh (Wikipedia)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Maybe interesting, maybe not, but here are some of the features I use most often. I never know what&#39;s the right if/then syntax either, so when I want this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(when (file-exists? &amp;quot;...&amp;quot;)
  (do-this)
  (and-that))

(unless (file-exists? &amp;quot;...&amp;quot;)
  (do-this)
  (and-that))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I write this instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ -f &amp;quot;...&amp;quot; ] &amp;amp;&amp;amp; (do-this; do-that)

[ -f &amp;quot;...&amp;quot; ] || (do-this; do-that)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No more guessing where the hell the bang should go.&lt;/p&gt;
&lt;p&gt;Loops all follow the same pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for/while/until ...; do ...; done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can put the body of the loop in the background too, but obviously be careful not to forkbomb yourself.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for/while/until ...; do ... &amp;amp; done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something I do often to start multiple terminals in the same Nix shell:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exec nix-shell --run &#39;sh -c &amp;quot;for i in {1..4}; do terminal &amp;amp; done&amp;quot;&#39; &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;exec ... &amp;amp;&lt;/code&gt; makes the nix-shell and child processes &amp;quot;independent&amp;quot;, so that I can continue to use the current terminal and/or close it without affecting the others. &lt;code&gt;for i in {1..4}&lt;/code&gt; is equivalent to &lt;code&gt;for i in 1 2 3 4&lt;/code&gt;. I think this syntax is relatively &amp;quot;new&amp;quot;; if you don&#39;t have it, you can use seq instead:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in `seq 1 4`; do ...; done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Doing something for each line of input:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;some-command | while read line; do ...; done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;read alone is a can of worms. It&#39;s very useful for simple things so worth knowing.&lt;/p&gt;
&lt;p&gt;And some of the most important stuff: strings! There are 3 &amp;quot;types&amp;quot;: single quote, double quote, and backtick (plus $(...)). If you&#39;re unsure what type of string you need, go with single quotes because they&#39;re the safest and least surprising. If you need to interpolate values into your string, use double quote strings. If you need the result of a command as a string, use backticks (like the seq above). Backticks can be embedded in other string types.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test=hello
echo &#39;hello world&#39;         # &amp;quot;hello world&amp;quot;
echo &#39;$test world&#39;         # &amp;quot;$test world&amp;quot;
echo &amp;quot;$test world&amp;quot;         # &amp;quot;hello world&amp;quot;
echo `echo &amp;quot;$test world&amp;quot;`  # &amp;quot;hello world&amp;quot;
echo $(echo &amp;quot;$test world&amp;quot;) # &amp;quot;hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I got some examples wrong as I was writing this haha)&lt;/p&gt;
&lt;p&gt;In extreme cases, even though it&#39;s a mess to read, you can take advantage of automatic string concatenation to mix string types.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &#39;a string with a single quote (&#39;&amp;quot;&#39;&amp;quot;&#39;)&#39;
echo &amp;quot;a string with a double quote (&amp;quot;&#39;&amp;quot;&#39;&amp;quot;)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&#39;ve tried escaping in the past and failed too many times. This has never failed me once.&lt;/p&gt;
&lt;p&gt;As a sort of conclusion: for some reason bash is one of the most, if not the most, popular interactive shell. Probably because it&#39;s the default in many Linux distros, especially the biggest ones. The default effect certainly worked with me because I&#39;m still &amp;quot;stuck&amp;quot; with it. But bash isn&#39;t the only one out there, so if you don&#39;t like it, do yourself a favor and try a different one! Some shells I can think of: fish, zsh, ksh, ion (of RedoxOS), csh.&lt;/p&gt;
&lt;p&gt;As for me, I&#39;ve read my share of shit-throwing at bash, but it&#39;s been working OK. I don&#39;t need the fancy features offered by fish or zsh. If I tried any new interactive shell, it&#39;d probably by zsh or ion.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/programming/ocr.gmi</id>
  <title type="text">Offline Code Reviews</title>
  <updated>2022-07-31T00:00:00Z</updated>
  <published>2022-07-30T00:00:00Z</published>
  <link href="https://siiky.srht.site/programming/ocr.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/programming/ocr.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Offline Code Reviews
@siiky
2022/07/30
2022/07/31

I&#39;m looking for a simple offline code review tool/workflow. I&#39;m used to the GitHub PR workflow, but I&#39;d like to be able to do CRs offline too. Since I&#39;m moving away to SourceHut I want to learn something different, maybe the email workflow. However, two things:

I want to change mail clients (Thunderbird needs too much mousework) but setting up terminal email clients looks like rocket science to me (looking at you (neo)mutt). Aerc was actually REALLY easy to setup! (except for my uni account) But unfortunately it doesn&#39;t work offline. Conclusion: getting contributions by email is OK as long as I don&#39;t need it for anything else.

At work I use GH PRs still. Other than being online, the problem with the GH PR review interface for me is that it&#39;s slow for large PRs on my laptop. Having a tiny screen doesn&#39;t help either. Plus, I already have all of the necessary code on my PC all the time because I add my teammates&#39; forks as remotes.

When someone makes a PR, I should be able to make the code review completely offline without relying on the GH interface. And why should I have to use an interface to review code different from the one I use to program, anyway? On the browser I have some font I&#39;m not used to, syntax highlighting I&#39;m not used to, colors I&#39;m not used to, keybindings (and lack thereof) I&#39;m not used to, ... Some of this is probably partially fixable but... meh, I don&#39;t want to have to muck with yet more browser settings that I have to replicate manually from setup to setup never to get it exactly the same anywhere.

There&#39;s a vim diff mode and a helper alias vimdiff, which is actually pretty good. Vim also recognizes the Git diff format and highlights everything correctly. So using vim to do CRs I think would be pretty dope.

## Email workflow

An aside on the email workflow: as I understand it, contributors are supposed to send patchsets to some mailing list, and reviewers make the review right there in the email itself? Sending comments and whatnot as replies.

How do people deal with big patchsets? What if you&#39;re reviewing file A that uses some functions from file B but file B is in another email? You jump between emails to check both? That sounds so hurgh but maybe because I&#39;m thinking in Thunderbird terms...

## webrev

Searched a bit around and found webrev, a script developed and maintained by the illumos project. Downloaded and managed to get it running after some modifications. It needs another script, which_scm, but since I won&#39;t use any VCS other than Git I removed all unnecessary code I could find.

=&gt; https://src.illumos.org/source/xref/illumos-gate/usr/src/tools/scripts/webrev.sh webrev (latest by illumos)
=&gt; https://src.illumos.org/source/xref/illumos-gate/usr/src/tools/scripts/which_scm.sh which_scm (latest by illumos)

The usage is simple enough though not clearly stated in the help message. It uses ksh which I don&#39;t have installed, but Nix makes this easy. On the directory of the repo you want to review: checkout the branch you want to merge and then you run webrev.

```sh
git checkout fix-bug-123
nix-shell -p ksh --run &#39;webrev -p target-branch&#39;
```

It creates a webrev directory with a bunch of files, one of which is index.html. This page has all the {add,chang,remov}ed files plus, for each: stats (total lines changed, additions, deletions, modified, unchanged); links to cdiff, udiff, sdiff; frames (not sure yet what this is); the before and the after; the patch; and the raw. Pretty neat.

One thing that I didn&#39;t expect but should have: it&#39;s not a plebian  git diff target-branch...fix-bug-1234  (the best I know)! It&#39;s actually the list of new commits created on the fix-bug-123 branch. How it does this I would like to know. Have to read the code some day.

It has a couple of quirks though, like, why the heck does it say that the arguments  -p target-branch  are unused if the result is different when I don&#39;t provide them? And why the heck doesn&#39;t the -? flag present the full help message?

=&gt; https://src.illumos.org/source/xref/illumos-gate/usr/src/tools/scripts/webrev.sh?r=bbf21555 webrev@bbf21555
=&gt; webrev.patch My Git only patch for webrev@bbf21555

It&#39;s neat that it creates a self contained set of files to review a specific PR, but it&#39;s still not quite there. :/ First of all, obviously it still uses the browser. And second, there&#39;s no way to mark a file as (un)reviewed, which is something I like from the GH and GitLab interfaces because it relieves me of the burden of wondering if I&#39;ve already reviewed a certain file or not.

## The solution?

I&#39;m thinking if writing some helper scripts to make this flow easier would be doable or twm.

I have to learn how webrev gets the list of commits introduced in a certain branch because it&#39;s the most useful starting point. Then, having the state in a file or w.e. is probably the best way to go (with the feature/target braches &amp; (un)reviewed files). Marking files as reviewed, and viewing the diff of a certain file (either with vimdiff or a git-diff in vim) should be easy enough.

Two harder problems to solve: review comments and branch (PR) updates.

How/Where to write and save review comments? Saving the git-diff somewhere and writing the comments there directly is the easiest way maybe, and maybe it&#39;s good enough. I can&#39;t think of any other way right now. AFAIK the email workflow works similarly (but in an email)?

That leaves only the updates problem. How to deal with new commits, rewritten branch history, &amp;c? For this I still don&#39;t have any good ideas. Re-reviewing the whole thing from scratch is not ideal... It should be possible to unmark the reviewed files if they&#39;ve changed between the old and the new branch tips. But I don&#39;t see any automatic way to reuse the old comments. In some cases they&#39;ll certainly be obsolete, but in others they&#39;ll still be valid. Making this step manual could be good enough...

## Conclusion

I can&#39;t imagine I&#39;m the only one wanting to do code reviews offline. And I can&#39;t imagine nobody before has wanted this either. After searching online almost all suggestions/ideas are complete overkill, like Gerrit, WTH! I just want to compare a bunch of files that I already have on my PC dammit! I shouln&#39;t&#39;ve to set up some full-blown server for this...

Hopefully I&#39;ve missed something so obvious that everyone knows of. If you think that&#39;s the case, dear reader, please! Send me an email!

=&gt; ../contact.gmi Contact
  </content>
  <content type="text/html">

&lt;h1&gt;Offline Code Reviews&lt;/h1&gt;
&lt;p&gt;@siiky
2022/07/30
2022/07/31&lt;/p&gt;
&lt;p&gt;I&#39;m looking for a simple offline code review tool/workflow. I&#39;m used to the GitHub PR workflow, but I&#39;d like to be able to do CRs offline too. Since I&#39;m moving away to SourceHut I want to learn something different, maybe the email workflow. However, two things:&lt;/p&gt;
&lt;p&gt;I want to change mail clients (Thunderbird needs too much mousework) but setting up terminal email clients looks like rocket science to me (looking at you (neo)mutt). Aerc was actually REALLY easy to setup! (except for my uni account) But unfortunately it doesn&#39;t work offline. Conclusion: getting contributions by email is OK as long as I don&#39;t need it for anything else.&lt;/p&gt;
&lt;p&gt;At work I use GH PRs still. Other than being online, the problem with the GH PR review interface for me is that it&#39;s slow for large PRs on my laptop. Having a tiny screen doesn&#39;t help either. Plus, I already have all of the necessary code on my PC all the time because I add my teammates&#39; forks as remotes.&lt;/p&gt;
&lt;p&gt;When someone makes a PR, I should be able to make the code review completely offline without relying on the GH interface. And why should I have to use an interface to review code different from the one I use to program, anyway? On the browser I have some font I&#39;m not used to, syntax highlighting I&#39;m not used to, colors I&#39;m not used to, keybindings (and lack thereof) I&#39;m not used to, ... Some of this is probably partially fixable but... meh, I don&#39;t want to have to muck with yet more browser settings that I have to replicate manually from setup to setup never to get it exactly the same anywhere.&lt;/p&gt;
&lt;p&gt;There&#39;s a vim diff mode and a helper alias vimdiff, which is actually pretty good. Vim also recognizes the Git diff format and highlights everything correctly. So using vim to do CRs I think would be pretty dope.&lt;/p&gt;
&lt;h2&gt;Email workflow&lt;/h2&gt;
&lt;p&gt;An aside on the email workflow: as I understand it, contributors are supposed to send patchsets to some mailing list, and reviewers make the review right there in the email itself? Sending comments and whatnot as replies.&lt;/p&gt;
&lt;p&gt;How do people deal with big patchsets? What if you&#39;re reviewing file A that uses some functions from file B but file B is in another email? You jump between emails to check both? That sounds so hurgh but maybe because I&#39;m thinking in Thunderbird terms...&lt;/p&gt;
&lt;h2&gt;webrev&lt;/h2&gt;
&lt;p&gt;Searched a bit around and found webrev, a script developed and maintained by the illumos project. Downloaded and managed to get it running after some modifications. It needs another script, which_scm, but since I won&#39;t use any VCS other than Git I removed all unnecessary code I could find.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://src.illumos.org/source/xref/illumos-gate/usr/src/tools/scripts/webrev.sh&quot;&gt;webrev (latest by illumos)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://src.illumos.org/source/xref/illumos-gate/usr/src/tools/scripts/which_scm.sh&quot;&gt;which_scm (latest by illumos)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The usage is simple enough though not clearly stated in the help message. It uses ksh which I don&#39;t have installed, but Nix makes this easy. On the directory of the repo you want to review: checkout the branch you want to merge and then you run webrev.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout fix-bug-123
nix-shell -p ksh --run &#39;webrev -p target-branch&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It creates a webrev directory with a bunch of files, one of which is index.html. This page has all the {add,chang,remov}ed files plus, for each: stats (total lines changed, additions, deletions, modified, unchanged); links to cdiff, udiff, sdiff; frames (not sure yet what this is); the before and the after; the patch; and the raw. Pretty neat.&lt;/p&gt;
&lt;p&gt;One thing that I didn&#39;t expect but should have: it&#39;s not a plebian  git diff target-branch...fix-bug-1234  (the best I know)! It&#39;s actually the list of new commits created on the fix-bug-123 branch. How it does this I would like to know. Have to read the code some day.&lt;/p&gt;
&lt;p&gt;It has a couple of quirks though, like, why the heck does it say that the arguments  -p target-branch  are unused if the result is different when I don&#39;t provide them? And why the heck doesn&#39;t the -? flag present the full help message?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://src.illumos.org/source/xref/illumos-gate/usr/src/tools/scripts/webrev.sh?r=bbf21555&quot;&gt;webrev@bbf21555&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;webrev.patch&quot;&gt;My Git only patch for webrev@bbf21555&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;It&#39;s neat that it creates a self contained set of files to review a specific PR, but it&#39;s still not quite there. :/ First of all, obviously it still uses the browser. And second, there&#39;s no way to mark a file as (un)reviewed, which is something I like from the GH and GitLab interfaces because it relieves me of the burden of wondering if I&#39;ve already reviewed a certain file or not.&lt;/p&gt;
&lt;h2&gt;The solution?&lt;/h2&gt;
&lt;p&gt;I&#39;m thinking if writing some helper scripts to make this flow easier would be doable or twm.&lt;/p&gt;
&lt;p&gt;I have to learn how webrev gets the list of commits introduced in a certain branch because it&#39;s the most useful starting point. Then, having the state in a file or w.e. is probably the best way to go (with the feature/target braches &amp;amp; (un)reviewed files). Marking files as reviewed, and viewing the diff of a certain file (either with vimdiff or a git-diff in vim) should be easy enough.&lt;/p&gt;
&lt;p&gt;Two harder problems to solve: review comments and branch (PR) updates.&lt;/p&gt;
&lt;p&gt;How/Where to write and save review comments? Saving the git-diff somewhere and writing the comments there directly is the easiest way maybe, and maybe it&#39;s good enough. I can&#39;t think of any other way right now. AFAIK the email workflow works similarly (but in an email)?&lt;/p&gt;
&lt;p&gt;That leaves only the updates problem. How to deal with new commits, rewritten branch history, &amp;amp;c? For this I still don&#39;t have any good ideas. Re-reviewing the whole thing from scratch is not ideal... It should be possible to unmark the reviewed files if they&#39;ve changed between the old and the new branch tips. But I don&#39;t see any automatic way to reuse the old comments. In some cases they&#39;ll certainly be obsolete, but in others they&#39;ll still be valid. Making this step manual could be good enough...&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I can&#39;t imagine I&#39;m the only one wanting to do code reviews offline. And I can&#39;t imagine nobody before has wanted this either. After searching online almost all suggestions/ideas are complete overkill, like Gerrit, WTH! I just want to compare a bunch of files that I already have on my PC dammit! I shouln&#39;t&#39;ve to set up some full-blown server for this...&lt;/p&gt;
&lt;p&gt;Hopefully I&#39;ve missed something so obvious that everyone knows of. If you think that&#39;s the case, dear reader, please! Send me an email!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../contact.gmi&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/philosophy/flexibility-relations.gmi</id>
  <title type="text">Flexibility &amp; Relations</title>
  <updated>2022-07-28T00:00:00Z</updated>
  <published>2022-06-07T00:00:00Z</published>
  <link href="https://siiky.srht.site/philosophy/flexibility-relations.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/philosophy/flexibility-relations.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Flexibility &amp; Relations
@siiky
2022/06/07
2022/07/28

I recently wrote about how flexibility may be beneficial in your course of life.

=&gt; ../philosophy/flexibility-life.gmi Flexibility &amp; Life

I&#39;ve thought some times in the past how after I present myself in some way, I can no longer present myself some other (conflicting) way in the future to the same person(s). At least not with some friction.

In this post I&#39;d like to write about that, yet another aspect of life where flexibility can be useful (and possibly a hindrance!): human relations.


I first came across a similar idea (maybe when I first thought about this, in fact) reading one of Descartes&#39; books -- either &quot;Discourse on the Method&quot; or &quot;Selections from the Principles of Philosophy&quot;, I can&#39;t remember. In that book he wrote that there were works he didn&#39;t want to publish during his lifetime.¹ &quot;Wut? why?&quot; He explains that his works were often controversial due to the nature of their content -- religion and God were particularly controversial² -- and by not publishing them he could continue with his life and work without any impediments (read: being imprisoned and/or killed).


If you tell a friend one day that you like a nice and hot churro (or fartura, the inferior alternative), you can&#39;t then tell them the next day that you don&#39;t like it, right? It doesn&#39;t make sense! It can look like you lied or are lying now.

Think of knowledge as a (consistent i.e. non-contradictory) set of propositions. From this point of view, acquiring knowledge is performing the set-union of the current propositions with the new. If a person knows that you like churros (P), and learns later that you /don&#39;t/ like churros (¬P), their knowledge becomes inconsistent: { P, ¬P } is inconsistent, because (P ∧ ¬P) is a contradiction!

Of course, people can change their opinions, tastes, and whatnot but it&#39;s a slow process, slow enough not to be flexible, the point of this post and the previous one.

&quot;So what&#39;s it mean?&quot; If you&#39;re of an opinion now that (you think) you&#39;re likely to change in the future, then... maybe you&#39;re better off not sharing it with others right now?

Because, if you change opinion in the future, it&#39;ll take time for people to adjust their knowledge set to your newly changed opinion; people will judge you hard if said opinion is controversial or doesn&#39;t go down their throats well; and, if you change opinion in the future, whatever negative side-effects came of your sharing it were most likely a net loss -- waste of time and energy, at best.

There&#39;s a caveat, though. I&#39;m here advocating that it may be a good idea to refrain from sharing details about yourself with other people, and I don&#39;t make any distinctions between close or not. But if you do it too much, especially with a close relation, the other person won&#39;t know that much about you, which may mean the relation isn&#39;t that great, and it may end because of it.

And a possible alternative to the all-or-nothing: very clearly stating that this opinion of yours is something prone to change, something you are thinking of/working on right now, but are not quite sure about just yet.

I think this might be kinda hard to pull off. People may think you&#39;re saying that just as an escape route in case shit hits the fan, for example. But I couldn&#39;t possibly guess all the weird ways people might think, the same way I couldn&#39;t possibly guess all the ways shit might hit the fan.

Just another tool in the toolbox... Maybe. Or not. ¯\__(ツ)_/¯


¹ There are cons to this, such as not discussing with as many people, but he was a pretty good thinker -- he had a strict method for reasoning, which was the subject of one of the two books (probably &quot;Discourse on the Method&quot; judging by the title). On top of that (IIRC) he had a few close relations with whom to discuss the more controversial topics.

² Not that they somehow went against the state of affairs of the time. He believed in God, (one of them is supposed to be a proof it exists) and was religious (even supported the church IIRC).

=&gt; https://en.wikipedia.org/wiki/Descartes Descartes
=&gt; https://en.wikipedia.org/wiki/Churro Churro
=&gt; https://en.wikipedia.org/wiki/Fartura_(food) Fartura
=&gt; https://en.wikipedia.org/wiki/Consistent Consistent
=&gt; https://en.wikipedia.org/wiki/Contradiction Contradiction
=&gt; https://en.wikipedia.org/wiki/Proposition Proposition
=&gt; ../books/list.gmi Books list
  </content>
  <content type="text/html">

&lt;h1&gt;Flexibility &amp;amp; Relations&lt;/h1&gt;
&lt;p&gt;@siiky
2022/06/07
2022/07/28&lt;/p&gt;
&lt;p&gt;I recently wrote about how flexibility may be beneficial in your course of life.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../philosophy/flexibility-life.gmi&quot;&gt;Flexibility &amp;amp; Life&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I&#39;ve thought some times in the past how after I present myself in some way, I can no longer present myself some other (conflicting) way in the future to the same person(s). At least not with some friction.&lt;/p&gt;
&lt;p&gt;In this post I&#39;d like to write about that, yet another aspect of life where flexibility can be useful (and possibly a hindrance!): human relations.&lt;/p&gt;
&lt;p&gt;I first came across a similar idea (maybe when I first thought about this, in fact) reading one of Descartes&#39; books -- either &amp;quot;Discourse on the Method&amp;quot; or &amp;quot;Selections from the Principles of Philosophy&amp;quot;, I can&#39;t remember. In that book he wrote that there were works he didn&#39;t want to publish during his lifetime.¹ &amp;quot;Wut? why?&amp;quot; He explains that his works were often controversial due to the nature of their content -- religion and God were particularly controversial² -- and by not publishing them he could continue with his life and work without any impediments (read: being imprisoned and/or killed).&lt;/p&gt;
&lt;p&gt;If you tell a friend one day that you like a nice and hot churro (or fartura, the inferior alternative), you can&#39;t then tell them the next day that you don&#39;t like it, right? It doesn&#39;t make sense! It can look like you lied or are lying now.&lt;/p&gt;
&lt;p&gt;Think of knowledge as a (consistent i.e. non-contradictory) set of propositions. From this point of view, acquiring knowledge is performing the set-union of the current propositions with the new. If a person knows that you like churros (P), and learns later that you /don&#39;t/ like churros (¬P), their knowledge becomes inconsistent: { P, ¬P } is inconsistent, because (P ∧ ¬P) is a contradiction!&lt;/p&gt;
&lt;p&gt;Of course, people can change their opinions, tastes, and whatnot but it&#39;s a slow process, slow enough not to be flexible, the point of this post and the previous one.&lt;/p&gt;
&lt;p&gt;&amp;quot;So what&#39;s it mean?&amp;quot; If you&#39;re of an opinion now that (you think) you&#39;re likely to change in the future, then... maybe you&#39;re better off not sharing it with others right now?&lt;/p&gt;
&lt;p&gt;Because, if you change opinion in the future, it&#39;ll take time for people to adjust their knowledge set to your newly changed opinion; people will judge you hard if said opinion is controversial or doesn&#39;t go down their throats well; and, if you change opinion in the future, whatever negative side-effects came of your sharing it were most likely a net loss -- waste of time and energy, at best.&lt;/p&gt;
&lt;p&gt;There&#39;s a caveat, though. I&#39;m here advocating that it may be a good idea to refrain from sharing details about yourself with other people, and I don&#39;t make any distinctions between close or not. But if you do it too much, especially with a close relation, the other person won&#39;t know that much about you, which may mean the relation isn&#39;t that great, and it may end because of it.&lt;/p&gt;
&lt;p&gt;And a possible alternative to the all-or-nothing: very clearly stating that this opinion of yours is something prone to change, something you are thinking of/working on right now, but are not quite sure about just yet.&lt;/p&gt;
&lt;p&gt;I think this might be kinda hard to pull off. People may think you&#39;re saying that just as an escape route in case shit hits the fan, for example. But I couldn&#39;t possibly guess all the weird ways people might think, the same way I couldn&#39;t possibly guess all the ways shit might hit the fan.&lt;/p&gt;
&lt;p&gt;Just another tool in the toolbox... Maybe. Or not. ¯_&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt;
&lt;p&gt;¹ There are cons to this, such as not discussing with as many people, but he was a pretty good thinker -- he had a strict method for reasoning, which was the subject of one of the two books (probably &amp;quot;Discourse on the Method&amp;quot; judging by the title). On top of that (IIRC) he had a few close relations with whom to discuss the more controversial topics.&lt;/p&gt;
&lt;p&gt;² Not that they somehow went against the state of affairs of the time. He believed in God, (one of them is supposed to be a proof it exists) and was religious (even supported the church IIRC).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Descartes&quot;&gt;Descartes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Churro&quot;&gt;Churro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fartura_(food)&quot;&gt;Fartura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Consistent&quot;&gt;Consistent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Contradiction&quot;&gt;Contradiction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Proposition&quot;&gt;Proposition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../books/list.gmi&quot;&gt;Books list&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/philosophy/flexibility-life.gmi</id>
  <title type="text">Flexibility &amp; Life</title>
  <updated>2022-07-28T00:00:00Z</updated>
  <published>2022-06-01T00:00:00Z</published>
  <link href="https://siiky.srht.site/philosophy/flexibility-life.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/philosophy/flexibility-life.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Flexibility &amp; Life
@siiky
2022/06/01
2022/07/28

To be able to withstand the punches life throws at you, being flexible is helpful, methinks. It allows you to focus on what matters to you, overlook what doesn&#39;t, and dodge them punches like a pro. Not only that, but you can more easily experiment with things and try to find what works best. &quot;If you don&#39;t have the room to fail, you only have the room to remain&quot; (if it almost rhymes it&#39;s true, amirite?)

=&gt; ../psychology/fagots.gmi Fagots

Let me try to explain what I mean.


From my very limitted knowledge of Chinese philosophy and martial arts philosophy, before anything else, what you need most is flexibility (DISCLAIMER: I&#39;m neither student nor practitioner).

From the Tao Te Ching, the main takeway I got is that you&#39;ll have a hard time if you go against nature -- certainly harder than if you go along it. If you&#39;re lucky (or maybe strong enough?) that&#39;s all it will be, harder; more likely, however, you&#39;ll simply lose.

Thus, from my (very likely wrong and/or incomplete) understanding, the Tao is to go with nature, accept nature, go with the flow, accept things as they are and that they&#39;re rarely as you&#39;d prefer them to be, that what happens through your course of life will happen whether you like it or not, and that often you have no say in it -- what will be, will be (this isn&#39;t some &quot;fate&quot; BS or hard determinism, though it may sound like it the way I put it; more at the end).

A similar idea exists in Tai Chi boxing, where you don&#39;t fight your oponent with force, but by trying to deflect their attacks, using their nature against them.

And what better way is there to &quot;go with the flow&quot; than by being flexible in your moves and in your mind?


More practically (but not necessarily by the Tao) I think of it as avoiding unnecessary (unnatural) imposed limits or goals; or as distilling what I really enjoy from what I don&#39;t (as much). So that I may focus on what matters to me most without getting overly lost on &quot;trivialities&quot;.

For example, some decades ago someone declared that &quot;one must eat every 3h~4h and must not go many hours without eating&quot; (I can&#39;t remember who nor why; have to research). Similarly, someone once declared that &quot;breakfast is the most important meal of the day and therefore must also be the heaviest/fullest&quot; (this one I do remember: Kellogg&#39;s and some bacon company). I purposefully say &quot;declared&quot; because this wasn&#39;t the result of a scientific study or some other method.

Saying a bunch of bullshit nobody pays heed to is quite alright -- no harm done, right? The problem is that these &quot;truths&quot; are actually accepted as truths in (at least some of) today&#39;s western society!

Let&#39;s imagine some scenarios:

* (1) You feel hungry, but you don&#39;t eat (let&#39;s say because you can&#39;t)
* (2) You don&#39;t feel hungry, and you don&#39;t eat (no matter why)
* (3) You don&#39;t feel hungry, but you eat anyway

I&#39;m not talking here about people that starve. I&#39;m assuming you&#39;re skipping only one, maybe two meals at most. Actually starving is serious, and I&#39;m not trying in any way to downplay its seriousness!

If you don&#39;t believe in any of the declared crap, all&#39;s fine, you just go on with your day, in any of the 3 scenarios. But what if you do believe it?

In (1) and (2), what&#39;s actually worse for your health: the fact that you haven&#39;t eaten, or that you&#39;re stressing because you believe it&#39;s bad you haven&#39;t eaten (whether you feel hungry or not)?

In (1), what&#39;s worse: the fact that you haven&#39;t eaten, or that you&#39;re stressing because you feel hungry?

In (3) whatever food you have is arguably unnecessary -- your body didn&#39;t feel it necessary, at least. It may simply be extra food to make you fatter.

And particulars matter, of course. If you do hard physical work, skipping a meal may be enough to have you pass out after a while. But many people nowadays don&#39;t. And many (me included) eat tons of food. Food that they don&#39;t need. For them, skipping a meal or even two, as long as they don&#39;t feel ill/weak because of it, is very likely OK.


This deviated a bit... To get back on track: in these scenarios, is the food what really matters? This is possibly the most important question. I argue that it isn&#39;t: you can survive the scenarios after all, and easily at that! On top of it, there&#39;s nothing you can do right now to improve the situation.

So what do you think the better use of your energy is: worrying about something you can easily survive, or worrying about or enjoying something else that matters to you, something you like, something you want?

I also realize that it may not feel easy, especially when you&#39;re feeling hungry; and that worrying more &quot;productively&quot; may not come naturally to you -- the opposite may be the case. But it is possible to train yourself. It is possible to condition yourself, distract yourself from that (easily survivable) unpleasant feeling. We weren&#39;t raised up thus. In western society we learn that splurging is the way. And so we do. Then it feels uneasy when we can&#39;t, like it shouldn&#39;t be possible. We simply haven&#39;t learned how to deal with it.


To try to examplify how being free of these self-restrains gives you the needed freedom to experiment, I&#39;ll go with food again (I don&#39;t know why, it&#39;s just what&#39;s popping into my head).

If you go travelling, you should try to enjoy the place as much as possible while you&#39;re still there -- this should be obvious?

Let&#39;s say that you plan a walk at this place that may be completely unknown to you. You found some guides or whatever, you decided to go here and there, and you marked possible food stops (like restaurants or cafes).

Alas! The guides were outdated and the food places are closed! Quick! What do you do?

Should have been easy if you read it all thus far: ¯\__(ツ)_/¯ go with it, no big deal, it&#39;s not a showstopper! Carry on with your plan, visit what other places you planned to visit. Enjoy them as much as you would weren&#39;t the food places closed. After the walk you can be sure you&#39;ll enjoy the food even more.

The alternatives I can think of are, to continue with the rest of the plan but be stuck with &quot;oh no, I have no food!&quot;, thus not enjoying the walk; or to abort the rest of the plan to go for food instead. Shit alternatives if you ask me...


This is getting long enough, but finally: no, the Tao isn&#39;t an excuse to sit back and watch the time go by, and indeed, I&#39;m in favor of the opposite. So why do I think it&#39;s, as I described it at the top, not just some &quot;fate&quot; BS or hard determinism?

Because it isn&#39;t about what&#39;s gonna happen in the future. In no way does the Tao say that nature is the determining force of the future; or that if you do this thing that thing will happen. Only that things have an innate nature, a pre-disposition, a way of behaving and acting that feels right, if you will, for both animate and inanimate entities; and that you should try to learn of that way, both yours and your environment&#39;s, and how best they can coexist and/or cooperate.

The best practical example I can think of is physics. It certainly is easier to let gravity do its thing than to go against it -- ever tried jumping and remaining in the air? Not that easy, right? But if you don&#39;t go against it, ever, you&#39;ll go nowhere. On the flip side of the coin, if you feel so strongly against it that you can only brood over it, you&#39;ll also go nowhere, it&#39;ll be miserable. Thus, the way (Tao means &quot;way&quot; or &quot;path&quot;, by the way) is through the middle ground, where you and your surroundings can meet.

Little side-note: in my view, this is one of the ideas that lead me to believe the best way of life is the one that ruffles leaves the least (in number and ruffled-ness). With regards to the planet specifically, I think that we should be striving to the best of our abilities not to screw it.


And that&#39;s that. I spent a good workday of time on this, totally worth it! Feels like I beat a dead horse a bit, though... :/


=&gt; https://en.wikipedia.org/wiki/Chinese_philosophy Chinese Philosophy
=&gt; https://en.wikipedia.org/wiki/Chinese_martial_arts Chinese Martial Arts
=&gt; https://en.wikipedia.org/wiki/Tao_Te_Ching Tao Te Ching
=&gt; https://en.wikipedia.org/wiki/Tao Tao
=&gt; https://en.wikipedia.org/wiki/Fate Fate
=&gt; https://en.wikipedia.org/wiki/Hard_determinism Hard Determinism
=&gt; https://en.wikipedia.org/wiki/Tai_chi Tai Chi
=&gt; https://www.theguardian.com/lifeandstyle/2016/nov/28/breakfast-health-america-kellog-food-lifestyle Breakfast (Kellogg&#39;s and some bacon company)
=&gt; ../books/list.gmi Books list
  </content>
  <content type="text/html">

&lt;h1&gt;Flexibility &amp;amp; Life&lt;/h1&gt;
&lt;p&gt;@siiky
2022/06/01
2022/07/28&lt;/p&gt;
&lt;p&gt;To be able to withstand the punches life throws at you, being flexible is helpful, methinks. It allows you to focus on what matters to you, overlook what doesn&#39;t, and dodge them punches like a pro. Not only that, but you can more easily experiment with things and try to find what works best. &amp;quot;If you don&#39;t have the room to fail, you only have the room to remain&amp;quot; (if it almost rhymes it&#39;s true, amirite?)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../psychology/fagots.gmi&quot;&gt;Fagots&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Let me try to explain what I mean.&lt;/p&gt;
&lt;p&gt;From my very limitted knowledge of Chinese philosophy and martial arts philosophy, before anything else, what you need most is flexibility (DISCLAIMER: I&#39;m neither student nor practitioner).&lt;/p&gt;
&lt;p&gt;From the Tao Te Ching, the main takeway I got is that you&#39;ll have a hard time if you go against nature -- certainly harder than if you go along it. If you&#39;re lucky (or maybe strong enough?) that&#39;s all it will be, harder; more likely, however, you&#39;ll simply lose.&lt;/p&gt;
&lt;p&gt;Thus, from my (very likely wrong and/or incomplete) understanding, the Tao is to go with nature, accept nature, go with the flow, accept things as they are and that they&#39;re rarely as you&#39;d prefer them to be, that what happens through your course of life will happen whether you like it or not, and that often you have no say in it -- what will be, will be (this isn&#39;t some &amp;quot;fate&amp;quot; BS or hard determinism, though it may sound like it the way I put it; more at the end).&lt;/p&gt;
&lt;p&gt;A similar idea exists in Tai Chi boxing, where you don&#39;t fight your oponent with force, but by trying to deflect their attacks, using their nature against them.&lt;/p&gt;
&lt;p&gt;And what better way is there to &amp;quot;go with the flow&amp;quot; than by being flexible in your moves and in your mind?&lt;/p&gt;
&lt;p&gt;More practically (but not necessarily by the Tao) I think of it as avoiding unnecessary (unnatural) imposed limits or goals; or as distilling what I really enjoy from what I don&#39;t (as much). So that I may focus on what matters to me most without getting overly lost on &amp;quot;trivialities&amp;quot;.&lt;/p&gt;
&lt;p&gt;For example, some decades ago someone declared that &amp;quot;one must eat every 3h~4h and must not go many hours without eating&amp;quot; (I can&#39;t remember who nor why; have to research). Similarly, someone once declared that &amp;quot;breakfast is the most important meal of the day and therefore must also be the heaviest/fullest&amp;quot; (this one I do remember: Kellogg&#39;s and some bacon company). I purposefully say &amp;quot;declared&amp;quot; because this wasn&#39;t the result of a scientific study or some other method.&lt;/p&gt;
&lt;p&gt;Saying a bunch of bullshit nobody pays heed to is quite alright -- no harm done, right? The problem is that these &amp;quot;truths&amp;quot; are actually accepted as truths in (at least some of) today&#39;s western society!&lt;/p&gt;
&lt;p&gt;Let&#39;s imagine some scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) You feel hungry, but you don&#39;t eat (let&#39;s say because you can&#39;t)&lt;/li&gt;
&lt;li&gt;(2) You don&#39;t feel hungry, and you don&#39;t eat (no matter why)&lt;/li&gt;
&lt;li&gt;(3) You don&#39;t feel hungry, but you eat anyway&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I&#39;m not talking here about people that starve. I&#39;m assuming you&#39;re skipping only one, maybe two meals at most. Actually starving is serious, and I&#39;m not trying in any way to downplay its seriousness!&lt;/p&gt;
&lt;p&gt;If you don&#39;t believe in any of the declared crap, all&#39;s fine, you just go on with your day, in any of the 3 scenarios. But what if you do believe it?&lt;/p&gt;
&lt;p&gt;In (1) and (2), what&#39;s actually worse for your health: the fact that you haven&#39;t eaten, or that you&#39;re stressing because you believe it&#39;s bad you haven&#39;t eaten (whether you feel hungry or not)?&lt;/p&gt;
&lt;p&gt;In (1), what&#39;s worse: the fact that you haven&#39;t eaten, or that you&#39;re stressing because you feel hungry?&lt;/p&gt;
&lt;p&gt;In (3) whatever food you have is arguably unnecessary -- your body didn&#39;t feel it necessary, at least. It may simply be extra food to make you fatter.&lt;/p&gt;
&lt;p&gt;And particulars matter, of course. If you do hard physical work, skipping a meal may be enough to have you pass out after a while. But many people nowadays don&#39;t. And many (me included) eat tons of food. Food that they don&#39;t need. For them, skipping a meal or even two, as long as they don&#39;t feel ill/weak because of it, is very likely OK.&lt;/p&gt;
&lt;p&gt;This deviated a bit... To get back on track: in these scenarios, is the food what really matters? This is possibly the most important question. I argue that it isn&#39;t: you can survive the scenarios after all, and easily at that! On top of it, there&#39;s nothing you can do right now to improve the situation.&lt;/p&gt;
&lt;p&gt;So what do you think the better use of your energy is: worrying about something you can easily survive, or worrying about or enjoying something else that matters to you, something you like, something you want?&lt;/p&gt;
&lt;p&gt;I also realize that it may not feel easy, especially when you&#39;re feeling hungry; and that worrying more &amp;quot;productively&amp;quot; may not come naturally to you -- the opposite may be the case. But it is possible to train yourself. It is possible to condition yourself, distract yourself from that (easily survivable) unpleasant feeling. We weren&#39;t raised up thus. In western society we learn that splurging is the way. And so we do. Then it feels uneasy when we can&#39;t, like it shouldn&#39;t be possible. We simply haven&#39;t learned how to deal with it.&lt;/p&gt;
&lt;p&gt;To try to examplify how being free of these self-restrains gives you the needed freedom to experiment, I&#39;ll go with food again (I don&#39;t know why, it&#39;s just what&#39;s popping into my head).&lt;/p&gt;
&lt;p&gt;If you go travelling, you should try to enjoy the place as much as possible while you&#39;re still there -- this should be obvious?&lt;/p&gt;
&lt;p&gt;Let&#39;s say that you plan a walk at this place that may be completely unknown to you. You found some guides or whatever, you decided to go here and there, and you marked possible food stops (like restaurants or cafes).&lt;/p&gt;
&lt;p&gt;Alas! The guides were outdated and the food places are closed! Quick! What do you do?&lt;/p&gt;
&lt;p&gt;Should have been easy if you read it all thus far: ¯_&lt;em&gt;(ツ)&lt;/em&gt;/¯ go with it, no big deal, it&#39;s not a showstopper! Carry on with your plan, visit what other places you planned to visit. Enjoy them as much as you would weren&#39;t the food places closed. After the walk you can be sure you&#39;ll enjoy the food even more.&lt;/p&gt;
&lt;p&gt;The alternatives I can think of are, to continue with the rest of the plan but be stuck with &amp;quot;oh no, I have no food!&amp;quot;, thus not enjoying the walk; or to abort the rest of the plan to go for food instead. Shit alternatives if you ask me...&lt;/p&gt;
&lt;p&gt;This is getting long enough, but finally: no, the Tao isn&#39;t an excuse to sit back and watch the time go by, and indeed, I&#39;m in favor of the opposite. So why do I think it&#39;s, as I described it at the top, not just some &amp;quot;fate&amp;quot; BS or hard determinism?&lt;/p&gt;
&lt;p&gt;Because it isn&#39;t about what&#39;s gonna happen in the future. In no way does the Tao say that nature is the determining force of the future; or that if you do this thing that thing will happen. Only that things have an innate nature, a pre-disposition, a way of behaving and acting that feels right, if you will, for both animate and inanimate entities; and that you should try to learn of that way, both yours and your environment&#39;s, and how best they can coexist and/or cooperate.&lt;/p&gt;
&lt;p&gt;The best practical example I can think of is physics. It certainly is easier to let gravity do its thing than to go against it -- ever tried jumping and remaining in the air? Not that easy, right? But if you don&#39;t go against it, ever, you&#39;ll go nowhere. On the flip side of the coin, if you feel so strongly against it that you can only brood over it, you&#39;ll also go nowhere, it&#39;ll be miserable. Thus, the way (Tao means &amp;quot;way&amp;quot; or &amp;quot;path&amp;quot;, by the way) is through the middle ground, where you and your surroundings can meet.&lt;/p&gt;
&lt;p&gt;Little side-note: in my view, this is one of the ideas that lead me to believe the best way of life is the one that ruffles leaves the least (in number and ruffled-ness). With regards to the planet specifically, I think that we should be striving to the best of our abilities not to screw it.&lt;/p&gt;
&lt;p&gt;And that&#39;s that. I spent a good workday of time on this, totally worth it! Feels like I beat a dead horse a bit, though... :/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chinese_philosophy&quot;&gt;Chinese Philosophy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chinese_martial_arts&quot;&gt;Chinese Martial Arts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tao_Te_Ching&quot;&gt;Tao Te Ching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tao&quot;&gt;Tao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fate&quot;&gt;Fate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hard_determinism&quot;&gt;Hard Determinism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tai_chi&quot;&gt;Tai Chi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/lifeandstyle/2016/nov/28/breakfast-health-america-kellog-food-lifestyle&quot;&gt;Breakfast (Kellogg&#39;s and some bacon company)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../books/list.gmi&quot;&gt;Books list&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/psychology/fagots.gmi</id>
  <title type="text">Fagots</title>
  <updated>2022-07-28T00:00:00Z</updated>
  <published>2022-05-05T00:00:00Z</published>
  <link href="https://siiky.srht.site/psychology/fagots.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/psychology/fagots.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Fagots
@siiky
2022/05/05
2022/07/28

After some recent events in my personal life 乱 (Ran) came to mind: what if our &quot;mental strength&quot;, or ability to withstand stress, is like a fagot of arrows?

=&gt; https://en.wikipedia.org/wiki/Ran_(film) 乱 (Wikipedia)
=&gt; https://www.merriam-webster.com/dictionary/fagot Fagot (Merriam-Webster)

I think the analogy works well enough.

DISCLAIMER: I haven&#39;t the faintest fucking clue what I&#39;m talking about. All that I &quot;know&quot; about psychology is from Psych 101 by Paul Kleinman (maybe others meanwhile, check my book list), random Wikipedia pages, and a few random posts here and there (check my psychology links). I just had this thought after the already mentioned events and decided meditate on it.

=&gt; ../books/list.gmi Books list
=&gt; links.gmi Psychology links

## The Analogy

One arrow corresponds to one &quot;unit&quot; of &quot;mental strength&quot;.

Greater number of arrows translates to increased ability to withstand stress, and vice versa: lesser number, decreased ability.

Repeated or continuous stress on the fagot eventually results in breakdown, assuming that the stress actually strains at least some of the arrows.

And rest, that is, lack of stress or strain, has some sort of &quot;healing&quot; effect. Immediatly after you&#39;ve gone through some stressful event you&#39;re more likely to breakdown with another stressful event. However, give it some time and the second event is more maneageable. This is possibly the case that translates worse. If an arrow starts to crack it won&#39;t magically uncrack. But maybe that&#39;s the wrong scale to think about -- arrows can be very flexible, so they can withstand a lot of stress in a very short interval with no damage (their &quot;stress capacity&quot; depletes as fast as it regenerates). On the other hand, if they are cracked, they have to be replaced -- like sharks replace their teeth? Or maybe the analogy plays perfectly right, and there&#39;s no way to fix a broken fagot... shit, fingers crossed!

And lastly: two fagots are indistinguishable if not under stress. 20 arrows suspended in the air, or simply resting in your hands, don&#39;t break by themselves -- you have a literal emergency in your hands if they do. But the same is true for one single arrow, it will comfortably withstand the atmospheric pressure. However, try to bend them or hang something at the tip, and the difference will be noticeable. This means that unless you&#39;re under stress you can&#39;t know how much stress you can really handle. And also that you can&#39;t compare two different people in terms of their &quot;mental strength&quot; without putting them under stress.

## Fagots Fagot

Now, how does this fit into the mind of some person?

The way I see it, there isn&#39;t one single fagot to take it all. It seems more natural to me that there are several fagots, each with a different &quot;purpose&quot;, or for a different kind of aspect of life or relationship.

Why I think that&#39;s the case: if I have a shit day at work, I won&#39;t feel stressed with University because of it, or vice versa. Another example, probably more obviously: if I have a fight with someone, let&#39;s say a really ugly one, I won&#39;t feel stressed/angry when talking with someone else because of it; nor will I feel any ill will towards that someone else. SG(e)TM (Sounds Good enough To Me)!

So there&#39;s at least some fagot of fagots. Maybe it&#39;s really an hierarchy: there&#39;s the main fagot, composed of the society/work fagot, the learning/University fagot, the personal life fagot, the general life fagot, ...

The society/work fagot may be split into the &quot;social status&quot; fagot, money fagot, career fagot (maybe tied to &quot;social status&quot;), ...

The learning/University fagot may be split into the self-learning fagot (the shit you like/want to learn), the research fagot (the shit the scientific community thinks is dope), the grades fagot (the shit grades you get at classes), ...

The personal life fagot may be split into a fagot for each relationship with a person, including the self-fagot.

## Main Fagot Breakdown

There&#39;s just this something I still can&#39;t explain, and that doesn&#39;t seem to translate well through the &quot;Fagot Hierarchy Theory&quot; I described above: what would bring one to the point of suicide?

From the theory it seems that suicide shouldn&#39;t even be considered unless the main fagot breaks -- all the fagots under it break? But I don&#39;t think that one would bring oneself to this point because of just one fagot either.

So what&#39;s it take?

## How One Fagot Affects Another

Could it be that different fagots have different strengths/capacities? Such that, for example, the main fagot&#39;s main source of strength comes from, let&#39;s say, the work fagot. In this case, if the work fagot goes to shit, the littlest strain on the other fagots could be enough to break them, and thus break the main fagot as well.

Almost as if the strain &quot;leaked&quot; from one fagot to the other.

## How Better Fagots Become

How fagots get weakened it&#39;s already been discussed. But how do we get to withstand higher levels of strain with time? Dunno...

Do we really become stronger and capable of taking more stress, or do we become &quot;numb&quot; and stop feeling that we&#39;re under stress?

If the latter, is it really that we can take more stress? Maybe it&#39;s like sleep and caffeine? In that we think we&#39;re fine until we start to really feel the effects of the lack of sleep.
  </content>
  <content type="text/html">

&lt;h1&gt;Fagots&lt;/h1&gt;
&lt;p&gt;@siiky
2022/05/05
2022/07/28&lt;/p&gt;
&lt;p&gt;After some recent events in my personal life 乱 (Ran) came to mind: what if our &amp;quot;mental strength&amp;quot;, or ability to withstand stress, is like a fagot of arrows?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ran_(film)&quot;&gt;乱 (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.merriam-webster.com/dictionary/fagot&quot;&gt;Fagot (Merriam-Webster)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I think the analogy works well enough.&lt;/p&gt;
&lt;p&gt;DISCLAIMER: I haven&#39;t the faintest fucking clue what I&#39;m talking about. All that I &amp;quot;know&amp;quot; about psychology is from Psych 101 by Paul Kleinman (maybe others meanwhile, check my book list), random Wikipedia pages, and a few random posts here and there (check my psychology links). I just had this thought after the already mentioned events and decided meditate on it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../books/list.gmi&quot;&gt;Books list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;links.gmi&quot;&gt;Psychology links&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;The Analogy&lt;/h2&gt;
&lt;p&gt;One arrow corresponds to one &amp;quot;unit&amp;quot; of &amp;quot;mental strength&amp;quot;.&lt;/p&gt;
&lt;p&gt;Greater number of arrows translates to increased ability to withstand stress, and vice versa: lesser number, decreased ability.&lt;/p&gt;
&lt;p&gt;Repeated or continuous stress on the fagot eventually results in breakdown, assuming that the stress actually strains at least some of the arrows.&lt;/p&gt;
&lt;p&gt;And rest, that is, lack of stress or strain, has some sort of &amp;quot;healing&amp;quot; effect. Immediatly after you&#39;ve gone through some stressful event you&#39;re more likely to breakdown with another stressful event. However, give it some time and the second event is more maneageable. This is possibly the case that translates worse. If an arrow starts to crack it won&#39;t magically uncrack. But maybe that&#39;s the wrong scale to think about -- arrows can be very flexible, so they can withstand a lot of stress in a very short interval with no damage (their &amp;quot;stress capacity&amp;quot; depletes as fast as it regenerates). On the other hand, if they are cracked, they have to be replaced -- like sharks replace their teeth? Or maybe the analogy plays perfectly right, and there&#39;s no way to fix a broken fagot... shit, fingers crossed!&lt;/p&gt;
&lt;p&gt;And lastly: two fagots are indistinguishable if not under stress. 20 arrows suspended in the air, or simply resting in your hands, don&#39;t break by themselves -- you have a literal emergency in your hands if they do. But the same is true for one single arrow, it will comfortably withstand the atmospheric pressure. However, try to bend them or hang something at the tip, and the difference will be noticeable. This means that unless you&#39;re under stress you can&#39;t know how much stress you can really handle. And also that you can&#39;t compare two different people in terms of their &amp;quot;mental strength&amp;quot; without putting them under stress.&lt;/p&gt;
&lt;h2&gt;Fagots Fagot&lt;/h2&gt;
&lt;p&gt;Now, how does this fit into the mind of some person?&lt;/p&gt;
&lt;p&gt;The way I see it, there isn&#39;t one single fagot to take it all. It seems more natural to me that there are several fagots, each with a different &amp;quot;purpose&amp;quot;, or for a different kind of aspect of life or relationship.&lt;/p&gt;
&lt;p&gt;Why I think that&#39;s the case: if I have a shit day at work, I won&#39;t feel stressed with University because of it, or vice versa. Another example, probably more obviously: if I have a fight with someone, let&#39;s say a really ugly one, I won&#39;t feel stressed/angry when talking with someone else because of it; nor will I feel any ill will towards that someone else. SG(e)TM (Sounds Good enough To Me)!&lt;/p&gt;
&lt;p&gt;So there&#39;s at least some fagot of fagots. Maybe it&#39;s really an hierarchy: there&#39;s the main fagot, composed of the society/work fagot, the learning/University fagot, the personal life fagot, the general life fagot, ...&lt;/p&gt;
&lt;p&gt;The society/work fagot may be split into the &amp;quot;social status&amp;quot; fagot, money fagot, career fagot (maybe tied to &amp;quot;social status&amp;quot;), ...&lt;/p&gt;
&lt;p&gt;The learning/University fagot may be split into the self-learning fagot (the shit you like/want to learn), the research fagot (the shit the scientific community thinks is dope), the grades fagot (the shit grades you get at classes), ...&lt;/p&gt;
&lt;p&gt;The personal life fagot may be split into a fagot for each relationship with a person, including the self-fagot.&lt;/p&gt;
&lt;h2&gt;Main Fagot Breakdown&lt;/h2&gt;
&lt;p&gt;There&#39;s just this something I still can&#39;t explain, and that doesn&#39;t seem to translate well through the &amp;quot;Fagot Hierarchy Theory&amp;quot; I described above: what would bring one to the point of suicide?&lt;/p&gt;
&lt;p&gt;From the theory it seems that suicide shouldn&#39;t even be considered unless the main fagot breaks -- all the fagots under it break? But I don&#39;t think that one would bring oneself to this point because of just one fagot either.&lt;/p&gt;
&lt;p&gt;So what&#39;s it take?&lt;/p&gt;
&lt;h2&gt;How One Fagot Affects Another&lt;/h2&gt;
&lt;p&gt;Could it be that different fagots have different strengths/capacities? Such that, for example, the main fagot&#39;s main source of strength comes from, let&#39;s say, the work fagot. In this case, if the work fagot goes to shit, the littlest strain on the other fagots could be enough to break them, and thus break the main fagot as well.&lt;/p&gt;
&lt;p&gt;Almost as if the strain &amp;quot;leaked&amp;quot; from one fagot to the other.&lt;/p&gt;
&lt;h2&gt;How Better Fagots Become&lt;/h2&gt;
&lt;p&gt;How fagots get weakened it&#39;s already been discussed. But how do we get to withstand higher levels of strain with time? Dunno...&lt;/p&gt;
&lt;p&gt;Do we really become stronger and capable of taking more stress, or do we become &amp;quot;numb&amp;quot; and stop feeling that we&#39;re under stress?&lt;/p&gt;
&lt;p&gt;If the latter, is it really that we can take more stress? Maybe it&#39;s like sleep and caffeine? In that we think we&#39;re fine until we start to really feel the effects of the lack of sleep.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/books/bill_gates.how_to_avoid_a_climate_disaster.gmi</id>
  <title type="text">Bill Gates, &quot;How to Avoid a Climate Disaster&quot;</title>
  <updated>2022-07-28T00:00:00Z</updated>
  <published>2022-04-09T00:00:00Z</published>
  <link href="https://siiky.srht.site/books/bill_gates.how_to_avoid_a_climate_disaster.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/books/bill_gates.how_to_avoid_a_climate_disaster.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Bill Gates, &quot;How to Avoid a Climate Disaster&quot;
@siiky
2022/04/09
2022/07/28

Finished reading this book recently (ISBN 978-0-241-44830-4) and in this post I want to share my opinions/critique, and try to compile all the notes I took while and after reading.

=&gt; list.gmi Books list
=&gt; https://en.wikipedia.org/wiki/How_to_Avoid_a_Climate_Disaster Wikipedia

I&#39;ll put down page numbers in this post. If you have the same edition, cool, if not: the &quot;Introduction&quot; starts on p3, and &quot;Climate Change and COVID-19&quot; ends on p230. Hopefully that will help getting around. For figures and tables you can try the &quot;Notes&quot; where you can find the sources and corresponding page.

Because Gemtext is so limitted, here are some notes to disambiguate formating: titles of things will be surrounded by quotes &quot;Like This&quot;. ALL CAPS mean either italics or bold. Page numbers will be shown as p123, figures and tables as &quot;fig p123&quot; and &quot;tbl p123&quot; respectively, and sources as &quot;src&quot;. Tables will be formatted in code blocks, and will additionally have their page and souce in the block&#39;s alt text. The page numbers of other things (quotes, figures, &amp;c) will always come afterwards, never before. Likewise, comments about quotes/figures/tables/&amp;c should in general come afterwards, not before.

# Overview

Here are some of my thoughts on the book in general, or the things I got out of it. Maybe you won&#39;t agree with them, but that&#39;s life (insert Frank Sinatra reference here).

## Tone

First off, this is kinda personal preference, what makes me tick or makes me cringe, but I didn&#39;t like the overall tone and his unquestionably stating that &quot;progress&quot; is good.

My impression, from reading this book alone, is that he REALLY believes that the incresing consumerism of resources -- be they electricity, water, minerals/metals, &amp;c -- is a good thing, especially by &quot;the poor&quot;, as he puts it.

The exact thing that got us into this, he thinks should be liberally given to and used by &quot;the poor&quot;. So that they can wreck their own countries/land/habitat? Is this rational?

The acknowledgements chapter even has a huge list of people that supposedly contributed to the inception of the book in some way or another, including several researchers, professors, and renowned authors in the matter. Is it just me thinking about this? Or am I missing something that everyone else knows about?

It&#39;s almost funny after he mentioned David Foster Wallace&#39;s &quot;This Is Water&quot; (more later).

This is related to some of the themes discussed in &quot;Sex at Dawn&quot; from my point of view.

=&gt; https://en.wikipedia.org/wiki/Sex_at_Dawn Christopher Ryan, Cacilda Jethá, &quot;Sex at Dawn&quot;

## Pollution of &quot;greener&quot; alternatives

Throughout the whole book he continuously advocates for green energies (like solar and wind) and alternatives (like electric vehicles) but fails to mention even once the polution involved in their production, and the fact that the current products/methods are not recyclable (see &quot;The Dark Side of Green Energies&quot;). Other actually greener production methods may exists, even if not as efficient as the currently in use -- as an example, see &quot;How to Build a Low-tech Solar Panel?&quot;. But for some reason there&#39;s no interest in these other methods.

=&gt; https://en.wikipedia.org/wiki/Guillaume_Pitron &quot;The Dark Side of Green Energies&quot;
=&gt; https://solar.lowtechmagazine.com/2021/10/how-to-build-a-low-tech-solar-panel.html Low-Tech Magazine, &quot;How to Build a Low-tech Solar Panel?&quot; (solar powered site)
=&gt; https://www.lowtechmagazine.com/2021/10/how-to-build-a-low-tech-solar-panel.html Low-Tech Magazine, &quot;How to Build a Low-tech Solar Panel?&quot; (conventional always-on site)

## Green premium

Didn&#39;t know the &quot;green premium&quot; term -- the extra price paid for greener alternatives. (I was familiar with the concept of course, just not the term)

## Reflect cost in price

I like the idea of raising/lowering the price of something based on its environmental impact, thus better reflecting the true cost of something, and simultaneously discouraging &quot;bad&quot; alternatives over &quot;good&quot; alternatives.

The difficulty would be convincing people that this is a good thing. During the transition, the average Joe probably won&#39;t be interested in the fact the new thing is better for the environment but rather that what they&#39;re using currently became more expensive. In my view, this is of course irrational -- negative effects on the environment negatively affect everyone in the long run. But it&#39;s not something easy to convince someone of, and I for sure commit the same mistake occasionally.

The &quot;true cost&quot; of something is what snan calls &quot;externalities&quot;.

=&gt; gemini://idiomdrottning.org/externalities Idiomdrottning, &quot;Externalities&quot;

## Sources &amp; lack thereof

Some of his statements are not backed by any sources, you&#39;re supposed (I guess?) to just believe in his authority on the matter and go with it. Examples:

* money spent/saved over some period of time when comparing alternatives -- e.g. planting mangrove trees rather than not saves the world $80B/year;
* amount of energy provided per amount of energy consumed by produced chickens, pigs, and cows -- 1/2, 1/3, 1/6, respectively; don&#39;t even know if that&#39;s the meat alone, or if it includes eggs, milk, &amp;c;
* the amount of CO2 absorbed by a tree during its lifetime -- &quot;a good rule of thumb is 4 tons over the course 40 years.&quot;

At least graphs and the like usually have sources.

# Chapters

Didn&#39;t take notes on some of the chapters, so obviously those aren&#39;t here. But just because it may be of interest, here&#39;s the whole index:

* Introduction: 51 Billion to Zero
* 1. Why Zero?
* 2. This Will Be Hard
* 3. Five Questions to Ask in Every Climate Conversation
* 4. How We Plug In
* 5. How We Make Things
* 6. How We Grow Things
* 7. How We Get Around
* 8. How We Keep Cool and Stay Warm
* 9. Adapting to a Warmer World
* 10. Why Government Policies Matter
* 11. A Plan for Getting to Zero
* 12. What Each of Us Can Do
* Afterword: Climate Change and COVID-19

## 1. Why Zero?

We went from almost 0 (in 1850) to almost 40 billion (in 2018) tons of CO2 (emitted per year, I suppose). (fig p24) The figure includes also the rise of the average temperature over the years.

## 2. This Will Be Hard

From David Foster Wallace&#39;s speech &quot;This Is Water&quot; (p37-38):

&gt; There are these two young fish swimming along, and they happen to meet an older fish swimming the other way, who nods at them and says, &quot;Morning, boys, how&#39;s the water?&quot; And the two young fish swim on for a bit, and then eventually one of them looks over at the other and goes, &quot;What the hell is water?&quot;

David&#39;s explanation (p38):

&gt; The immediate point of the fish story is that the most obvious, ubiquitous, important realities are often the ones that are the hardest to see and talk about.

=&gt; https://en.wikipedia.org/wiki/This_Is_Water &quot;This Is Water&quot;
=&gt; https://en.wikipedia.org/wiki/David_Foster_Wallace David Foster Wallace

&gt; Many farmers still have to use ancient techniques, which is one of the reasons they&#39;re trapped in poverty. They deserve modern equipment and approaches, but right now using those tools means producing more greenhouse gases.

(fig p43) Why assume that WE are the superior ones and that THEY have to &quot;progress&quot;? Until 1850 (according to fig p24) we barely made a dent to the climate. How can you assume that &quot;progressing&quot; was a good thing? Even agriculture may have been a mistake (&quot;Sex at Dawn&quot;)!

## 3. Five Questions to Ask in Every Climate Conversation

```tbl p55; src: none
|-----------------------+------------+------------------------------------------------|
| Activity              | Percentage | Description                                    |
|-----------------------+------------+------------------------------------------------|
| Making things         |        31% | Producing materials (cement, metals, plastics) |
| Plugging in           |        27% | Producing electricity                          |
| Growing things        |        19% | For food (plants &amp; animals)                    |
| Getting around        |        16% | Cars, planes, ships, trains, trucks, ...       |
| Keeping warm and cool |         7% | Heating &amp; cooling, refrigeration               |
|-----------------------+------------+------------------------------------------------|
```

Human activities and their percentage of greenhouse gases emitted. He gives a definition of what goes where in a footnote:

&gt; These percentages represent global greenhouse gas emissions. When you&#39;re categorizing emissions from various sources, one of the questions you have to decide is how to count products that cause emissions both when you make them and when you use them. For example, we produce greenhouse gases when we refine oil into gasoline and again when we burn the gasoline. In this book, I&#39;ve included all the emissions from making things in &quot;How we make things&quot; and all the emissions from using them in their respective categories. So oil refining goes under &quot;How we make things,&quot; and burning gasoline is included in &quot;How we get around.&quot; The same goes for things like cars, planes, and ships. The steel that they&#39;re made of is counted under &quot;How we make things,&quot; and the emissions from the fuels they burn go under &quot;How we get around.&quot;

This (tbl p55) was possibly the most unexpected thing I learned from the book. I didn&#39;t expect at all for production of materials to be at the top and electricity next. Even more for food (mainly animals) being worse than transport. Just shows how well (un)informed I am (or was)...

```tbl p57; src: none
|------------------------+--------------|
| Place                  | Energy       |
|------------------------+--------------|
| world                  | 5k gigawatts |
| US                     | 1k gigawatts |
| mid-size city          | 1 gigawatt   |
| small town             | 1 megawatt   |
| average american house | 1 kilowatt   |
|------------------------+--------------|
```

&quot;How much power does it take?&quot; -- Gates&#39; cheatsheet on energy quantities.

&gt; Whenever you hear &quot;kilowatt&quot;, think &quot;house.&quot; &quot;Gigawatt&quot;, think &quot;city.&quot; A hundred or more gigawatts, think &quot;big country.&quot;

(p57)

```tbl p58; src: none
|----------------------+-----------|
| Energy source        |     W/m^2 |
|----------------------+-----------|
| Fossil fuels         | 500-10000 |
| Nuclear              |  500-1000 |
| Solar                |      5-20 |
| Hydropower           |      5-50 |
| Wind                 |       1-2 |
| Wood &amp; other biomass |        &lt;1 |
|----------------------+-----------|
```

&quot;How much power can we generate per square meter?&quot;. Has this note about solar:

&gt; The power density of solar could theoretically reach 100 W/m^2, though no one has accomplished this yet.

## 4. How We Plug In

Again suggesting it&#39;s a good thing to increase energy usage. (p74)

```tbl p85; src: U.S. Department of Energy
|-------------------+----------|
| Source            | Tons/TWh |
|-------------------+----------|
| Solar             |     16.4 |
| Hydropower        |     13.9 |
| Wind              |      9.9 |
| Geothermal        |      5.3 |
| Coal              |     1.39 |
| Nuclear (fission) |     0.99 |
| Natural gas       |     0.79 |
|-------------------+----------|
```

Histogram showing the amount of resources needed to build and run a power plant of different types, measured in tons of material per TWh, ordered from most to least material hungry. The numbers here are approximate, measured with a ruler.

```p87; src: Our World in Data
|-------------------+------------|
| Energy Source     | Deaths/TWh |
|-------------------+------------|
| Coal              |       24.6 |
| Oil               |       18.4 |
| Biomass           |        4.6 |
| Gas               |        2.8 |
| Nuclear (fission) |       0.07 |
|-------------------+------------|
```

Histogram showing number of deaths per unit of electricity generated. The numbers here are exact, each column had a label.

&gt; Imagine if everyone had gotten together one day and said, &quot;Hey, cars are killing people. They&#39;re dangerous. Let&#39;s stop driving and give up these automobiles.&quot;

Analogy with cars about how we stopped using and researching nuclear energy because of the past accidents. (p86)

It goes both ways too. We stopped using nuclear because of the accidents, but even though the other energy sources result in more deaths per unit of energy (tbl p85), we prefer using those.

Mentions TerraPower (p86). Some marketing words (mainly for me to read about later): traveling wave reactor, capable of running off of the waste of other reactors (that is, used up Uranium, Plutonium, &amp;c). (p87)

=&gt; https://en.wikipedia.org/wiki/TerraPower TerraPower
=&gt; https://en.wikipedia.org/wiki/Traveling_wave_reactor Traveling wave reactor


Direct Air Capture: taking CO2 right off the air. (p95) The alternative, which seems to be more practicable nowadays, is point carbon capture.

=&gt; https://en.wikipedia.org/wiki/Direct_air_capture Direct Air Capture (DAC)
=&gt; https://en.wikipedia.org/wiki/Carbon_capture_and_storage Point Carbon Capture

&gt; I used to scoff at the idea that using power more efficiently would make a dent in climate change. My rationale: If you have limited resources to reduce emitions (and we do), then you&#39;d get the biggest impact by moving to zero emissions rather than by spending a lot trying to reduce the demand for energy.

A comment about using less energy. (p95) Is it dumb or what? The following paragraph:

&gt; Anything that reduces the scale we need to reach is helpful.

(p96) Whouldathunkit! Finally he says something more sensible:

&gt; There&#39;s also a related approach called load shifting or demand shifting, which involves using power more consistently throughout the day.

(p96) This sounds like a VERY good idea, for the reason he states afterwards:

&gt; Right now, we tend to generate power when we use it -- for example, cranking up electric plants to run a city&#39;s light at night. With load shifting, though, we do the opposite: we use more electricity when it&#39;s cheapest to generate.

(p96) And he goes on giving some examples of changes of thinking and habits.

This relates to a habit that I have to break... I tend to stay up late and wake up late.

## 6. How We Grow Things

=&gt; https://en.wikipedia.org/wiki/Norman_Borlaug Normam Borlaug

Discoverer/inventor of &quot;super crops&quot;. (p115)

A grown chicken gives 1 calorie for every 2 calories that it consumes; a pig 1 for every 3 calories; cows 1 for every 6. That is, we get only 1/2, 1/3, and 1/6, respectively, of the energy &quot;we put in&quot; or &quot;invest&quot;. (p115; src: none)

Graph of the trend of meat consumption on some countries over the years, from 2000 to 2020, with predictions until 2028. (fig p116; src: OECD-FAO Agricultural Outlook 2020) In 2020, million tons of meat consumed (approximate numbers, measured with a ruler): Mexico, 9.6; Brazil, 19.2; EU, 40; USA, 42; China, 80.


After exposing how &quot;growing&quot; animals significantly contributes to global
warming and how greenhouse gases come to be from this practice, and of ways to
work around that or improve the situation (such as bioengineering animals to not
produce greenhouse gases), this comes along:

&gt; A hard-core vegan might propose another solution: /Instead of trying all these ways of reducing emissions, we should just stop raising livestock./ I can see the appeal of that argument, but I don&#39;t think it&#39;s realistic. For one thing, meat plays too important a role in human culture. In many parts of the world, even where it&#39;s scarce, eating meat is a crucial part of festivals and celebrations. In France, the gastronomic meal -- including started, meat or fish, cheese, and dessert -- is officially listed as part of the country&#39;s Intangible Cultural Heritage of Humanity. According to the listing on the UNESCO website, &quot;The gastronomic meal emphasizes togetherness, the pleasure of taste, and the balance between human beings and the products of nature&quot;

Gates on &quot;hard-core veganism&quot;. (p118-119)

WHAT THE FUCK?

1st WTF: &quot;hard-core vegan&quot;? I&#39;m pretty sure a vegan doesn&#39;t have to be hardcore to be of that opinion.

2nd WTF: &quot;Cultural Heritage&quot;? My brain goes &quot;computer says no&quot; with this... The culture we&#39;re leaving behind -- possibly literally -- is to destroy what made it possible to exist in the first place?

=&gt; https://en.wikipedia.org/wiki/Cultural_heritage Cultural Heritage
=&gt; https://en.wikipedia.org/wiki/Computer_says_no

3rd WTF: UNESCO? Aren&#39;t these the guys behind the SDGs (&quot;Sustainable Development Goals&quot;, quotes super apropes)?

The same guys that put &quot;Climate action&quot;, &quot;Life below water&quot;, and &quot;Life on land&quot; as ALMOST the least important goals (13, 14, and 15, respectively, out of 17 -- pic below)? So much for sustainable...

The same guys that put water (6) as less important than poverty (1), food (2), health &amp; well being (3), quality education (4), and gender equality (5)? Yes, everybody knows you all your thirsts with knowledge quench! And what not...

And what the hell are &quot;No poverty&quot; (1), &quot;Responsible consumption and production&quot; (12) and &quot;Partnerships for the goals&quot; (17), anyway? Couldn&#39;t they have been any vaguer?

(To be fair, I haven&#39;t read each of the goals&#39; descriptions yet)

=&gt; https://en.wikipedia.org/wiki/Unesco UNESCO
=&gt; https://en.wikipedia.org/wiki/Sustainable_Development_Goals SDGs
=&gt; https://en.wikipedia.org/wiki/List_of_Sustainable_Development_Goal_targets_and_indicators SDGs descriptions
=&gt; https://upload.wikimedia.org/wikipedia/commons/a/a7/Sustainable_Development_Goals.svg SDGs diagram

4th WTF: &quot;togetherness&quot;? You have to eat an animal (or animal product) to feel close to other people, like your friends and family? Reminds me of an episode of FlashForward where a listener/commenter(?) said &quot;a Sunday isn&#39;t a Sunday without my chicken wings&quot; or something of the sort. Ok, then... Maybe I&#39;m really so very abnormally undemanding, but I&#39;m good with a (literal) walk in the park.

=&gt; https://www.flashforwardpod.com/2016/08/10/episode-19-wheres-the-beef FlashForward, &quot;Where’s the Beef?&quot;

5th WTF: &quot;pleasure of taste&quot;? Hmmm... Let&#39;s see. How do you season your meat or fish? Salt (lit. some rock out of sea water)? Spices (plants, seeds, roots, ...)? Butter (or, more likely, margerine -- plant)? Some garlic (plant) and/or onion (plant)? Maybe some alcoholic beverage (wine -- grapes; beer -- cereals; vodka -- cereals/potatoes; rum -- sugarcanes)? Why use so many non-animal products if the said &quot;pleasure of taste&quot; comes from the meat? Admittedly, nowhere does it say that the &quot;pleasure of taste&quot; does come from the meat, but why would it be mentioned otherwise?

6th WTF: &quot;balance between human beings and the products of nature&quot;? Must have been a typo for sure: &quot;inbalance&quot;. And yes, good thing we, the good, well intentioned humans, are here to consume all the products of nature, otherwise, what a waste! And y&#39;all know that waste is a sin!

This must be the most stupidestest paragraph of the entire book... He does say he enjoys a good burger, but it would be only an assumption, of course, to think that this is his opinion or that he&#39;s just sharing something he&#39;s heard. Plus, he says he has invested in two companies working on &quot;plant-based meat&quot;: Beyond Meat and Impossible Foods. (I think calling it &quot;plant-based meat&quot; is stupid -- if it&#39;s plant-based then it&#39;s not meat -- but whatever, after that paragraph...)

=&gt; https://en.wikipedia.org/wiki/Meat_substitutes Plant-based meat
=&gt; https://en.wikipedia.org/wiki/Beyond_meat Beyond Meat
=&gt; https://en.wikipedia.org/wiki/Impossible_Foods Impossible Foods

And yes, some of my comments above may be a bit exaggedated, but... WHAT THE FUCK?


### Planting trees

Raises a few good questions about the idea of planting trees. (p128-129)

That bit mentioned at the top of the post:

&gt; How much carbon dioxide can a tree absorb in its lifetime?
&gt; (...)
&gt; (...) a good rule of thumb is 4 tons over the course 40 years.

&gt; How long will the tree survive?
&gt; (...)
&gt; If it burns down, all the carbon dioxide it was storing will be released into the atmosphere.

&gt; What would&#39;ve happened if you hadn&#39;t planted that tree?
&gt; (...)
&gt; If a tree would&#39;ve grown there naturally, you haven&#39;t added any extra carbon absorption.

&gt; In what part of the world will you plant the tree?
&gt; (...)
&gt; (...) trees in snowy areas cause more warming than cooling, because they&#39;re darker than the snow and ice (...). (...) trees in tropical forests cause more cooling than warming, because they release a lot of moisture, which becomes clouds, which reflect sunlight. Trees in the midlatitudes -- between the tropics and the polar circles -- are more or less a wash.

&gt; Was anything else growing in that spot?
&gt; (...)
&gt; If, for example, you eliminate a soybean farm and replace it with a fores, you&#39;ve reduced the total amount of soybeans available, which will drive up their price, making it more likely that someone will cut down trees somewhere else to grow soybeans. This will offset at least some of the good you do by planting your trees.

## 8. How We Keep Cool and Stay Warm

Mentions the Bullit Center, a supposedly uber environment friendly building in Seattle. (p157-158)

Mentions ACs a few times and how they&#39;re oh so cool, but darn it they pollute...

Would have been a better use of paper talking about some alternatives not based on electricity. For heating, a rocket mass heater sounds like a very good idea (some people also call it a rocket stove, even though they seem to be different things). The Wikipedia page about ACs also presents some alternatives.

=&gt; https://en.wikipedia.org/wiki/Bullitt_Center Bullit Center
=&gt; https://en.wikipedia.org/wiki/Air_conditioning ACs
=&gt; https://en.wikipedia.org/wiki/Rocket_mass_heater Rocket mass heater
=&gt; https://en.wikipedia.org/wiki/Rocket_stove Rocket stove

## 9. Adapting to a Warmer World

&gt; All told, mangroves help the world avoid some $80 billion a year in losses from floods, and they save billions more in other ways. Planting mangroves is much cheaper than building breakwaters, and the trees also improve the water quality.

Pros of planting mangrove trees. (p172-173; src: none)

=&gt; https://en.wikipedia.org/wiki/Mangrove Mangrove trees

# Mentioned books

Books mentioned throughout the book -- may have missed some.

* p43, Vaclav Smil, &quot;Energy Transitions&quot;
* p43, Vaclav Smil, &quot;Energy Myths and Realities&quot;
* &quot;Earth&#39;s Changing Climate&quot; -- can&#39;t find much info on this one, but I believe the ISBN is 978-0-7166-2765-4
* &quot;Weather for Dummies&quot;
* Acknowledgements, David MacKay, &quot;Sustainable Energy -- Without the Hot Air&quot;
* p113-114, Paul Ehrlich, &quot;The Population Bomb&quot; -- a best selling flop; predicted tons of people dying from hunger in the 1970s and 1980s, which didn&#39;t happen

=&gt; https://en.wikipedia.org/wiki/Vaclav_Smil Vaclav Smil
=&gt; https://en.wikipedia.org/wiki/David_J._C._MacKay David MacKay
=&gt; https://en.wikipedia.org/wiki/Paul_R._Ehrlich Paul Ehrlich
=&gt; https://en.wikipedia.org/wiki/The_Population_Bomb &quot;The Population Bomb&quot;

Didn&#39;t take note of the page of some of the books and I can&#39;t find them now... If you&#39;d like to help complete this list, contact me (see the bottom of the page).

# Conclusion

It&#39;s likely that there are sources out there to learn about the problem better than this book, but I learned some things from it. So to me it was worth reading even though there were a few negative points and where I

```
- [ ] Strongly agree
- [ ] Agree
- [ ] Slightly agree
- [ ] Neither agree nor disagree
- [ ] Slightly disagree
- [ ] Disagree
- [X] Strongly disagree
```

The tone of the book really did turn me off a bit... But that&#39;s probably just me. Other than that, a really big omission is that of the pollution of &quot;greener&quot; alternatives. However, to give him some credit, he seems to really be invested in the problem and to be investing some phat $$$ into it.

Whether it&#39;s worth reading for you depends on you, however. If you&#39;re well into the topic, you probably learned nothing from this post, and in that case maybe you won&#39;t learn nothing from the book that&#39;s significantly worth it either. On the other hand, if you&#39;re leaving this post more informed than you were before, you may want to give the book a try.

If you have a different view on points I&#39;ve raised, contact me, I&#39;m interested in what other people have to say about the topic. If you know your stuff and have reading suggestions, do contact me!

=&gt; ../contact.gmi Contact
  </content>
  <content type="text/html">

&lt;h1&gt;Bill Gates, &amp;quot;How to Avoid a Climate Disaster&amp;quot;&lt;/h1&gt;
&lt;p&gt;@siiky
2022/04/09
2022/07/28&lt;/p&gt;
&lt;p&gt;Finished reading this book recently (ISBN 978-0-241-44830-4) and in this post I want to share my opinions/critique, and try to compile all the notes I took while and after reading.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;list.gmi&quot;&gt;Books list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/How_to_Avoid_a_Climate_Disaster&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I&#39;ll put down page numbers in this post. If you have the same edition, cool, if not: the &amp;quot;Introduction&amp;quot; starts on p3, and &amp;quot;Climate Change and COVID-19&amp;quot; ends on p230. Hopefully that will help getting around. For figures and tables you can try the &amp;quot;Notes&amp;quot; where you can find the sources and corresponding page.&lt;/p&gt;
&lt;p&gt;Because Gemtext is so limitted, here are some notes to disambiguate formating: titles of things will be surrounded by quotes &amp;quot;Like This&amp;quot;. ALL CAPS mean either italics or bold. Page numbers will be shown as p123, figures and tables as &amp;quot;fig p123&amp;quot; and &amp;quot;tbl p123&amp;quot; respectively, and sources as &amp;quot;src&amp;quot;. Tables will be formatted in code blocks, and will additionally have their page and souce in the block&#39;s alt text. The page numbers of other things (quotes, figures, &amp;amp;c) will always come afterwards, never before. Likewise, comments about quotes/figures/tables/&amp;amp;c should in general come afterwards, not before.&lt;/p&gt;
&lt;h1&gt;Overview&lt;/h1&gt;
&lt;p&gt;Here are some of my thoughts on the book in general, or the things I got out of it. Maybe you won&#39;t agree with them, but that&#39;s life (insert Frank Sinatra reference here).&lt;/p&gt;
&lt;h2&gt;Tone&lt;/h2&gt;
&lt;p&gt;First off, this is kinda personal preference, what makes me tick or makes me cringe, but I didn&#39;t like the overall tone and his unquestionably stating that &amp;quot;progress&amp;quot; is good.&lt;/p&gt;
&lt;p&gt;My impression, from reading this book alone, is that he REALLY believes that the incresing consumerism of resources -- be they electricity, water, minerals/metals, &amp;amp;c -- is a good thing, especially by &amp;quot;the poor&amp;quot;, as he puts it.&lt;/p&gt;
&lt;p&gt;The exact thing that got us into this, he thinks should be liberally given to and used by &amp;quot;the poor&amp;quot;. So that they can wreck their own countries/land/habitat? Is this rational?&lt;/p&gt;
&lt;p&gt;The acknowledgements chapter even has a huge list of people that supposedly contributed to the inception of the book in some way or another, including several researchers, professors, and renowned authors in the matter. Is it just me thinking about this? Or am I missing something that everyone else knows about?&lt;/p&gt;
&lt;p&gt;It&#39;s almost funny after he mentioned David Foster Wallace&#39;s &amp;quot;This Is Water&amp;quot; (more later).&lt;/p&gt;
&lt;p&gt;This is related to some of the themes discussed in &amp;quot;Sex at Dawn&amp;quot; from my point of view.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sex_at_Dawn&quot;&gt;Christopher Ryan, Cacilda Jethá, &amp;quot;Sex at Dawn&amp;quot;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Pollution of &amp;quot;greener&amp;quot; alternatives&lt;/h2&gt;
&lt;p&gt;Throughout the whole book he continuously advocates for green energies (like solar and wind) and alternatives (like electric vehicles) but fails to mention even once the polution involved in their production, and the fact that the current products/methods are not recyclable (see &amp;quot;The Dark Side of Green Energies&amp;quot;). Other actually greener production methods may exists, even if not as efficient as the currently in use -- as an example, see &amp;quot;How to Build a Low-tech Solar Panel?&amp;quot;. But for some reason there&#39;s no interest in these other methods.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Guillaume_Pitron&quot;&gt;&amp;quot;The Dark Side of Green Energies&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://solar.lowtechmagazine.com/2021/10/how-to-build-a-low-tech-solar-panel.html&quot;&gt;Low-Tech Magazine, &amp;quot;How to Build a Low-tech Solar Panel?&amp;quot; (solar powered site)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lowtechmagazine.com/2021/10/how-to-build-a-low-tech-solar-panel.html&quot;&gt;Low-Tech Magazine, &amp;quot;How to Build a Low-tech Solar Panel?&amp;quot; (conventional always-on site)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Green premium&lt;/h2&gt;
&lt;p&gt;Didn&#39;t know the &amp;quot;green premium&amp;quot; term -- the extra price paid for greener alternatives. (I was familiar with the concept of course, just not the term)&lt;/p&gt;
&lt;h2&gt;Reflect cost in price&lt;/h2&gt;
&lt;p&gt;I like the idea of raising/lowering the price of something based on its environmental impact, thus better reflecting the true cost of something, and simultaneously discouraging &amp;quot;bad&amp;quot; alternatives over &amp;quot;good&amp;quot; alternatives.&lt;/p&gt;
&lt;p&gt;The difficulty would be convincing people that this is a good thing. During the transition, the average Joe probably won&#39;t be interested in the fact the new thing is better for the environment but rather that what they&#39;re using currently became more expensive. In my view, this is of course irrational -- negative effects on the environment negatively affect everyone in the long run. But it&#39;s not something easy to convince someone of, and I for sure commit the same mistake occasionally.&lt;/p&gt;
&lt;p&gt;The &amp;quot;true cost&amp;quot; of something is what snan calls &amp;quot;externalities&amp;quot;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;gemini://idiomdrottning.org/externalities&quot;&gt;Idiomdrottning, &amp;quot;Externalities&amp;quot;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Sources &amp;amp; lack thereof&lt;/h2&gt;
&lt;p&gt;Some of his statements are not backed by any sources, you&#39;re supposed (I guess?) to just believe in his authority on the matter and go with it. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;money spent/saved over some period of time when comparing alternatives -- e.g. planting mangrove trees rather than not saves the world $80B/year;&lt;/li&gt;
&lt;li&gt;amount of energy provided per amount of energy consumed by produced chickens, pigs, and cows -- 1/2, 1/3, 1/6, respectively; don&#39;t even know if that&#39;s the meat alone, or if it includes eggs, milk, &amp;c;&lt;/li&gt;
&lt;li&gt;the amount of CO2 absorbed by a tree during its lifetime -- &amp;quot;a good rule of thumb is 4 tons over the course 40 years.&amp;quot;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;At least graphs and the like usually have sources.&lt;/p&gt;
&lt;h1&gt;Chapters&lt;/h1&gt;
&lt;p&gt;Didn&#39;t take notes on some of the chapters, so obviously those aren&#39;t here. But just because it may be of interest, here&#39;s the whole index:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction: 51 Billion to Zero&lt;/li&gt;
&lt;li&gt;1. Why Zero?&lt;/li&gt;
&lt;li&gt;2. This Will Be Hard&lt;/li&gt;
&lt;li&gt;3. Five Questions to Ask in Every Climate Conversation&lt;/li&gt;
&lt;li&gt;4. How We Plug In&lt;/li&gt;
&lt;li&gt;5. How We Make Things&lt;/li&gt;
&lt;li&gt;6. How We Grow Things&lt;/li&gt;
&lt;li&gt;7. How We Get Around&lt;/li&gt;
&lt;li&gt;8. How We Keep Cool and Stay Warm&lt;/li&gt;
&lt;li&gt;9. Adapting to a Warmer World&lt;/li&gt;
&lt;li&gt;10. Why Government Policies Matter&lt;/li&gt;
&lt;li&gt;11. A Plan for Getting to Zero&lt;/li&gt;
&lt;li&gt;12. What Each of Us Can Do&lt;/li&gt;
&lt;li&gt;Afterword: Climate Change and COVID-19&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;1. Why Zero?&lt;/h2&gt;
&lt;p&gt;We went from almost 0 (in 1850) to almost 40 billion (in 2018) tons of CO2 (emitted per year, I suppose). (fig p24) The figure includes also the rise of the average temperature over the years.&lt;/p&gt;
&lt;h2&gt;2. This Will Be Hard&lt;/h2&gt;
&lt;p&gt;From David Foster Wallace&#39;s speech &amp;quot;This Is Water&amp;quot; (p37-38):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are these two young fish swimming along, and they happen to meet an older fish swimming the other way, who nods at them and says, &amp;quot;Morning, boys, how&#39;s the water?&amp;quot; And the two young fish swim on for a bit, and then eventually one of them looks over at the other and goes, &amp;quot;What the hell is water?&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;David&#39;s explanation (p38):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The immediate point of the fish story is that the most obvious, ubiquitous, important realities are often the ones that are the hardest to see and talk about.&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/This_Is_Water&quot;&gt;&amp;quot;This Is Water&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/David_Foster_Wallace&quot;&gt;David Foster Wallace&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Many farmers still have to use ancient techniques, which is one of the reasons they&#39;re trapped in poverty. They deserve modern equipment and approaches, but right now using those tools means producing more greenhouse gases.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(fig p43) Why assume that WE are the superior ones and that THEY have to &amp;quot;progress&amp;quot;? Until 1850 (according to fig p24) we barely made a dent to the climate. How can you assume that &amp;quot;progressing&amp;quot; was a good thing? Even agriculture may have been a mistake (&amp;quot;Sex at Dawn&amp;quot;)!&lt;/p&gt;
&lt;h2&gt;3. Five Questions to Ask in Every Climate Conversation&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;|-----------------------+------------+------------------------------------------------|
| Activity              | Percentage | Description                                    |
|-----------------------+------------+------------------------------------------------|
| Making things         |        31% | Producing materials (cement, metals, plastics) |
| Plugging in           |        27% | Producing electricity                          |
| Growing things        |        19% | For food (plants &amp;amp; animals)                    |
| Getting around        |        16% | Cars, planes, ships, trains, trucks, ...       |
| Keeping warm and cool |         7% | Heating &amp;amp; cooling, refrigeration               |
|-----------------------+------------+------------------------------------------------|
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Human activities and their percentage of greenhouse gases emitted. He gives a definition of what goes where in a footnote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These percentages represent global greenhouse gas emissions. When you&#39;re categorizing emissions from various sources, one of the questions you have to decide is how to count products that cause emissions both when you make them and when you use them. For example, we produce greenhouse gases when we refine oil into gasoline and again when we burn the gasoline. In this book, I&#39;ve included all the emissions from making things in &amp;quot;How we make things&amp;quot; and all the emissions from using them in their respective categories. So oil refining goes under &amp;quot;How we make things,&amp;quot; and burning gasoline is included in &amp;quot;How we get around.&amp;quot; The same goes for things like cars, planes, and ships. The steel that they&#39;re made of is counted under &amp;quot;How we make things,&amp;quot; and the emissions from the fuels they burn go under &amp;quot;How we get around.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This (tbl p55) was possibly the most unexpected thing I learned from the book. I didn&#39;t expect at all for production of materials to be at the top and electricity next. Even more for food (mainly animals) being worse than transport. Just shows how well (un)informed I am (or was)...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|------------------------+--------------|
| Place                  | Energy       |
|------------------------+--------------|
| world                  | 5k gigawatts |
| US                     | 1k gigawatts |
| mid-size city          | 1 gigawatt   |
| small town             | 1 megawatt   |
| average american house | 1 kilowatt   |
|------------------------+--------------|
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;How much power does it take?&amp;quot; -- Gates&#39; cheatsheet on energy quantities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whenever you hear &amp;quot;kilowatt&amp;quot;, think &amp;quot;house.&amp;quot; &amp;quot;Gigawatt&amp;quot;, think &amp;quot;city.&amp;quot; A hundred or more gigawatts, think &amp;quot;big country.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(p57)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|----------------------+-----------|
| Energy source        |     W/m^2 |
|----------------------+-----------|
| Fossil fuels         | 500-10000 |
| Nuclear              |  500-1000 |
| Solar                |      5-20 |
| Hydropower           |      5-50 |
| Wind                 |       1-2 |
| Wood &amp;amp; other biomass |        &amp;lt;1 |
|----------------------+-----------|
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;How much power can we generate per square meter?&amp;quot;. Has this note about solar:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The power density of solar could theoretically reach 100 W/m^2, though no one has accomplished this yet.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;4. How We Plug In&lt;/h2&gt;
&lt;p&gt;Again suggesting it&#39;s a good thing to increase energy usage. (p74)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|-------------------+----------|
| Source            | Tons/TWh |
|-------------------+----------|
| Solar             |     16.4 |
| Hydropower        |     13.9 |
| Wind              |      9.9 |
| Geothermal        |      5.3 |
| Coal              |     1.39 |
| Nuclear (fission) |     0.99 |
| Natural gas       |     0.79 |
|-------------------+----------|
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Histogram showing the amount of resources needed to build and run a power plant of different types, measured in tons of material per TWh, ordered from most to least material hungry. The numbers here are approximate, measured with a ruler.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|-------------------+------------|
| Energy Source     | Deaths/TWh |
|-------------------+------------|
| Coal              |       24.6 |
| Oil               |       18.4 |
| Biomass           |        4.6 |
| Gas               |        2.8 |
| Nuclear (fission) |       0.07 |
|-------------------+------------|
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Histogram showing number of deaths per unit of electricity generated. The numbers here are exact, each column had a label.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Imagine if everyone had gotten together one day and said, &amp;quot;Hey, cars are killing people. They&#39;re dangerous. Let&#39;s stop driving and give up these automobiles.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Analogy with cars about how we stopped using and researching nuclear energy because of the past accidents. (p86)&lt;/p&gt;
&lt;p&gt;It goes both ways too. We stopped using nuclear because of the accidents, but even though the other energy sources result in more deaths per unit of energy (tbl p85), we prefer using those.&lt;/p&gt;
&lt;p&gt;Mentions TerraPower (p86). Some marketing words (mainly for me to read about later): traveling wave reactor, capable of running off of the waste of other reactors (that is, used up Uranium, Plutonium, &amp;amp;c). (p87)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TerraPower&quot;&gt;TerraPower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Traveling_wave_reactor&quot;&gt;Traveling wave reactor&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Direct Air Capture: taking CO2 right off the air. (p95) The alternative, which seems to be more practicable nowadays, is point carbon capture.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Direct_air_capture&quot;&gt;Direct Air Capture (DAC)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Carbon_capture_and_storage&quot;&gt;Point Carbon Capture&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I used to scoff at the idea that using power more efficiently would make a dent in climate change. My rationale: If you have limited resources to reduce emitions (and we do), then you&#39;d get the biggest impact by moving to zero emissions rather than by spending a lot trying to reduce the demand for energy.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;A comment about using less energy. (p95) Is it dumb or what? The following paragraph:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anything that reduces the scale we need to reach is helpful.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(p96) Whouldathunkit! Finally he says something more sensible:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There&#39;s also a related approach called load shifting or demand shifting, which involves using power more consistently throughout the day.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(p96) This sounds like a VERY good idea, for the reason he states afterwards:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Right now, we tend to generate power when we use it -- for example, cranking up electric plants to run a city&#39;s light at night. With load shifting, though, we do the opposite: we use more electricity when it&#39;s cheapest to generate.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(p96) And he goes on giving some examples of changes of thinking and habits.&lt;/p&gt;
&lt;p&gt;This relates to a habit that I have to break... I tend to stay up late and wake up late.&lt;/p&gt;
&lt;h2&gt;6. How We Grow Things&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Norman_Borlaug&quot;&gt;Normam Borlaug&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Discoverer/inventor of &amp;quot;super crops&amp;quot;. (p115)&lt;/p&gt;
&lt;p&gt;A grown chicken gives 1 calorie for every 2 calories that it consumes; a pig 1 for every 3 calories; cows 1 for every 6. That is, we get only 1/2, 1/3, and 1/6, respectively, of the energy &amp;quot;we put in&amp;quot; or &amp;quot;invest&amp;quot;. (p115; src: none)&lt;/p&gt;
&lt;p&gt;Graph of the trend of meat consumption on some countries over the years, from 2000 to 2020, with predictions until 2028. (fig p116; src: OECD-FAO Agricultural Outlook 2020) In 2020, million tons of meat consumed (approximate numbers, measured with a ruler): Mexico, 9.6; Brazil, 19.2; EU, 40; USA, 42; China, 80.&lt;/p&gt;
&lt;p&gt;After exposing how &amp;quot;growing&amp;quot; animals significantly contributes to global
warming and how greenhouse gases come to be from this practice, and of ways to
work around that or improve the situation (such as bioengineering animals to not
produce greenhouse gases), this comes along:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A hard-core vegan might propose another solution: /Instead of trying all these ways of reducing emissions, we should just stop raising livestock./ I can see the appeal of that argument, but I don&#39;t think it&#39;s realistic. For one thing, meat plays too important a role in human culture. In many parts of the world, even where it&#39;s scarce, eating meat is a crucial part of festivals and celebrations. In France, the gastronomic meal -- including started, meat or fish, cheese, and dessert -- is officially listed as part of the country&#39;s Intangible Cultural Heritage of Humanity. According to the listing on the UNESCO website, &amp;quot;The gastronomic meal emphasizes togetherness, the pleasure of taste, and the balance between human beings and the products of nature&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Gates on &amp;quot;hard-core veganism&amp;quot;. (p118-119)&lt;/p&gt;
&lt;p&gt;WHAT THE FUCK?&lt;/p&gt;
&lt;p&gt;1st WTF: &amp;quot;hard-core vegan&amp;quot;? I&#39;m pretty sure a vegan doesn&#39;t have to be hardcore to be of that opinion.&lt;/p&gt;
&lt;p&gt;2nd WTF: &amp;quot;Cultural Heritage&amp;quot;? My brain goes &amp;quot;computer says no&amp;quot; with this... The culture we&#39;re leaving behind -- possibly literally -- is to destroy what made it possible to exist in the first place?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cultural_heritage&quot;&gt;Cultural Heritage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Computer_says_no&quot;&gt;https://en.wikipedia.org/wiki/Computer_says_no&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;3rd WTF: UNESCO? Aren&#39;t these the guys behind the SDGs (&amp;quot;Sustainable Development Goals&amp;quot;, quotes super apropes)?&lt;/p&gt;
&lt;p&gt;The same guys that put &amp;quot;Climate action&amp;quot;, &amp;quot;Life below water&amp;quot;, and &amp;quot;Life on land&amp;quot; as ALMOST the least important goals (13, 14, and 15, respectively, out of 17 -- pic below)? So much for sustainable...&lt;/p&gt;
&lt;p&gt;The same guys that put water (6) as less important than poverty (1), food (2), health &amp;amp; well being (3), quality education (4), and gender equality (5)? Yes, everybody knows you all your thirsts with knowledge quench! And what not...&lt;/p&gt;
&lt;p&gt;And what the hell are &amp;quot;No poverty&amp;quot; (1), &amp;quot;Responsible consumption and production&amp;quot; (12) and &amp;quot;Partnerships for the goals&amp;quot; (17), anyway? Couldn&#39;t they have been any vaguer?&lt;/p&gt;
&lt;p&gt;(To be fair, I haven&#39;t read each of the goals&#39; descriptions yet)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Unesco&quot;&gt;UNESCO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sustainable_Development_Goals&quot;&gt;SDGs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Sustainable_Development_Goal_targets_and_indicators&quot;&gt;SDGs descriptions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/a/a7/Sustainable_Development_Goals.svg&quot; alt=&quot;SDGs diagram&quot; /&gt;&lt;/p&gt;
&lt;p&gt;4th WTF: &amp;quot;togetherness&amp;quot;? You have to eat an animal (or animal product) to feel close to other people, like your friends and family? Reminds me of an episode of FlashForward where a listener/commenter(?) said &amp;quot;a Sunday isn&#39;t a Sunday without my chicken wings&amp;quot; or something of the sort. Ok, then... Maybe I&#39;m really so very abnormally undemanding, but I&#39;m good with a (literal) walk in the park.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.flashforwardpod.com/2016/08/10/episode-19-wheres-the-beef&quot;&gt;FlashForward, &amp;quot;Where’s the Beef?&amp;quot;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;5th WTF: &amp;quot;pleasure of taste&amp;quot;? Hmmm... Let&#39;s see. How do you season your meat or fish? Salt (lit. some rock out of sea water)? Spices (plants, seeds, roots, ...)? Butter (or, more likely, margerine -- plant)? Some garlic (plant) and/or onion (plant)? Maybe some alcoholic beverage (wine -- grapes; beer -- cereals; vodka -- cereals/potatoes; rum -- sugarcanes)? Why use so many non-animal products if the said &amp;quot;pleasure of taste&amp;quot; comes from the meat? Admittedly, nowhere does it say that the &amp;quot;pleasure of taste&amp;quot; does come from the meat, but why would it be mentioned otherwise?&lt;/p&gt;
&lt;p&gt;6th WTF: &amp;quot;balance between human beings and the products of nature&amp;quot;? Must have been a typo for sure: &amp;quot;inbalance&amp;quot;. And yes, good thing we, the good, well intentioned humans, are here to consume all the products of nature, otherwise, what a waste! And y&#39;all know that waste is a sin!&lt;/p&gt;
&lt;p&gt;This must be the most stupidestest paragraph of the entire book... He does say he enjoys a good burger, but it would be only an assumption, of course, to think that this is his opinion or that he&#39;s just sharing something he&#39;s heard. Plus, he says he has invested in two companies working on &amp;quot;plant-based meat&amp;quot;: Beyond Meat and Impossible Foods. (I think calling it &amp;quot;plant-based meat&amp;quot; is stupid -- if it&#39;s plant-based then it&#39;s not meat -- but whatever, after that paragraph...)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Meat_substitutes&quot;&gt;Plant-based meat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Beyond_meat&quot;&gt;Beyond Meat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Impossible_Foods&quot;&gt;Impossible Foods&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;And yes, some of my comments above may be a bit exaggedated, but... WHAT THE FUCK?&lt;/p&gt;
&lt;h3&gt;Planting trees&lt;/h3&gt;
&lt;p&gt;Raises a few good questions about the idea of planting trees. (p128-129)&lt;/p&gt;
&lt;p&gt;That bit mentioned at the top of the post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How much carbon dioxide can a tree absorb in its lifetime?
(...)
(...) a good rule of thumb is 4 tons over the course 40 years.&lt;/p&gt;
&lt;p&gt;How long will the tree survive?
(...)
If it burns down, all the carbon dioxide it was storing will be released into the atmosphere.&lt;/p&gt;
&lt;p&gt;What would&#39;ve happened if you hadn&#39;t planted that tree?
(...)
If a tree would&#39;ve grown there naturally, you haven&#39;t added any extra carbon absorption.&lt;/p&gt;
&lt;p&gt;In what part of the world will you plant the tree?
(...)
(...) trees in snowy areas cause more warming than cooling, because they&#39;re darker than the snow and ice (...). (...) trees in tropical forests cause more cooling than warming, because they release a lot of moisture, which becomes clouds, which reflect sunlight. Trees in the midlatitudes -- between the tropics and the polar circles -- are more or less a wash.&lt;/p&gt;
&lt;p&gt;Was anything else growing in that spot?
(...)
If, for example, you eliminate a soybean farm and replace it with a fores, you&#39;ve reduced the total amount of soybeans available, which will drive up their price, making it more likely that someone will cut down trees somewhere else to grow soybeans. This will offset at least some of the good you do by planting your trees.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2&gt;8. How We Keep Cool and Stay Warm&lt;/h2&gt;
&lt;p&gt;Mentions the Bullit Center, a supposedly uber environment friendly building in Seattle. (p157-158)&lt;/p&gt;
&lt;p&gt;Mentions ACs a few times and how they&#39;re oh so cool, but darn it they pollute...&lt;/p&gt;
&lt;p&gt;Would have been a better use of paper talking about some alternatives not based on electricity. For heating, a rocket mass heater sounds like a very good idea (some people also call it a rocket stove, even though they seem to be different things). The Wikipedia page about ACs also presents some alternatives.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bullitt_Center&quot;&gt;Bullit Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Air_conditioning&quot;&gt;ACs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rocket_mass_heater&quot;&gt;Rocket mass heater&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rocket_stove&quot;&gt;Rocket stove&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;9. Adapting to a Warmer World&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;All told, mangroves help the world avoid some $80 billion a year in losses from floods, and they save billions more in other ways. Planting mangroves is much cheaper than building breakwaters, and the trees also improve the water quality.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Pros of planting mangrove trees. (p172-173; src: none)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Mangrove&quot;&gt;Mangrove trees&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Mentioned books&lt;/h1&gt;
&lt;p&gt;Books mentioned throughout the book -- may have missed some.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;p43, Vaclav Smil, &amp;quot;Energy Transitions&amp;quot;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;p43, Vaclav Smil, &amp;quot;Energy Myths and Realities&amp;quot;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;Earth&#39;s Changing Climate&amp;quot; -- can&#39;t find much info on this one, but I believe the ISBN is 978-0-7166-2765-4&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;Weather for Dummies&amp;quot;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Acknowledgements, David MacKay, &amp;quot;Sustainable Energy -- Without the Hot Air&amp;quot;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;p113-114, Paul Ehrlich, &amp;quot;The Population Bomb&amp;quot; -- a best selling flop; predicted tons of people dying from hunger in the 1970s and 1980s, which didn&#39;t happen&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Vaclav_Smil&quot;&gt;Vaclav Smil&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/David_J._C._MacKay&quot;&gt;David MacKay&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Paul_R._Ehrlich&quot;&gt;Paul Ehrlich&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Population_Bomb&quot;&gt;&amp;quot;The Population Bomb&amp;quot;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Didn&#39;t take note of the page of some of the books and I can&#39;t find them now... If you&#39;d like to help complete this list, contact me (see the bottom of the page).&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It&#39;s likely that there are sources out there to learn about the problem better than this book, but I learned some things from it. So to me it was worth reading even though there were a few negative points and where I&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- [ ] Strongly agree
- [ ] Agree
- [ ] Slightly agree
- [ ] Neither agree nor disagree
- [ ] Slightly disagree
- [ ] Disagree
- [X] Strongly disagree
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tone of the book really did turn me off a bit... But that&#39;s probably just me. Other than that, a really big omission is that of the pollution of &amp;quot;greener&amp;quot; alternatives. However, to give him some credit, he seems to really be invested in the problem and to be investing some phat $$$ into it.&lt;/p&gt;
&lt;p&gt;Whether it&#39;s worth reading for you depends on you, however. If you&#39;re well into the topic, you probably learned nothing from this post, and in that case maybe you won&#39;t learn nothing from the book that&#39;s significantly worth it either. On the other hand, if you&#39;re leaving this post more informed than you were before, you may want to give the book a try.&lt;/p&gt;
&lt;p&gt;If you have a different view on points I&#39;ve raised, contact me, I&#39;m interested in what other people have to say about the topic. If you know your stuff and have reading suggestions, do contact me!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../contact.gmi&quot;&gt;Contact&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/osm/cheatsheet.md</id>
  <title type="text">OpenStreetMap Cheat Sheet</title>
  <updated>2022-07-28T00:00:00Z</updated>
  <published>2021-07-12T00:00:00Z</published>
  <link href="https://siiky.srht.site/osm/cheatsheet.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/osm/cheatsheet.md" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# OpenStreetMap Cheat Sheet
@siiky
2021/07/12
2022/07/28

Here you&#39;ll find some personal notes I&#39;ve gathered, or am still gathering, to
ease and quicken creating and correctly tagging common features on
OpenStreetMap.

If you can&#39;t find what you want to map here, have a look at [_How to map
a_](https://wiki.openstreetmap.org/wiki/How_to_map_a).

# Water Source

For sources of water to be used (mainly) by humans. Water sources to used by
animals require a different tag
([`amenity=watering_place`](https://wiki.openstreetmap.org/wiki/Tag:amenity=watering_place)).
Likewise for water to be used to refill RV&#39;s deposits and the like
([`amenity=water_point`](https://wiki.openstreetmap.org/wiki/Tag:amenity=water_point)).

* [`drinking_water=*`](https://wiki.openstreetmap.org/wiki/Key:drinking_water):
  after defining the type of water source, you may specify whether the water is
  drinkable. Apart from the obvious `yes` and `no`, `conditional` means &quot;don&#39;t
  know&quot; or &quot;drink at your own risk&quot;.

* [`drinking_water:legal=*`](https://wiki.openstreetmap.org/wiki/Key:drinking_water:legal)
  (optional): additionally, you may use to specify whether the water source is
  officially (un)safe to drink.

Other possibly interesting tags to take a look at are
[`natural=water`](https://wiki.openstreetmap.org/wiki/Tag:natural=water) and
[`natural=spring`](https://wiki.openstreetmap.org/wiki/Tag:natural=spring).

## Simple Water Source

* [`amenity=drinking_water`](https://wiki.openstreetmap.org/wiki/Tag:amenity=drinking_water):
  specifies the feature is a simple source of water. Check the documentation
  for examples.

* [`drinking_water=*`](https://wiki.openstreetmap.org/wiki/Key:drinking_water)
  (optional; `yes`): specifies whether the water is drinkable. From my
  understanding, together with
  [`amenity=drinking_water`](https://wiki.openstreetmap.org/wiki/Tag:amenity=drinking_water),
  not using this tag is the same as using `drinking_water=yes`.

## Ornamented Water Source

* [`amenity=fountain`](https://wiki.openstreetmap.org/wiki/Tag:amenity=fountain)
  ([PT](https://wiki.openstreetmap.org/wiki/Pt:Tag:amenity=fountain)):
  specifies the feature is a fountain. Check the documentation for examples.

* [`natural=water`](https://wiki.openstreetmap.org/wiki/Tag:natural=water)
  (optional): commonly used together to specify bodies of water next, around,
  under, etc the fountain.

# Waste

Features related to [waste
processing](https://wiki.openstreetmap.org/wiki/Waste_Processing), such as of
trash and recyclables.

## Recycling Container

* [`amenity=recycling`](https://wiki.openstreetmap.org/wiki/Tag:amenity=recycling):
  specifies the feature is of some sort of recycling type.

* [`recycling_type=container`](https://wiki.openstreetmap.org/wiki/Tag:recycling_type=container):
  specifies the feature is a recycling container, similar to [this one][0] or
  [this one][1].

* [`location=*`](https://wiki.openstreetmap.org/wiki/Key:location) (optional):
  specifies where the feature is located, i.e., on the surface, under the
  surface, etc. Two common ones are
  [`location=overground`](https://wiki.openstreetmap.org/wiki/Tag:location=overground)
  ([pic][0]) and
  [`location=underground`](https://wiki.openstreetmap.org/wiki/Tag:location=underground)
  ([pic][1]). It seems to be optional in the case of
  [`location=overground`](https://wiki.openstreetmap.org/wiki/Tag:location=overground),
  as it seems to me to be implied by
  [`amenity=recycling`](https://wiki.openstreetmap.org/wiki/Tag:amenity=recycling).

* `recycling:&lt;material&gt;=yes/no`: a list of materials can be found on
  [`amenity=recycling`](https://wiki.openstreetmap.org/wiki/Tag:amenity=recycling),
  and as is mentioned on that page, if `recycling:X=*` is omitted, then it is
  assumed to be `no`, as if `recycling:X=no` was present; _unless_ a tag of a
  supergroup of `X` is present and `yes`, in which case it&#39;s as if
  `recycling:X=yes` was present.

### The Big Three

By &quot;big three&quot; I mean paper, plastic, and glass:

* Paper container (&quot;papelão&quot;): alongside paper itself, all kinds of
  paper-related and paper-derived materials, like cardboard, can be deposited.

* Plastic container (&quot;embalão&quot;): all kinds of plastic and metal materials can
  be deposited. These include plastic bottles, plastic bags, tin cans, milk
  cartons, ...

* Glass container (&quot;vidrão&quot;): all kinds of glass objects, like glass bottles,
  glass cups, etc, can be deposited.

Some of these containers also have batteries containers (&quot;pilhão&quot;) next to
them, where you can deposit used batteries.

The correct `recycling:&lt;material&gt;=yes/no` tags, based on [`amenity=recycling`
(PT)](https://wiki.openstreetmap.org/wiki/Pt:Tag:amenity=recycling), are the
following:

    recycling:plastic=yes
    recycling:plastic_bags=yes
    recycling:plastic_bottles=yes
    recycling:plastic_packaging=yes
    recycling:cans=yes
    recycling:PET=yes
    recycling:paper=yes
    recycling:paper_packaging=yes
    recycling:beverage_cartons=yes
    recycling:cardboard=yes
    recycling:cartons=yes
    recycling:magazines=yes
    recycling:newspaper=yes
    recycling:glass=yes
    recycling:glass_bottles=yes

**NOTE**: I think styrofoam is allowed in the plastic container. However, I&#39;m
not sure it actually is, nor if it&#39;s implied by the tags above.

And in case there&#39;s a batteries basket, include also the following:

    recycling:batteries=yes
    recycling:car_batteries=no

### Clothes &amp; Footwear

The correct `recycling:&lt;material&gt;=yes/no` tags, based on [`amenity=recycling`
(PT)](https://wiki.openstreetmap.org/wiki/Pt:Tag:amenity=recycling), are the
following:

    recycling:belts=yes
    recycling:clothes=yes

**NOTE**: Footwear is accepted, according to the comments, even though there&#39;s
no `recycling:footwear=yes` or similar. I guess it&#39;s implied by
`recycling:clothes=yes`.

## Trash

Use
[`amenity=waste_disposal`](https://wiki.openstreetmap.org/wiki/Tag:amenity=waste_disposal)
if the feature is a container, or
[`amenity=waste_basket`](https://wiki.openstreetmap.org/wiki/Tag:amenity=waste_basket)
if it is a basket.

Additionally, specify the accepted kind of waste with
[`waste=*`](https://wiki.openstreetmap.org/wiki/Key:waste):

    waste=trash;organic;dog_excrement

If there&#39;s an ashtray attached, you can include `cigarettes`:

    waste=trash;organic;dog_excrement;cigarettes

You may also include
[`location=*`](https://wiki.openstreetmap.org/wiki/Key:location).

# Leisure

## Picnic Table

* [`leisure=picnic_table`](https://wiki.openstreetmap.org/wiki/Tag:leisure=picnic_table):
  specifies the feature is picnic table.

* [`covered=*`](https://wiki.openstreetmap.org/wiki/Key:covered) (optional):
  you may include this if it&#39;s covered, either completely or partially.

* [`material=*`](https://wiki.openstreetmap.org/wiki/Key:material) (optional):
  specifies the material it&#39;s made of.

## Bench

* [`amenity=bench`](https://wiki.openstreetmap.org/wiki/Tag:amenity=bench):
  specifies the feature is a bench.

* [`backrest=*`](https://wiki.openstreetmap.org/wiki/Key:backrest) (optional): specifies whether the bench has or not a backrest.

* [`material=*`](https://wiki.openstreetmap.org/wiki/Key:material) (optional): specifies the material it&#39;s made of.

## BBQ Grill

* [`amenity=bbq`](https://wiki.openstreetmap.org/wiki/Tag:amenity=bbq):
  specifies the feature is a BBQ grill.

* [`fuel=*`](https://wiki.openstreetmap.org/wiki/Key:fuel) (optional): the type
  of material you can use as fuel.

* [`covered=*`](https://wiki.openstreetmap.org/wiki/Key:covered) (optional;
  `no`): whether it&#39;s covered, either partially or completely.

# Tourism

## Viewpoint (Miradouro)

* [`tourism=viewpoint`](https://wiki.openstreetmap.org/wiki/Tag:tourism=viewpoint):
  specifies the feature is a viewpoint.

* [`name=*`](https://wiki.openstreetmap.org/wiki/Key:name) (optional?):
  specifies the name of the viewpoint.

* [`direction=*`](https://wiki.openstreetmap.org/wiki/Key:direction)
  (optional): the direction of the view; e.g., `0-360` is &quot;all-round&quot;.

# Education

## Study Center

[`amenity=prep_school`](https://wiki.openstreetmap.org/wiki/Tag:amenity=prep_school)
seems to be the most appropriate, but for more info see also [_Education
features_](https://wiki.openstreetmap.org/wiki/Education_features).

Some other possible options:

* [`education=centre`](https://wiki.openstreetmap.org/wiki/Tag:education=centre):
  used for specialized areas.
* [`office=tutoring`](https://wiki.openstreetmap.org/wiki/Tag:office=tutoring):
  looks like it&#39;s used for an office itself, not where students go to study?

# Popular Restaurant/Cafe/etc chains

## McDonald&#39;s

Tags common to all, from
[McDonald&#39;s](https://wiki.openstreetmap.org/wiki/Tag:name=McDonald&#39;s):

    amenity=fast_food
    brand:wikidata=Q38076
    brand=McDonald&#39;s
    cuisine=burger
    name=McDonald&#39;s

I believe all McDonald&#39;s have takeaway, so:

    takeaway=yes

Some common tags that vary:

    outdoor_seating=yes/no
    smoking=outside
    drive_through=yes/no
    opening_hours=*
    wheelchair=yes/no/...

Don&#39;t forget to add `addr:*=*` and `payment:*=*`.

---

Overpass query to find McDonald&#39;s restaurants with no `brand`:

    [out:json][timeout:300];
    (
      nwr[&quot;name&quot;~&quot;^mcdonald.?s&quot;, i]({{bbox}});
      nwr[&quot;brand&quot;~&quot;^mcdonald.?s&quot;, i]({{bbox}});
      nwr[&quot;operator&quot;~&quot;^mcdonald.?s&quot;, i]({{bbox}});
    );
    out body;
    &gt;;
    out skel qt;

## Montalegrense

**TODO**: `amenity=cafe`, `amenity=bakery`, `shop=confectionery`, or something else?

## Mixpão

**TODO**: `amenity=cafe`, `amenity=bakery`, `shop=confectionery`, or something else?

# NIF/VAT number

Use [`ref:vatin`](https://wiki.openstreetmap.org/wiki/Key:ref:vatin), e.g. `ref:vatin=PT123456789`.

# Adding turn restrictions

First, in this order, select the &quot;from&quot; way, the intersecting (&quot;via&quot;) node, and
the &quot;to&quot; way. Then, &quot;Presets&quot;&gt;&quot;Relations&quot;&gt;&quot;Turn restriction&quot;. Select the
correct restriction (e.g. `no_u_turn`) and hit &quot;New relation&quot;. On the lower
left list of objects, select the &quot;from&quot; way and change its role to &quot;from&quot; (and
similarly to the &quot;via&quot; node and the &quot;to&quot; way). Hit &quot;Ok&quot; and you&#39;re done.

[0]: https://wiki.openstreetmap.org/wiki/File:Altglas.jpg
[1]: https://wiki.openstreetmap.org/wiki/File:Jt_osm_recycling_underfloor.jpg
  </content>
  <content type="text/html">

&lt;h1&gt;OpenStreetMap Cheat Sheet&lt;/h1&gt;
&lt;p&gt;@siiky
2021/07/12
2022/07/28&lt;/p&gt;
&lt;p&gt;Here you&#39;ll find some personal notes I&#39;ve gathered, or am still gathering, to
ease and quicken creating and correctly tagging common features on
OpenStreetMap.&lt;/p&gt;
&lt;p&gt;If you can&#39;t find what you want to map here, have a look at &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/How_to_map_a&quot;&gt;&lt;em&gt;How to map
a&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Water Source&lt;/h1&gt;
&lt;p&gt;For sources of water to be used (mainly) by humans. Water sources to used by
animals require a different tag
(&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=watering_place&quot;&gt;&lt;code&gt;amenity=watering_place&lt;/code&gt;&lt;/a&gt;).
Likewise for water to be used to refill RV&#39;s deposits and the like
(&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=water_point&quot;&gt;&lt;code&gt;amenity=water_point&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:drinking_water&quot;&gt;&lt;code&gt;drinking_water=*&lt;/code&gt;&lt;/a&gt;:
  after defining the type of water source, you may specify whether the water is
  drinkable. Apart from the obvious &lt;code&gt;yes&lt;/code&gt; and &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;conditional&lt;/code&gt; means &amp;quot;don&#39;t
  know&amp;quot; or &amp;quot;drink at your own risk&amp;quot;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:drinking_water:legal&quot;&gt;&lt;code&gt;drinking_water:legal=*&lt;/code&gt;&lt;/a&gt;
  (optional): additionally, you may use to specify whether the water source is
  officially (un)safe to drink.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Other possibly interesting tags to take a look at are
&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:natural=water&quot;&gt;&lt;code&gt;natural=water&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:natural=spring&quot;&gt;&lt;code&gt;natural=spring&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Simple Water Source&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=drinking_water&quot;&gt;&lt;code&gt;amenity=drinking_water&lt;/code&gt;&lt;/a&gt;:
  specifies the feature is a simple source of water. Check the documentation
  for examples.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:drinking_water&quot;&gt;&lt;code&gt;drinking_water=*&lt;/code&gt;&lt;/a&gt;
  (optional; &lt;code&gt;yes&lt;/code&gt;): specifies whether the water is drinkable. From my
  understanding, together with
  &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=drinking_water&quot;&gt;&lt;code&gt;amenity=drinking_water&lt;/code&gt;&lt;/a&gt;,
  not using this tag is the same as using &lt;code&gt;drinking_water=yes&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Ornamented Water Source&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=fountain&quot;&gt;&lt;code&gt;amenity=fountain&lt;/code&gt;&lt;/a&gt;
  (&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Pt:Tag:amenity=fountain&quot;&gt;PT&lt;/a&gt;):
  specifies the feature is a fountain. Check the documentation for examples.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:natural=water&quot;&gt;&lt;code&gt;natural=water&lt;/code&gt;&lt;/a&gt;
  (optional): commonly used together to specify bodies of water next, around,
  under, etc the fountain.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Waste&lt;/h1&gt;
&lt;p&gt;Features related to &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Waste_Processing&quot;&gt;waste
processing&lt;/a&gt;, such as of
trash and recyclables.&lt;/p&gt;
&lt;h2&gt;Recycling Container&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=recycling&quot;&gt;&lt;code&gt;amenity=recycling&lt;/code&gt;&lt;/a&gt;:
  specifies the feature is of some sort of recycling type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:recycling_type=container&quot;&gt;&lt;code&gt;recycling_type=container&lt;/code&gt;&lt;/a&gt;:
  specifies the feature is a recycling container, similar to &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/File:Altglas.jpg&quot;&gt;this one&lt;/a&gt; or
  &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/File:Jt_osm_recycling_underfloor.jpg&quot;&gt;this one&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:location&quot;&gt;&lt;code&gt;location=*&lt;/code&gt;&lt;/a&gt; (optional):
  specifies where the feature is located, i.e., on the surface, under the
  surface, etc. Two common ones are
  &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:location=overground&quot;&gt;&lt;code&gt;location=overground&lt;/code&gt;&lt;/a&gt;
  (&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/File:Altglas.jpg&quot;&gt;pic&lt;/a&gt;) and
  &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:location=underground&quot;&gt;&lt;code&gt;location=underground&lt;/code&gt;&lt;/a&gt;
  (&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/File:Jt_osm_recycling_underfloor.jpg&quot;&gt;pic&lt;/a&gt;). It seems to be optional in the case of
  &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:location=overground&quot;&gt;&lt;code&gt;location=overground&lt;/code&gt;&lt;/a&gt;,
  as it seems to me to be implied by
  &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=recycling&quot;&gt;&lt;code&gt;amenity=recycling&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;recycling:&amp;lt;material&amp;gt;=yes/no&lt;/code&gt;: a list of materials can be found on
  &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=recycling&quot;&gt;&lt;code&gt;amenity=recycling&lt;/code&gt;&lt;/a&gt;,
  and as is mentioned on that page, if &lt;code&gt;recycling:X=*&lt;/code&gt; is omitted, then it is
  assumed to be &lt;code&gt;no&lt;/code&gt;, as if &lt;code&gt;recycling:X=no&lt;/code&gt; was present; &lt;em&gt;unless&lt;/em&gt; a tag of a
  supergroup of &lt;code&gt;X&lt;/code&gt; is present and &lt;code&gt;yes&lt;/code&gt;, in which case it&#39;s as if
  &lt;code&gt;recycling:X=yes&lt;/code&gt; was present.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h3&gt;The Big Three&lt;/h3&gt;
&lt;p&gt;By &amp;quot;big three&amp;quot; I mean paper, plastic, and glass:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Paper container (&amp;quot;papelão&amp;quot;): alongside paper itself, all kinds of
  paper-related and paper-derived materials, like cardboard, can be deposited.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plastic container (&amp;quot;embalão&amp;quot;): all kinds of plastic and metal materials can
  be deposited. These include plastic bottles, plastic bags, tin cans, milk
  cartons, ...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Glass container (&amp;quot;vidrão&amp;quot;): all kinds of glass objects, like glass bottles,
  glass cups, etc, can be deposited.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Some of these containers also have batteries containers (&amp;quot;pilhão&amp;quot;) next to
them, where you can deposit used batteries.&lt;/p&gt;
&lt;p&gt;The correct &lt;code&gt;recycling:&amp;lt;material&amp;gt;=yes/no&lt;/code&gt; tags, based on &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Pt:Tag:amenity=recycling&quot;&gt;&lt;code&gt;amenity=recycling&lt;/code&gt;
(PT)&lt;/a&gt;, are the
following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;recycling:plastic=yes
recycling:plastic_bags=yes
recycling:plastic_bottles=yes
recycling:plastic_packaging=yes
recycling:cans=yes
recycling:PET=yes
recycling:paper=yes
recycling:paper_packaging=yes
recycling:beverage_cartons=yes
recycling:cardboard=yes
recycling:cartons=yes
recycling:magazines=yes
recycling:newspaper=yes
recycling:glass=yes
recycling:glass_bottles=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: I think styrofoam is allowed in the plastic container. However, I&#39;m
not sure it actually is, nor if it&#39;s implied by the tags above.&lt;/p&gt;
&lt;p&gt;And in case there&#39;s a batteries basket, include also the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;recycling:batteries=yes
recycling:car_batteries=no
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Clothes &amp;amp; Footwear&lt;/h3&gt;
&lt;p&gt;The correct &lt;code&gt;recycling:&amp;lt;material&amp;gt;=yes/no&lt;/code&gt; tags, based on &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Pt:Tag:amenity=recycling&quot;&gt;&lt;code&gt;amenity=recycling&lt;/code&gt;
(PT)&lt;/a&gt;, are the
following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;recycling:belts=yes
recycling:clothes=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Footwear is accepted, according to the comments, even though there&#39;s
no &lt;code&gt;recycling:footwear=yes&lt;/code&gt; or similar. I guess it&#39;s implied by
&lt;code&gt;recycling:clothes=yes&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Trash&lt;/h2&gt;
&lt;p&gt;Use
&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=waste_disposal&quot;&gt;&lt;code&gt;amenity=waste_disposal&lt;/code&gt;&lt;/a&gt;
if the feature is a container, or
&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=waste_basket&quot;&gt;&lt;code&gt;amenity=waste_basket&lt;/code&gt;&lt;/a&gt;
if it is a basket.&lt;/p&gt;
&lt;p&gt;Additionally, specify the accepted kind of waste with
&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:waste&quot;&gt;&lt;code&gt;waste=*&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;waste=trash;organic;dog_excrement
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there&#39;s an ashtray attached, you can include &lt;code&gt;cigarettes&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;waste=trash;organic;dog_excrement;cigarettes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may also include
&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:location&quot;&gt;&lt;code&gt;location=*&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Leisure&lt;/h1&gt;
&lt;h2&gt;Picnic Table&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:leisure=picnic_table&quot;&gt;&lt;code&gt;leisure=picnic_table&lt;/code&gt;&lt;/a&gt;:
  specifies the feature is picnic table.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:covered&quot;&gt;&lt;code&gt;covered=*&lt;/code&gt;&lt;/a&gt; (optional):
  you may include this if it&#39;s covered, either completely or partially.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:material&quot;&gt;&lt;code&gt;material=*&lt;/code&gt;&lt;/a&gt; (optional):
  specifies the material it&#39;s made of.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Bench&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=bench&quot;&gt;&lt;code&gt;amenity=bench&lt;/code&gt;&lt;/a&gt;:
  specifies the feature is a bench.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:backrest&quot;&gt;&lt;code&gt;backrest=*&lt;/code&gt;&lt;/a&gt; (optional): specifies whether the bench has or not a backrest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:material&quot;&gt;&lt;code&gt;material=*&lt;/code&gt;&lt;/a&gt; (optional): specifies the material it&#39;s made of.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;BBQ Grill&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=bbq&quot;&gt;&lt;code&gt;amenity=bbq&lt;/code&gt;&lt;/a&gt;:
  specifies the feature is a BBQ grill.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:fuel&quot;&gt;&lt;code&gt;fuel=*&lt;/code&gt;&lt;/a&gt; (optional): the type
  of material you can use as fuel.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:covered&quot;&gt;&lt;code&gt;covered=*&lt;/code&gt;&lt;/a&gt; (optional;
  &lt;code&gt;no&lt;/code&gt;): whether it&#39;s covered, either partially or completely.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Tourism&lt;/h1&gt;
&lt;h2&gt;Viewpoint (Miradouro)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:tourism=viewpoint&quot;&gt;&lt;code&gt;tourism=viewpoint&lt;/code&gt;&lt;/a&gt;:
  specifies the feature is a viewpoint.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:name&quot;&gt;&lt;code&gt;name=*&lt;/code&gt;&lt;/a&gt; (optional?):
  specifies the name of the viewpoint.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:direction&quot;&gt;&lt;code&gt;direction=*&lt;/code&gt;&lt;/a&gt;
  (optional): the direction of the view; e.g., &lt;code&gt;0-360&lt;/code&gt; is &amp;quot;all-round&amp;quot;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Education&lt;/h1&gt;
&lt;h2&gt;Study Center&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:amenity=prep_school&quot;&gt;&lt;code&gt;amenity=prep_school&lt;/code&gt;&lt;/a&gt;
seems to be the most appropriate, but for more info see also &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Education_features&quot;&gt;&lt;em&gt;Education
features&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some other possible options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:education=centre&quot;&gt;&lt;code&gt;education=centre&lt;/code&gt;&lt;/a&gt;:
  used for specialized areas.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:office=tutoring&quot;&gt;&lt;code&gt;office=tutoring&lt;/code&gt;&lt;/a&gt;:
  looks like it&#39;s used for an office itself, not where students go to study?&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Popular Restaurant/Cafe/etc chains&lt;/h1&gt;
&lt;h2&gt;McDonald&#39;s&lt;/h2&gt;
&lt;p&gt;Tags common to all, from
&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Tag:name=McDonald&#39;s&quot;&gt;McDonald&#39;s&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;amenity=fast_food
brand:wikidata=Q38076
brand=McDonald&#39;s
cuisine=burger
name=McDonald&#39;s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I believe all McDonald&#39;s have takeaway, so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;takeaway=yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some common tags that vary:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;outdoor_seating=yes/no
smoking=outside
drive_through=yes/no
opening_hours=*
wheelchair=yes/no/...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&#39;t forget to add &lt;code&gt;addr:*=*&lt;/code&gt; and &lt;code&gt;payment:*=*&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Overpass query to find McDonald&#39;s restaurants with no &lt;code&gt;brand&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[out:json][timeout:300];
(
  nwr[&amp;quot;name&amp;quot;~&amp;quot;^mcdonald.?s&amp;quot;, i]({{bbox}});
  nwr[&amp;quot;brand&amp;quot;~&amp;quot;^mcdonald.?s&amp;quot;, i]({{bbox}});
  nwr[&amp;quot;operator&amp;quot;~&amp;quot;^mcdonald.?s&amp;quot;, i]({{bbox}});
);
out body;
&amp;gt;;
out skel qt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Montalegrense&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: &lt;code&gt;amenity=cafe&lt;/code&gt;, &lt;code&gt;amenity=bakery&lt;/code&gt;, &lt;code&gt;shop=confectionery&lt;/code&gt;, or something else?&lt;/p&gt;
&lt;h2&gt;Mixpão&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TODO&lt;/strong&gt;: &lt;code&gt;amenity=cafe&lt;/code&gt;, &lt;code&gt;amenity=bakery&lt;/code&gt;, &lt;code&gt;shop=confectionery&lt;/code&gt;, or something else?&lt;/p&gt;
&lt;h1&gt;NIF/VAT number&lt;/h1&gt;
&lt;p&gt;Use &lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Key:ref:vatin&quot;&gt;&lt;code&gt;ref:vatin&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;ref:vatin=PT123456789&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Adding turn restrictions&lt;/h1&gt;
&lt;p&gt;First, in this order, select the &amp;quot;from&amp;quot; way, the intersecting (&amp;quot;via&amp;quot;) node, and
the &amp;quot;to&amp;quot; way. Then, &amp;quot;Presets&amp;quot;&gt;&amp;quot;Relations&amp;quot;&gt;&amp;quot;Turn restriction&amp;quot;. Select the
correct restriction (e.g. &lt;code&gt;no_u_turn&lt;/code&gt;) and hit &amp;quot;New relation&amp;quot;. On the lower
left list of objects, select the &amp;quot;from&amp;quot; way and change its role to &amp;quot;from&amp;quot; (and
similarly to the &amp;quot;via&amp;quot; node and the &amp;quot;to&amp;quot; way). Hit &amp;quot;Ok&amp;quot; and you&#39;re done.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/philosophy/hard_determinism.gmi</id>
  <title type="text">Hard Determinism</title>
  <updated>2022-07-27T00:00:00Z</updated>
  <published>2020-12-30T00:00:00Z</published>
  <link href="https://siiky.srht.site/philosophy/hard_determinism.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/philosophy/hard_determinism.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Hard Determinism
@siiky
2020/12/30
2022/07/27

Thoughts on Hard Determinism, as described in Philosophy 101, by Paul Kleinman.

=&gt; ../books/list.gmi Books list

Hard determinism, as described in the book, states that everything is determined by past events. It is not clear from the book if it&#39;s meant to be applied only to the physical world, beings&#39; behaviour, or both, but it treats only human behaviour.

Applied to human behaviour, the idea holds that we have no effect in future events, because we cannot do anything other than what we&#39;re predetermined to do, essentially meaning that we have no free will.

This doesn&#39;t sit right with me. How can we believe to have free will, believe to be able to make a choice, but not actually be able to make a choice? How can it be that when I choose to eat this instead of that, or listen to this song instead of that one, I&#39;m not actually choosing, but it had been predetermined beforehand, since the beginning of time, that I would &quot;choose&quot; so?

As I write this, I wonder if I could have not written it. And, hadn&#39;t I written this, had I merely thought of writing and chosen not to, I wonder if I could have actually written it.

It&#39;s really depressing to think that we have no saying in the course of our lives; that whatever we think we do to improve them, or whatever luck or misfortune befalls us, happens simply because it must.


All the counter arguments listed on the book base themselves in the fact that making choices constitutes free will, and assume, in some way or another, that we can make choices. This boils down to &quot;hard determinism is false, therefore hard determinism is false&quot;.

However, the real problem is, I think, that we don&#39;t know if this assumption is right.


On a positive note, this idea implies that, theoretically, one could predict the future after having witnessed the present. This is true, to a certain extent, in the physical world. But what would it mean to be able to know what our &quot;choices&quot; would be in the future? What would happen? On a less positive note, again, it would certainly not be a pleasant experience in certain scenarios, similar to being diagnosed with a terminal disease.

=&gt; https://en.wikipedia.org/wiki/Hard_determinism Hard determinism (Wikipedia)
=&gt; https://en.wikipedia.org/wiki/Free_will Free will (Wikipedia)
=&gt; https://plato.stanford.edu/entries/freewill Free will (SEP)

(haven&#39;t read this SEP entry yet)
  </content>
  <content type="text/html">

&lt;h1&gt;Hard Determinism&lt;/h1&gt;
&lt;p&gt;@siiky
2020/12/30
2022/07/27&lt;/p&gt;
&lt;p&gt;Thoughts on Hard Determinism, as described in Philosophy 101, by Paul Kleinman.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../books/list.gmi&quot;&gt;Books list&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Hard determinism, as described in the book, states that everything is determined by past events. It is not clear from the book if it&#39;s meant to be applied only to the physical world, beings&#39; behaviour, or both, but it treats only human behaviour.&lt;/p&gt;
&lt;p&gt;Applied to human behaviour, the idea holds that we have no effect in future events, because we cannot do anything other than what we&#39;re predetermined to do, essentially meaning that we have no free will.&lt;/p&gt;
&lt;p&gt;This doesn&#39;t sit right with me. How can we believe to have free will, believe to be able to make a choice, but not actually be able to make a choice? How can it be that when I choose to eat this instead of that, or listen to this song instead of that one, I&#39;m not actually choosing, but it had been predetermined beforehand, since the beginning of time, that I would &amp;quot;choose&amp;quot; so?&lt;/p&gt;
&lt;p&gt;As I write this, I wonder if I could have not written it. And, hadn&#39;t I written this, had I merely thought of writing and chosen not to, I wonder if I could have actually written it.&lt;/p&gt;
&lt;p&gt;It&#39;s really depressing to think that we have no saying in the course of our lives; that whatever we think we do to improve them, or whatever luck or misfortune befalls us, happens simply because it must.&lt;/p&gt;
&lt;p&gt;All the counter arguments listed on the book base themselves in the fact that making choices constitutes free will, and assume, in some way or another, that we can make choices. This boils down to &amp;quot;hard determinism is false, therefore hard determinism is false&amp;quot;.&lt;/p&gt;
&lt;p&gt;However, the real problem is, I think, that we don&#39;t know if this assumption is right.&lt;/p&gt;
&lt;p&gt;On a positive note, this idea implies that, theoretically, one could predict the future after having witnessed the present. This is true, to a certain extent, in the physical world. But what would it mean to be able to know what our &amp;quot;choices&amp;quot; would be in the future? What would happen? On a less positive note, again, it would certainly not be a pleasant experience in certain scenarios, similar to being diagnosed with a terminal disease.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hard_determinism&quot;&gt;Hard determinism (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Free_will&quot;&gt;Free will (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plato.stanford.edu/entries/freewill&quot;&gt;Free will (SEP)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;(haven&#39;t read this SEP entry yet)&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/petri_nets/log003.gmi</id>
  <title type="text">Petri Nets Log #003</title>
  <updated>2022-07-24T00:00:00Z</updated>
  <published>2022-07-23T00:00:00Z</published>
  <link href="https://siiky.srht.site/petri_nets/log003.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/petri_nets/log003.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Petri Nets Log #003
@siiky
2022/07/23
2022/07/24

## Language

Following up with the idea of a Petri nets programming language, I now have some goals I want it to meet:

* It has to be a real programming language, not a modelling one!
* Must be textual, human-friendly, and text-editor-friendly -- I don&#39;t want to have to muck with a shitty, slow, and subpar GUI editor (as a bonus: this should be enough to make it VCS-friendly too)
* In line with the first point: transitions are written in the &quot;host&quot; programming language, and the user must be able to reuse existing code of that language
* Also in line with the first point: a program in this language must be runnable (even better if compiled) like any other program
* It must be easy to convert to a graphical representation of places, transitions, and edges between them
* It would be fucking great if transitions and nets were reusable and composable! This is possibly one of the hardest goals, so as a start I&#39;m OK with supporting only monolithic nets

Here&#39;s a starting point: places can be identified, or referenced, in a Petri net by integers:

```scm
(define-constant p0 0)
(define-constant p1 1)
(define-constant p2 2)
(define-constant p3 3)
```

There&#39;s a DSL that makes it easy to define transitions. Transitions have the associated input and output places, and a transition procedure. This procedure is user code in the host language, and is how the net model ties with &quot;normal&quot; code.

```scm
; Consumes two tokens from p0: x and y
(define-transition (t1 (x p0) (y p0))
  (p1 p2)
  ; Produces (+ x y) to p1, and #t to p2
  (values (+ x y) #t))

; Consumes res from p1 and succ? from p2
(define-transition (t2 (res p1) (succ? p2))
  (p3)
  ; The value of this expression isn&#39;t used because p3 is a &quot;terminal&quot; place
  (when succ? (print &quot;Successfully sumed: &quot; a)))
```

Finally, a Petri net is simply the set of its transitions:

```scm
(define-petri-net some-net t1 t2)
```

=&gt; somenet.png Some net

With two different macro implementations of define-transition and define-petri-net it&#39;s easy to have the same source file expand to compilable code and to some graphical representation (such as GVS, which can be converted to GraphViz, which can be converted to PNG, SVG, &amp;c, with a couple of commands).

=&gt; ../scheme/gv-dsl.gmi GVS

The detail I was most indecisive about was how to &quot;present&quot; input values to the transition procedure. Some of the alternatives I thought of were naming a single argument list to contain all of the values from all of the places; and, naming the input places and their multiplicities. Examples:

```scm
(define-transition
  (t1 args (p1 2) (p2 3) ...)
  ((p3 1) (p4 2) ...)
  ; Alternatively, use matchable
  (let ((p1-1 (car args))
        (p1-2 (cadr args))
        (p2-1 (caddr args))
        (p2-2 (cadddr args))
        ...)
    ...))

(define-transition
  (t1 (p1-args p1 2) (p2-args p2 3) ...)
  ((p3 1) (p4 2) ...)
  ; Alternatively, use matchable
  (let ((p1-1 (car p1-args))
        (p1-2 (cadr p1-args))
        (p2-1 (car p2-args))
        (p2-2 (cadr p2-args))
        ...)
    ...))
```

My reasoning was: what if you need a ton of tokens from a single place? Are you gonna enumerate them all? But then... there&#39;s this definition in the Statebox monograph of a k-bounded net, which is a net that never has more than k tokens in any place in any execution ever. And also the definition of a &quot;safe net&quot;, which is a 1-bounded net. So it&#39;s a pretty big deal to have a very limitted number of tokens in a given place.

Because of that, and to get the most ergonomic bang for the typing buck, I think the syntax presented before is a good compromise.

There was also the question of representing the tokens produced. For that I quickly convinced myself that using Scheme&#39;s values is a good choice: producing several tokens needs values, producing a single token needs no extra bureaucracy. Using the language&#39;s native features is surely the way to go.

## Fold Recursive Model

(Not the fold concept described in the last chapter of the Statebox monograph)

Tried modelling a fold (such as a sum), which is a recursive process, as a Petri net, basically the first on my own. Here&#39;s a rough graphic (haven&#39;t played with GraphViz settings yet):

=&gt; folder1.png Folder w/ inspection

Think of kons as add. The net must start execution with the initial value already in acc. The kons transition consumes the value from input and the value from acc, does its thing and produces the result into acc again. And peek consumes the value from acc and duplicates it into output and acc again. This transition could be a user-fired one, for example, to see the current state of the accumulator.

Alternatively it could consume the value from acc and not put it back. But that would need having a transition to produce a default value for acc. Example:

=&gt; folder2.png Folder w/ default acc

In this net acc may start empty, but bound must have a single token. When a token is produced to input, either kons or default-acc is enabled. If there&#39;s no token in acc, then there must be a token in bound, and in that case default-acc is enabled; if there&#39;s a token in ac, then there&#39;s no token in bound, and in that case kons is enabled. kons behaves as before. On the other hand, peek may consume the token from acc at any time, but does not put it back, and instead puts a dummy token in bound. This place bound is only used to &quot;signal&quot; that acc has no tokens, so that default-acc may move one there. default-acc simply moves an input token to acc to initialize the accumulator.


=&gt; logs.gmi Logs index
  </content>
  <content type="text/html">

&lt;h1&gt;Petri Nets Log #003&lt;/h1&gt;
&lt;p&gt;@siiky
2022/07/23
2022/07/24&lt;/p&gt;
&lt;h2&gt;Language&lt;/h2&gt;
&lt;p&gt;Following up with the idea of a Petri nets programming language, I now have some goals I want it to meet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It has to be a real programming language, not a modelling one!&lt;/li&gt;
&lt;li&gt;Must be textual, human-friendly, and text-editor-friendly -- I don&#39;t want to have to muck with a shitty, slow, and subpar GUI editor (as a bonus: this should be enough to make it VCS-friendly too)&lt;/li&gt;
&lt;li&gt;In line with the first point: transitions are written in the &amp;quot;host&amp;quot; programming language, and the user must be able to reuse existing code of that language&lt;/li&gt;
&lt;li&gt;Also in line with the first point: a program in this language must be runnable (even better if compiled) like any other program&lt;/li&gt;
&lt;li&gt;It must be easy to convert to a graphical representation of places, transitions, and edges between them&lt;/li&gt;
&lt;li&gt;It would be fucking great if transitions and nets were reusable and composable! This is possibly one of the hardest goals, so as a start I&#39;m OK with supporting only monolithic nets&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Here&#39;s a starting point: places can be identified, or referenced, in a Petri net by integers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define-constant p0 0)
(define-constant p1 1)
(define-constant p2 2)
(define-constant p3 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s a DSL that makes it easy to define transitions. Transitions have the associated input and output places, and a transition procedure. This procedure is user code in the host language, and is how the net model ties with &amp;quot;normal&amp;quot; code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;; Consumes two tokens from p0: x and y
(define-transition (t1 (x p0) (y p0))
  (p1 p2)
  ; Produces (+ x y) to p1, and #t to p2
  (values (+ x y) #t))

; Consumes res from p1 and succ? from p2
(define-transition (t2 (res p1) (succ? p2))
  (p3)
  ; The value of this expression isn&#39;t used because p3 is a &amp;quot;terminal&amp;quot; place
  (when succ? (print &amp;quot;Successfully sumed: &amp;quot; a)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, a Petri net is simply the set of its transitions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define-petri-net some-net t1 t2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;somenet.png&quot; alt=&quot;Some net&quot; /&gt;&lt;/p&gt;
&lt;p&gt;With two different macro implementations of define-transition and define-petri-net it&#39;s easy to have the same source file expand to compilable code and to some graphical representation (such as GVS, which can be converted to GraphViz, which can be converted to PNG, SVG, &amp;amp;c, with a couple of commands).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../scheme/gv-dsl.gmi&quot;&gt;GVS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The detail I was most indecisive about was how to &amp;quot;present&amp;quot; input values to the transition procedure. Some of the alternatives I thought of were naming a single argument list to contain all of the values from all of the places; and, naming the input places and their multiplicities. Examples:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define-transition
  (t1 args (p1 2) (p2 3) ...)
  ((p3 1) (p4 2) ...)
  ; Alternatively, use matchable
  (let ((p1-1 (car args))
        (p1-2 (cadr args))
        (p2-1 (caddr args))
        (p2-2 (cadddr args))
        ...)
    ...))

(define-transition
  (t1 (p1-args p1 2) (p2-args p2 3) ...)
  ((p3 1) (p4 2) ...)
  ; Alternatively, use matchable
  (let ((p1-1 (car p1-args))
        (p1-2 (cadr p1-args))
        (p2-1 (car p2-args))
        (p2-2 (cadr p2-args))
        ...)
    ...))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My reasoning was: what if you need a ton of tokens from a single place? Are you gonna enumerate them all? But then... there&#39;s this definition in the Statebox monograph of a k-bounded net, which is a net that never has more than k tokens in any place in any execution ever. And also the definition of a &amp;quot;safe net&amp;quot;, which is a 1-bounded net. So it&#39;s a pretty big deal to have a very limitted number of tokens in a given place.&lt;/p&gt;
&lt;p&gt;Because of that, and to get the most ergonomic bang for the typing buck, I think the syntax presented before is a good compromise.&lt;/p&gt;
&lt;p&gt;There was also the question of representing the tokens produced. For that I quickly convinced myself that using Scheme&#39;s values is a good choice: producing several tokens needs values, producing a single token needs no extra bureaucracy. Using the language&#39;s native features is surely the way to go.&lt;/p&gt;
&lt;h2&gt;Fold Recursive Model&lt;/h2&gt;
&lt;p&gt;(Not the fold concept described in the last chapter of the Statebox monograph)&lt;/p&gt;
&lt;p&gt;Tried modelling a fold (such as a sum), which is a recursive process, as a Petri net, basically the first on my own. Here&#39;s a rough graphic (haven&#39;t played with GraphViz settings yet):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;folder1.png&quot; alt=&quot;Folder w/ inspection&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Think of kons as add. The net must start execution with the initial value already in acc. The kons transition consumes the value from input and the value from acc, does its thing and produces the result into acc again. And peek consumes the value from acc and duplicates it into output and acc again. This transition could be a user-fired one, for example, to see the current state of the accumulator.&lt;/p&gt;
&lt;p&gt;Alternatively it could consume the value from acc and not put it back. But that would need having a transition to produce a default value for acc. Example:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;folder2.png&quot; alt=&quot;Folder w/ default acc&quot; /&gt;&lt;/p&gt;
&lt;p&gt;In this net acc may start empty, but bound must have a single token. When a token is produced to input, either kons or default-acc is enabled. If there&#39;s no token in acc, then there must be a token in bound, and in that case default-acc is enabled; if there&#39;s a token in ac, then there&#39;s no token in bound, and in that case kons is enabled. kons behaves as before. On the other hand, peek may consume the token from acc at any time, but does not put it back, and instead puts a dummy token in bound. This place bound is only used to &amp;quot;signal&amp;quot; that acc has no tokens, so that default-acc may move one there. default-acc simply moves an input token to acc to initialize the accumulator.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;logs.gmi&quot;&gt;Logs index&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/projects/ipfs.gmi</id>
  <title type="text">ipfs.scm</title>
  <updated>2022-07-24T00:00:00Z</updated>
  <published>2022-07-23T00:00:00Z</published>
  <link href="https://siiky.srht.site/projects/ipfs.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/projects/ipfs.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# ipfs.scm
@siiky
2022/07/23
2022/07/24

I wrote a CHICKEN Scheme egg to control a Kubo node through its RPC API.

=&gt; https://git.sr.ht/~siiky/ipfs.scm Repository
=&gt; https://wiki.call-cc.org/eggref/5/ipfs Documentation

I&#39;m really glad how it turned out. I think the list of endpoints along with their arguments is very easy to maintain (easily the most tedious job of such a library), and more importantly I think it&#39;s very easy to use also.

A new version of Kubo was released some day of this past week, and today I spent a few hours updating the egg. I received nice comments from teiresias and a couple of improvements. That and the fact that they&#39;re using the egg made today that much better.

=&gt; https://github.com/ipfs/kubo/releases/tag/v0.14.0 Kubo v0.14.0 release notes
=&gt; https://git.sr.ht/~siiky/ipfs.scm/commit/0.0.4 ipfs.scm v0.0.4
=&gt; gemini://the-brannons.com teiresias


What prompted me to write this was Petri nets log #003, where I write about languages convertable to other target languages. The idea didn&#39;t come to me while writing that log but because of this egg. After writing it and getting something already usable I thought of using IPFS where CHICKEN didn&#39;t fit: some mpv hacks with its Lua interface. &quot;Why not write an ipfs.lua?&quot;, thought I. And so I did, the following couple of hours. I progressed along well, until I reached the point where only the endpoints were missing. Of course, I didn&#39;t want to write them by hand yet again, screw that! Instead, I wrote a different version of export-rpc-call and voila: a Lua file with all the endpoints defined, ready to be used!

=&gt; ../petri_nets/log003.gmi Petri Nets Log #003
=&gt; https://git.sr.ht/~siiky/ipfs.lua ipfs.lua

Have to think what to do about the recent rename someday...
  </content>
  <content type="text/html">

&lt;h1&gt;ipfs.scm&lt;/h1&gt;
&lt;p&gt;@siiky
2022/07/23
2022/07/24&lt;/p&gt;
&lt;p&gt;I wrote a CHICKEN Scheme egg to control a Kubo node through its RPC API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~siiky/ipfs.scm&quot;&gt;Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.call-cc.org/eggref/5/ipfs&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I&#39;m really glad how it turned out. I think the list of endpoints along with their arguments is very easy to maintain (easily the most tedious job of such a library), and more importantly I think it&#39;s very easy to use also.&lt;/p&gt;
&lt;p&gt;A new version of Kubo was released some day of this past week, and today I spent a few hours updating the egg. I received nice comments from teiresias and a couple of improvements. That and the fact that they&#39;re using the egg made today that much better.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ipfs/kubo/releases/tag/v0.14.0&quot;&gt;Kubo v0.14.0 release notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~siiky/ipfs.scm/commit/0.0.4&quot;&gt;ipfs.scm v0.0.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;gemini://the-brannons.com&quot;&gt;teiresias&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;What prompted me to write this was Petri nets log #003, where I write about languages convertable to other target languages. The idea didn&#39;t come to me while writing that log but because of this egg. After writing it and getting something already usable I thought of using IPFS where CHICKEN didn&#39;t fit: some mpv hacks with its Lua interface. &amp;quot;Why not write an ipfs.lua?&amp;quot;, thought I. And so I did, the following couple of hours. I progressed along well, until I reached the point where only the endpoints were missing. Of course, I didn&#39;t want to write them by hand yet again, screw that! Instead, I wrote a different version of export-rpc-call and voila: a Lua file with all the endpoints defined, ready to be used!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../petri_nets/log003.gmi&quot;&gt;Petri Nets Log #003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://git.sr.ht/~siiky/ipfs.lua&quot;&gt;ipfs.lua&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Have to think what to do about the recent rename someday...&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/care/ipfs.gmi</id>
  <title type="text">IPFS Quickstart</title>
  <updated>2022-07-24T00:00:00Z</updated>
  <published>2022-04-05T00:00:00Z</published>
  <link href="https://siiky.srht.site/care/ipfs.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/care/ipfs.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# IPFS Quickstart
@siiky
2022/04/05
2022/07/24

This is just a short pointer on how to use IPFS to access the care list, for anyone who doesn&#39;t know and/or isn&#39;t interested in learning more about it right now. To learn more you should go to the official website or search around.

=&gt; list.gmi Care list
=&gt; https://ipfs.io

If you don&#39;t want to install an IPFS node on your own computer(s) (I would highly recommend it) the way to access the network with just an HTTP browser is to use a public gateway.

If you install the IPFS browser companion, accessing IPFS URIs is just a matter of copy-pasting ipfs://XYZ or ipns://XYZ into your browser&#39;s bar, the plugin does the rest. I would recommend it if you&#39;re going to use IPFS semi-regularly.

=&gt; https://docs.ipfs.io/install/ipfs-companion

Otherwise, this is how you do it manually: from ipfs://XYZ you copy the XYZ and go to https://XYZ.ipfs.dweb.link. If the URI has a ?filename=smth.txt query string, you should append it to the URI too: https://XYZ.ipfs.dweb.link?filename=smth.txt.

Last note: dweb.link is only one of the several public HTTP gateways available (and I believe it&#39;s operated by Protocol Labs, the company behind IPFS). For others check this list:

=&gt; https://ipfs.github.io/public-gateway-checker
  </content>
  <content type="text/html">

&lt;h1&gt;IPFS Quickstart&lt;/h1&gt;
&lt;p&gt;@siiky
2022/04/05
2022/07/24&lt;/p&gt;
&lt;p&gt;This is just a short pointer on how to use IPFS to access the care list, for anyone who doesn&#39;t know and/or isn&#39;t interested in learning more about it right now. To learn more you should go to the official website or search around.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;list.gmi&quot;&gt;Care list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ipfs.io&quot;&gt;https://ipfs.io&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;If you don&#39;t want to install an IPFS node on your own computer(s) (I would highly recommend it) the way to access the network with just an HTTP browser is to use a public gateway.&lt;/p&gt;
&lt;p&gt;If you install the IPFS browser companion, accessing IPFS URIs is just a matter of copy-pasting ipfs://XYZ or ipns://XYZ into your browser&#39;s bar, the plugin does the rest. I would recommend it if you&#39;re going to use IPFS semi-regularly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.ipfs.io/install/ipfs-companion&quot;&gt;https://docs.ipfs.io/install/ipfs-companion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Otherwise, this is how you do it manually: from ipfs://XYZ you copy the XYZ and go to https://XYZ.ipfs.dweb.link. If the URI has a ?filename=smth.txt query string, you should append it to the URI too: https://XYZ.ipfs.dweb.link?filename=smth.txt.&lt;/p&gt;
&lt;p&gt;Last note: dweb.link is only one of the several public HTTP gateways available (and I believe it&#39;s operated by Protocol Labs, the company behind IPFS). For others check this list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ipfs.github.io/public-gateway-checker&quot;&gt;https://ipfs.github.io/public-gateway-checker&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/petri_nets/log002.gmi</id>
  <title type="text">Petri Nets Log #002</title>
  <updated>2022-07-23T00:00:00Z</updated>
  <published>2022-06-23T00:00:00Z</published>
  <link href="https://siiky.srht.site/petri_nets/log002.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/petri_nets/log002.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Petri Nets Log #002
@siiky
2022/06/23
2022/07/23

Unfortunately there are no uppercase subscript letters? When you see &quot;_N&quot; imagine &quot;N&quot; is in subscript. And I&#39;m actually finishing writing this almost exactly one month later... :/ Some details of what I thought at the time escape me.


Finished reading Ch. 3 &amp; 4 some weeks ago.

On Ch. 3 there wasn&#39;t that much new to me -- notation was slightly different from what I was used to, but in general it wasn&#39;t complicated to follow. There was terminology I didn&#39;t remember too, but mostly just had to go back and read my notes from University.

Ch. 4, however, was an interesting one. They define two categories: one of Petri nets (called Petri), and another of Petri net executions.

with nets as objects; and another of Petri net executions of a given net (called F(N), with some Petri net N, and a fancy calligraphic F), with markings as objects, and transitions as morphisms.

## Petri

The category of Petri nets as nets as objects (obviously), and morphisms are... weird.

A morphism N → M of the category Petri is a pair 〈f, g〉 where:

* f is a function between the transitions of N and those of M
* g is a multiset homomorphism between the markings(?) of both nets

Additionally, these morphisms must preserve a couple of properties:

* °(-)_M · f = g · °(-)_N
* (-)°_M · f = g · (-)°_N

I can&#39;t explain these in words right now, so... exercise for the reader!

But I&#39;ll try anyway with an example: suppose that f transforms transitions in such a way that they consume and produce double the amount of tokens, and that g doubles the amount of tokens of each place; then, if a particular place p of the net N has 2 tokens, and a transition t of the net N that consumes 2 tokens from p, there&#39;s an &quot;equivalent&quot; place p in the net M with 4 tokens, and an &quot;equivalent&quot; transition t in the net M that consumes 4 tokens from p.

Altogether, I think these form a sort of super/subnet relation between nets, that visually looks a lot like super/subgraphs.

The category Petri can be restricted to a subcategory (Petri_G), which is the one used in practice, but I think the details aren&#39;t relevant for this post (it has to do with the g, if you wish to know).

## Executions

The possible executions of a given net form also a category if you take the markings as objects and the transitions as morphisms.

Markings are represented as products of places. For example, if your net has places p1 and p2, a marking of 3 tokens in p1 and 2 tokens in p2 could be represented as p1·p1·p1·p2·p2. This representation isn&#39;t unique (and cannot be unique due to math reasons), since · is commutative -- p2·p1·p2·p1·p1 is another possible representation of the same marking.

In the formal definition of Petri nets, a token is a token, no matter if it was produced before or after another token in the same place. In other words, tokens of a place are indistinguishable from each other. However, when programming, it usually matters what the value of a thing is. In general, a function applied to two different values will compute two different values as well.

Magics of mathematics to the rescue! You can visualize the evolution of a net as a string diagram! Really cool.

=&gt; https://en.wikipedia.org/wiki/String_diagram String diagrams
=&gt; https://invidious.snopyta.org/watch?v=LY5H9uY7Gns ACT 2020 Tutorial: Introduction to string diagrams (Fabrizio Genovese)

And even cooler because it brings an important detail in. Tokens in this graphical representation are not confused with each other: there&#39;s clearly a string (hence the name) connecting a certain value in a certain point in time to all its &quot;ancestors&quot;, i.e., the order of firings and which tokens were consumed and produced to result in that value.

And even cooler cooler is that, while you can now tell tokens apart, nobody tells you what order they have to be consumed in! This may or may not be something useful, but I think it&#39;s a neat detail to keep in mind. An implementation may provide different &quot;token choosing&quot; abilities: queues, stacks, sets (random), with or without priorities (e.g. you may want to always consume the smallest integer of a place), &amp;c.

## Implementation

About this time I started wondering... Are there Petri net implementations? What are they used for, modelling or programming? Strictly graphical or textual? Easy to work with? VCS-friendly?

Statebox supposedly had a prototype implementation that is no more. At least I can&#39;t find it anymore and the people that I know knew about it don&#39;t know about it no more either. I think they&#39;re working on something new, but not publicly.

So wondering I continued, thinking of a possible language. I don&#39;t have anything concrete yet
=&gt; https://xkcd.com/297 but you can be sure there&#39;ll be parens...


=&gt; logs.gmi Logs index
  </content>
  <content type="text/html">

&lt;h1&gt;Petri Nets Log #002&lt;/h1&gt;
&lt;p&gt;@siiky
2022/06/23
2022/07/23&lt;/p&gt;
&lt;p&gt;Unfortunately there are no uppercase subscript letters? When you see &amp;quot;_N&amp;quot; imagine &amp;quot;N&amp;quot; is in subscript. And I&#39;m actually finishing writing this almost exactly one month later... :/ Some details of what I thought at the time escape me.&lt;/p&gt;
&lt;p&gt;Finished reading Ch. 3 &amp;amp; 4 some weeks ago.&lt;/p&gt;
&lt;p&gt;On Ch. 3 there wasn&#39;t that much new to me -- notation was slightly different from what I was used to, but in general it wasn&#39;t complicated to follow. There was terminology I didn&#39;t remember too, but mostly just had to go back and read my notes from University.&lt;/p&gt;
&lt;p&gt;Ch. 4, however, was an interesting one. They define two categories: one of Petri nets (called Petri), and another of Petri net executions.&lt;/p&gt;
&lt;p&gt;with nets as objects; and another of Petri net executions of a given net (called F(N), with some Petri net N, and a fancy calligraphic F), with markings as objects, and transitions as morphisms.&lt;/p&gt;
&lt;h2&gt;Petri&lt;/h2&gt;
&lt;p&gt;The category of Petri nets as nets as objects (obviously), and morphisms are... weird.&lt;/p&gt;
&lt;p&gt;A morphism N → M of the category Petri is a pair 〈f, g〉 where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;f is a function between the transitions of N and those of M&lt;/li&gt;
&lt;li&gt;g is a multiset homomorphism between the markings(?) of both nets&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Additionally, these morphisms must preserve a couple of properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;°(-)&lt;em&gt;M · f = g · °(-)&lt;/em&gt;N&lt;/li&gt;
&lt;li&gt;(-)°&lt;em&gt;M · f = g · (-)°&lt;/em&gt;N&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I can&#39;t explain these in words right now, so... exercise for the reader!&lt;/p&gt;
&lt;p&gt;But I&#39;ll try anyway with an example: suppose that f transforms transitions in such a way that they consume and produce double the amount of tokens, and that g doubles the amount of tokens of each place; then, if a particular place p of the net N has 2 tokens, and a transition t of the net N that consumes 2 tokens from p, there&#39;s an &amp;quot;equivalent&amp;quot; place p in the net M with 4 tokens, and an &amp;quot;equivalent&amp;quot; transition t in the net M that consumes 4 tokens from p.&lt;/p&gt;
&lt;p&gt;Altogether, I think these form a sort of super/subnet relation between nets, that visually looks a lot like super/subgraphs.&lt;/p&gt;
&lt;p&gt;The category Petri can be restricted to a subcategory (Petri_G), which is the one used in practice, but I think the details aren&#39;t relevant for this post (it has to do with the g, if you wish to know).&lt;/p&gt;
&lt;h2&gt;Executions&lt;/h2&gt;
&lt;p&gt;The possible executions of a given net form also a category if you take the markings as objects and the transitions as morphisms.&lt;/p&gt;
&lt;p&gt;Markings are represented as products of places. For example, if your net has places p1 and p2, a marking of 3 tokens in p1 and 2 tokens in p2 could be represented as p1·p1·p1·p2·p2. This representation isn&#39;t unique (and cannot be unique due to math reasons), since · is commutative -- p2·p1·p2·p1·p1 is another possible representation of the same marking.&lt;/p&gt;
&lt;p&gt;In the formal definition of Petri nets, a token is a token, no matter if it was produced before or after another token in the same place. In other words, tokens of a place are indistinguishable from each other. However, when programming, it usually matters what the value of a thing is. In general, a function applied to two different values will compute two different values as well.&lt;/p&gt;
&lt;p&gt;Magics of mathematics to the rescue! You can visualize the evolution of a net as a string diagram! Really cool.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/String_diagram&quot;&gt;String diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://invidious.snopyta.org/watch?v=LY5H9uY7Gns&quot;&gt;ACT 2020 Tutorial: Introduction to string diagrams (Fabrizio Genovese)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;And even cooler because it brings an important detail in. Tokens in this graphical representation are not confused with each other: there&#39;s clearly a string (hence the name) connecting a certain value in a certain point in time to all its &amp;quot;ancestors&amp;quot;, i.e., the order of firings and which tokens were consumed and produced to result in that value.&lt;/p&gt;
&lt;p&gt;And even cooler cooler is that, while you can now tell tokens apart, nobody tells you what order they have to be consumed in! This may or may not be something useful, but I think it&#39;s a neat detail to keep in mind. An implementation may provide different &amp;quot;token choosing&amp;quot; abilities: queues, stacks, sets (random), with or without priorities (e.g. you may want to always consume the smallest integer of a place), &amp;amp;c.&lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;About this time I started wondering... Are there Petri net implementations? What are they used for, modelling or programming? Strictly graphical or textual? Easy to work with? VCS-friendly?&lt;/p&gt;
&lt;p&gt;Statebox supposedly had a prototype implementation that is no more. At least I can&#39;t find it anymore and the people that I know knew about it don&#39;t know about it no more either. I think they&#39;re working on something new, but not publicly.&lt;/p&gt;
&lt;p&gt;So wondering I continued, thinking of a possible language. I don&#39;t have anything concrete yet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://xkcd.com/297&quot;&gt;but you can be sure there&#39;ll be parens...&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;logs.gmi&quot;&gt;Logs index&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/petri_nets/logs.gmi</id>
  <title type="text">Petri Nets Logs</title>
  <updated>2022-07-23T00:00:00Z</updated>
  <published>2022-05-16T00:00:00Z</published>
  <link href="https://siiky.srht.site/petri_nets/logs.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/petri_nets/logs.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Petri Nets Logs
@siiky
2022/05/16
2022/07/23

This is the list of logs I wrote about my journey studying Petri nets. I&#39;ll try to make this a sort of regular log with updates, my comments/opinions, and maybe notes. One of these days I should start combing through and arranging my notes to publish them.

=&gt; log001.gmi #001
=&gt; log002.gmi #002
=&gt; log003.gmi #003
=&gt; log004.gmi #004
  </content>
  <content type="text/html">

&lt;h1&gt;Petri Nets Logs&lt;/h1&gt;
&lt;p&gt;@siiky
2022/05/16
2022/07/23&lt;/p&gt;
&lt;p&gt;This is the list of logs I wrote about my journey studying Petri nets. I&#39;ll try to make this a sort of regular log with updates, my comments/opinions, and maybe notes. One of these days I should start combing through and arranging my notes to publish them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;log001.gmi&quot;&gt;#001&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;log002.gmi&quot;&gt;#002&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;log003.gmi&quot;&gt;#003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;log004.gmi&quot;&gt;#004&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/petri_nets/log001.gmi</id>
  <title type="text">Petri Nets Log #001</title>
  <updated>2022-07-23T00:00:00Z</updated>
  <published>2022-05-16T00:00:00Z</published>
  <link href="https://siiky.srht.site/petri_nets/log001.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/petri_nets/log001.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Petri Nets Log #001
@siiky
2022/05/16
2022/07/23

I started studying Petri nets a few weeks ago, reading the Statebox monograph, and just finished today reading Ch. 2, the formalization of Petri nets and useful definitions.

=&gt; https://en.wikipedia.org/wiki/Petri_net Petri nets
=&gt; https://statebox.org Statebox site
=&gt; https://statebox.org/research/publications/monograph Statebox monograph
=&gt; https://arxiv.org/abs/1906.07629 Statebox monograph (ArXiv)

At first I didn&#39;t understand the point of having places (seemingly analogous to &quot;states&quot; in more common automata theories) and transitions (analogous to arrows in more common automata theories) as disjunctive sets of nodes of a graph -- other than the obvious advantage of it being easier to specify several inputs/outputs of a transition. Plus, there&#39;s no current &quot;state&quot; (the mentioned places), very different from other more common automata theories! Not only that, but what they call a &quot;state&quot; is the number of tokens in each place -- what?

Once I saw Fig. 2.8 and 2.9, however, it clicked: a transition is enabled (can fire, &quot;execute&quot;) if its input tokens can be satisfied by all its input places. So what&#39;s currently a valid &quot;step&quot; in the system is determined by the number of tokens in each place, just like the &quot;current state&quot; of other automata determines the valid next transitions. And, several transitions may execute simultaneously (as long as their executions don&#39;t prevent each other)!

Yesterday and today were good days in this regard. I now understand how Petri nets can represent concurrent/parallel behaviour, because transitions are like independent &quot;processes&quot; (a la Erlang); and that places are more like variables, or resources, possibly shared between many transitions (processes).

There&#39;s a site referenced right at the end of Ch. 2 where you can read the basics of the basics and play with some simple nets. Unfortunately you can only play with already defined ones, you can&#39;t define new ones or change those of the website.

=&gt; https://petrinet.org


=&gt; logs.gmi Logs index
  </content>
  <content type="text/html">

&lt;h1&gt;Petri Nets Log #001&lt;/h1&gt;
&lt;p&gt;@siiky
2022/05/16
2022/07/23&lt;/p&gt;
&lt;p&gt;I started studying Petri nets a few weeks ago, reading the Statebox monograph, and just finished today reading Ch. 2, the formalization of Petri nets and useful definitions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Petri_net&quot;&gt;Petri nets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://statebox.org&quot;&gt;Statebox site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://statebox.org/research/publications/monograph&quot;&gt;Statebox monograph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1906.07629&quot;&gt;Statebox monograph (ArXiv)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;At first I didn&#39;t understand the point of having places (seemingly analogous to &amp;quot;states&amp;quot; in more common automata theories) and transitions (analogous to arrows in more common automata theories) as disjunctive sets of nodes of a graph -- other than the obvious advantage of it being easier to specify several inputs/outputs of a transition. Plus, there&#39;s no current &amp;quot;state&amp;quot; (the mentioned places), very different from other more common automata theories! Not only that, but what they call a &amp;quot;state&amp;quot; is the number of tokens in each place -- what?&lt;/p&gt;
&lt;p&gt;Once I saw Fig. 2.8 and 2.9, however, it clicked: a transition is enabled (can fire, &amp;quot;execute&amp;quot;) if its input tokens can be satisfied by all its input places. So what&#39;s currently a valid &amp;quot;step&amp;quot; in the system is determined by the number of tokens in each place, just like the &amp;quot;current state&amp;quot; of other automata determines the valid next transitions. And, several transitions may execute simultaneously (as long as their executions don&#39;t prevent each other)!&lt;/p&gt;
&lt;p&gt;Yesterday and today were good days in this regard. I now understand how Petri nets can represent concurrent/parallel behaviour, because transitions are like independent &amp;quot;processes&amp;quot; (a la Erlang); and that places are more like variables, or resources, possibly shared between many transitions (processes).&lt;/p&gt;
&lt;p&gt;There&#39;s a site referenced right at the end of Ch. 2 where you can read the basics of the basics and play with some simple nets. Unfortunately you can only play with already defined ones, you can&#39;t define new ones or change those of the website.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://petrinet.org&quot;&gt;https://petrinet.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;logs.gmi&quot;&gt;Logs index&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/psychology/links.gmi</id>
  <title type="text">Psychology Links</title>
  <updated>2022-07-15T00:00:00Z</updated>
  <published>2020-02-20T00:00:00Z</published>
  <link href="https://siiky.srht.site/psychology/links.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/psychology/links.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Psychology Links
@siiky
2020/02/20
2022/07/15

## Terapia de Divã (Portuguese)

Interviews to Portuguese psychologists on various subjects.

=&gt; https://www.comunidadeculturaearte.com/tag/terapia-de-diva
=&gt; https://www.comunidadeculturaearte.com/tag/terapia-do-diva

## Wikipedia

Wikipedia, of course!

=&gt; https://en.wikipedia.org/wiki/Psychology
  </content>
  <content type="text/html">

&lt;h1&gt;Psychology Links&lt;/h1&gt;
&lt;p&gt;@siiky
2020/02/20
2022/07/15&lt;/p&gt;
&lt;h2&gt;Terapia de Divã (Portuguese)&lt;/h2&gt;
&lt;p&gt;Interviews to Portuguese psychologists on various subjects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.comunidadeculturaearte.com/tag/terapia-de-diva&quot;&gt;https://www.comunidadeculturaearte.com/tag/terapia-de-diva&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.comunidadeculturaearte.com/tag/terapia-do-diva&quot;&gt;https://www.comunidadeculturaearte.com/tag/terapia-do-diva&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Wikipedia&lt;/h2&gt;
&lt;p&gt;Wikipedia, of course!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Psychology&quot;&gt;https://en.wikipedia.org/wiki/Psychology&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/philosophy/links.gmi</id>
  <title type="text">Philosophy Links</title>
  <updated>2022-07-15T00:00:00Z</updated>
  <published>2020-02-20T00:00:00Z</published>
  <link href="https://siiky.srht.site/philosophy/links.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/philosophy/links.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Philosophy Links
@siiky
2020/02/20
2022/07/15

## Stanford Encyclopedia of Philosophy (SEP)

Lots of detailed and in-depth articles about all sorts of topics. The RSS feed is for updates to articles.

=&gt; https://plato.stanford.edu/contents.html
=&gt; https://plato.stanford.edu/rss/sep.xml

## Internet Encyclopedia of Philosophy (IEP)

Another site full of in-depth articles, similar to SEP.

=&gt; https://iep.utm.edu

## Wikipedia

Wikipedia, of course!

=&gt; https://en.wikipedia.org/wiki/Philosophy

## Wikiversity School of Philosophy

Wikiversity pages on philosophy. The main page has a sizeable list of books. The resources page has links to some big philosophy sites, such as SEP, IEP, &amp;c, and to some freely available works.

=&gt; https://en.wikiversity.org/wiki/School:Philosophy
=&gt; https://en.wikiversity.org/wiki/Philosophy/Resources
  </content>
  <content type="text/html">

&lt;h1&gt;Philosophy Links&lt;/h1&gt;
&lt;p&gt;@siiky
2020/02/20
2022/07/15&lt;/p&gt;
&lt;h2&gt;Stanford Encyclopedia of Philosophy (SEP)&lt;/h2&gt;
&lt;p&gt;Lots of detailed and in-depth articles about all sorts of topics. The RSS feed is for updates to articles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plato.stanford.edu/contents.html&quot;&gt;https://plato.stanford.edu/contents.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plato.stanford.edu/rss/sep.xml&quot;&gt;https://plato.stanford.edu/rss/sep.xml&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Internet Encyclopedia of Philosophy (IEP)&lt;/h2&gt;
&lt;p&gt;Another site full of in-depth articles, similar to SEP.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://iep.utm.edu&quot;&gt;https://iep.utm.edu&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Wikipedia&lt;/h2&gt;
&lt;p&gt;Wikipedia, of course!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Philosophy&quot;&gt;https://en.wikipedia.org/wiki/Philosophy&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Wikiversity School of Philosophy&lt;/h2&gt;
&lt;p&gt;Wikiversity pages on philosophy. The main page has a sizeable list of books. The resources page has links to some big philosophy sites, such as SEP, IEP, &amp;amp;c, and to some freely available works.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikiversity.org/wiki/School:Philosophy&quot;&gt;https://en.wikiversity.org/wiki/School:Philosophy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikiversity.org/wiki/Philosophy/Resources&quot;&gt;https://en.wikiversity.org/wiki/Philosophy/Resources&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/algebra/groups.gmi</id>
  <title type="text">Groups</title>
  <updated>2022-07-15T00:00:00Z</updated>
  <published>2020-02-20T00:00:00Z</published>
  <link href="https://siiky.srht.site/algebra/groups.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/algebra/groups.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Groups
@siiky
2020/02/20
2022/07/15

This post is about groups (whouldathunkit).

=&gt; https://en.wikipedia.org/wiki/Group_(mathematics)

# Conventions/Notation

* ∀ v: P means P is true for all possible v
* ∃ v: P means P is true for at least one v
* ∃¹ v: P means P is true for exactly one v
* ∀ v1: ∀ v2: P will be abbreviated as ∀ v1, v2: P

Sets are written as its elements surrounded by brackets. For example, ∅ is the empty set and { a, b, c } is a set with the elements a, b and c. Sets comprehension will be written as { expr : vars, restrictions } and the cardinal of a set will be written as #S.

N is the set of natural numbers (w/o zero), N₀ the set of natural numbers (w/ zero), Z the set of integers, and R the set of real numbers.

The modulo operator will be recurrent throughout this post. A couple of examples:

* 4 mod 5 ≣ 9 mod 5 ≣ 4
* 5 mod 2 ≣ 1

This operator is called % in C, modulo in Scheme and mod in Haskell.

A useful definition: p ≣ q (mod n) ⇔ p mod n ≣ q mod n.

&quot;|&quot; will be used to mean &quot;divides&quot;: &quot;a | b&quot; means &quot;a divides b&quot;, &quot;b is a multiple of a&quot;, or, with modulo, &quot;a | b ⇔ b ≣ 0 (mod a)&quot;.

We will be needing the concept of a &quot;Congruential Equivalence Class&quot; later on. They are written as [m]ₙ (∀ n ∈ N, m ∈ Z) and are defined as [m]ₙ = { x ∈ Z : x ≣ m (mod n) }.

Depending on context, + and ∗ will either be the usual addition and multiplication of numbers, or addition and multiplication of classes.

Addition and multiplication of classes are defined as [p]ₙ + [q]ₙ = [p+q]ₙ and [p]ₙ ∗ [q]ₙ = [p∗q]ₙ. Example: 2+2=4, [2]₃ + [1]₃ = [2+1]₃ = [0]₃.

# What is a Group?!

## In general

A group is just a pair (S, O), where S is a set and O is a binary operation on S (i.e., O : S ∗ S → S) with the following required properties:

* (R1) Associativity: ∀ a, b, c ∈ S: O(a, O(b, c)) = O(O(a, b), c)
* (R2) Identity: ∃¹ id ∈ S: ∀ a ∈ S: O(a, id) = O(id, a) = a
* (R3) Inverse: ∀ a ∈ S: ∃¹ a&#39; ∈ S: O(a, a&#39;) = O(a&#39;, a) = id

From (R2) and (R3) we can conclude that id always has inverse, itself.

There is one extra optional property:

* (R4) Commutativity: ∀ a, b ∈ S: O(a, b) = O(b, a)

A group with a commutative operation is called a commutative group or an abelian group.

Given G = (G, O) a group, G will be used to refer both to the group itself and its associated set.

A group G is said to be infinite if #G is infinite, and finite if #G is finite.

That is the generic definition. We will focus on groups with integer sets and + or ∗ as the operation, however.

## Integers

When the operation is + we call the identity element &quot;null element&quot; and represent it with 0. When the operation is ∗ we call the identity element &quot;unity element&quot; and represent it with 1.

When the operation is + we call the inverse of an element a its symmetric and represent it as -a. When the operation is ∗ we call the inverse of an element a its inverse and represent it as a⁻¹.

### (N₀, +)

N₀ is the set of natural numbers (w/ zero), and + is the usual addition on natural numbers. Is it a group?

* ∀ a, b, c ∈ N₀: a + (b + c) = (a + b) + c
* 0 is the identity of the group, because ∀ a ∈ N₀: a + 0 = 0 + a = a
* ∀ a, b ∈ N: a + b ≠ 0 (Note that N = N₀∖{0})

N₀ with + does not satisfy property R3, so it is not a group.

### (Z, +)

Z is the set of integers, and + is the usual addition on integers. Is it a group?

* ∀ a, b, c ∈ Z: a + (b + c) = (a + b) + c
* 0 is the identity of the group, because ∀ a ∈ Z: a + 0 = 0 + a = a
* ∀ a ∈ Z: ∃¹ a&#39; ∈ Z: a + a&#39; = 0

Z satisfies all 3 requirements so it is a group. We also know that addition is commutative, so Z is an abelian group (see property R4).

### Other examples

* (R, +), where R is the set of real numbers, is a group
* (R∖{0}, ∗) is also a group
* (R, ∗) is not a group, because 0 has no inverse (R3)
* (N, +) is not a group, because there is no identity and no inverse (R2 and R3)
* (N, ∗) is not a group, because there is no inverse (R3)
* (Z∖{0}, ∗) is not a group, because other than 1 and -1, no element has inverse (R3)

# What&#39;s next?

Some more definitions.

## Subgroup

Given a group G, H is called a subgroup of G if H is contained in G and it is also a group, and we write H ≤ G. Examples:

* ∀ (G, +) group: (G, +) ≤ (G, +)
* Trivial Subgroup: ∀ (G, +) group: ({0}, +) ≤ (G, +)
* (2Z, +) ≤ (Z, +)

A subgroup H of a group G that is not G itself (H ≠ G, or H ⊂ G) is called a &quot;Proper Subgroup&quot;, and we write H &lt; G. Examples:

* Trivial Subgroup: ∀ (G, +) group: ({0}, +) &lt; (G, +)
* (2Z, +) &lt; (Z, +)

## Multiples/Powers of an element

Given an element a of an additive group, a+...+a (n times) can be written as n∗a. Special case: 0∗a = 0.

Given an element a of a multiplicative group, a∗...∗a (n times) can be written as aⁿ. Special case: a⁰ = 1.

For negative n, n∗a = -((-n)∗a) = (-n)∗(-a); and aⁿ = (a⁻ⁿ)⁻¹ = (a⁻¹)⁻ⁿ.

## Order of an element

The order of an element a is the minimum number of times it must be operated with itself until it turns into the identity, and is written as o(a). If no matter how many times you operate the element it doesn&#39;t turn into the identity, its order is said to be infinite.

A more rigorous definition is:

* a has infinite order if ∀ n ∈ N: n∗a ≠ 0
* a has finite order k, that is, o(a) = k, if: (1) k ∈ N; (2) k∗a = 0; (3) ∀ n ∈ N: n∗a = 0 ⇒ n ≤ k

In particular, the order of the identity is 1, and the identity is the only element with order 1.

Useful fact: ∀ G group: ∀ a ∈ G: o(a) | #G. From this comes that in a finite group no element has infinite order.

## Generated Subgroup

Given a ∈ (G, +), 〈a〉 = { n∗a : n ∈ Z } is a subgroup of G and is called the &quot;Subgroup of G generated by a&quot;. In particular, if G = 〈a〉, a is said to generate G, or that G is generated by a. Note that #〈a〉 = o(a). An example of this is 〈1〉 = 〈-1〉 = Z.

# Zₙ Groups

You can group integers together according to their (mod n), make a set out of them, and define a group with it. These groups are called Zₙ, for some n ∈ N, and are defined as Zₙ = { [m]ₙ : m ∈ { 0, ..., n-1 } }.

These will get repetitive after Z₂, but the reason why they&#39;re here will become clear.

## (Z₁, +)

According to definition above Z₁ = { [0]₁ }, but you can go further here:

[0]₁
  = { def [m]ₙ }
{ x : x ∈ Z, x ≣ 0 (mod 1) }
  = { def (mod n) }
{ x : x ∈ Z, x mod 1 = 0 mod 1 }
  = { 0 mod 1 = 0 }
{ x : x ∈ Z, x mod 1 = 0 }
  = { ∀ x ∈ Z: 1 | x }
{ x : x ∈ Z }
  = { def Z }
Z

Z₁ is a trivial group (#Z₁ = 1), so it isn&#39;t that interesting, other than Z being its only element.

Some things we can find about it:

* Since it is a trivial group, its only subgroup is itself
* [0]₁ is the identity, so o([0]₁) = 1
* Z₁ = 〈[0]₁〉

## (Z₂, +)

When n=2 we get Z₂ = { [0]₂, [1]₂ }.

[0]₂
  = { def [m]ₙ }
{ x : x ∈ Z, x = 0 (mod 2) }
  = { def (mod n) }
{ x : x ∈ Z, x mod 2 = 0 mod 2 }
  = { 0 mod 2 = 0 }
{ x : x ∈ Z, x mod 2 = 0 }
  = { x mod 2 = 0 ⇒ ∃ k ∈ Z: x = 2 ∗ k }
{ 2 ∗ x : x ∈ Z }
  = { def 2Z }
2Z

So [0]₂ = 2Z is the set of even integers. You can probably guess by now, but:

[1]₂
  = (def [m]n)
{ x : x ∈ Z, x = 1 (mod 2) }
  = (def (mod n))
{ x : x ∈ Z, x mod 2 = 1 mod 2 }
  = (1 mod 2 = 1)
{ x : x ∈ Z, x mod 2 = 1 }
  = (x mod 2 = 1 ⇒ ∃ k ∈ Z: x = 2 ∗ k + 1)
{ 2 ∗ x + 1 : x ∈ Z }
  = (def 2Z+1)
2Z+1

And with that you see that [1]₂ is the set of odd integers.

Some things we can find about it:

* [0]₂ is the identity, so o([0]₂) = 1
* [1]₂ ≠ [0]₂, but [1]₂ + [1]₂ = [1 + 1]₂ = [2]₂ = [0]₂, so o([1]₂) = 2
* 〈[0]₂〉 = { [0]₂ } &lt; Z₂
* 〈[1]₂〉 = Z₂

## (Z₃, +)

Z₃ = { [0]₃, [1]₃, [2]₃ }

I&#39;ll skip showing how to get to the definition of each of the classes from now. Also, you may have already noticed, but if not, [0]ₙ is the set of multiples of n, nZ.

[0]₃ = 3Z
[1]₃ = 3Z + 1
[2]₃ = 3Z + 2

And now things about Z₃:

* o([0]₃) = 1
* o([1]₃) = 3; you may also have noticed that o([1]n) = n. This has to do with the fact that ∀ n ∈ Z: n ∗ 1 = n. So n ∗ [1]n = [n ∗ 1]n = [n]n = [0]n
* o([2]₃) = 3; [2]₃ ≠ [0]₃, 2 ∗ [2]₃ = [1]₃ ≠ [0]₃, 3 ∗ [2]₃ = [0]₃ This one has to do with the fact that 2 and 3 are coprime, which means lcm(2, 3) = 6, and 6 / 2 = 3
* 〈[0]₃〉 = { [0]₃ } &lt; Z₃
* 〈[1]₃〉 = 〈[2]₃〉 = Z₃

## (Z₄, +)

Z₄ = { [0]₄, [1]₄, [2]₄, [3]₄ }

[0]₄ = 4Z
[1]₄ = 4Z + 1
[2]₄ = 4Z + 2
[3]₄ = 4Z + 3

Once again, things about this group:

* o([0]₄) = 1
* o([2]₄) = 2
* o([1]₄) = o([3]₄) = 4
* 〈[2]₄〉 = { [0]₄, [2]₄ } &lt; Z₄
* 〈[1]₄〉 = 〈[3]₄〉 = Z₄

Now something interesting happened here! Remember that ∀ G group: ∀ a ∈ G: o(a) | #G

Because of this we know that the only possible orders are 1, 2 and 4.

This also means that it is possible for a subgroup of cardinal 2 to exist. In this case, the only one is 〈[2]₄〉. Why, though, did this happen with Z₄, but not with Z₁, Z₂ or Z₃? Z₁ is obvious: #Z₁ = 1, so the only possible subgroup is itself. Z₂ is also easy: its only elements are [0]₂ and [1]₂, and we know that:

* ∀ n ∈ N: 〈[0]n〉 = { [0]n }; and that
* ∀ n ∈ N: 〈[1]n〉 = Zₙ

For Z₃ it&#39;s not as clear. The hint is, again: ∀ G group: ∀ a ∈ G: o(a) | #G

Both 2 and 3 are prime, which means, their only divisors are 1 and themselves. So it&#39;s not possible for a subgroup of Z₃ with cardinal 2 to exist.

## (Z₅, +)

Try this one yourself.

## (Zₙ, +)

Summing up:

* ∀ n ∈ N: Zₙ has more than one proper subgroup ⇔ n is not prime
* ∀ n ∈ N: Zₙ has exactly one proper subgroup ⇔ n is prime

Proving this is easy: Let n ∈ N.

Suppose that Zₙ has more than one proper subgroup. We want to prove that n is not prime.

There is a proper subgroup H such that #H &gt; 1. Since H is a proper subgroup, then #H &lt; n. From this, and the fact that #H | n, we can conclude n is not prime.

Now the other way: Suppose n is not prime. We want to prove that Zₙ has more than one proper subgroup. Since n is not prime, then ∃ k ∈ N: 1 &lt; k &lt; n ∧ k | n.

Let k be such a number. Then ∃ a ∈ Zₙ: o(a) = k.

Let a be such an element. o(a) = k ⇒ #〈a〉 = k. We know that 〈a〉 ≤ Zₙ and that k &lt; n, so 〈a〉 &lt; Zₙ.

# TODO

Groups that are isomorphic to some proper subgroup.
  </content>
  <content type="text/html">

&lt;h1&gt;Groups&lt;/h1&gt;
&lt;p&gt;@siiky
2020/02/20
2022/07/15&lt;/p&gt;
&lt;p&gt;This post is about groups (whouldathunkit).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Group_(mathematics)&quot;&gt;https://en.wikipedia.org/wiki/Group_(mathematics)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Conventions/Notation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;∀ v: P means P is true for all possible v&lt;/li&gt;
&lt;li&gt;∃ v: P means P is true for at least one v&lt;/li&gt;
&lt;li&gt;∃¹ v: P means P is true for exactly one v&lt;/li&gt;
&lt;li&gt;∀ v1: ∀ v2: P will be abbreviated as ∀ v1, v2: P&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Sets are written as its elements surrounded by brackets. For example, ∅ is the empty set and { a, b, c } is a set with the elements a, b and c. Sets comprehension will be written as { expr : vars, restrictions } and the cardinal of a set will be written as #S.&lt;/p&gt;
&lt;p&gt;N is the set of natural numbers (w/o zero), N₀ the set of natural numbers (w/ zero), Z the set of integers, and R the set of real numbers.&lt;/p&gt;
&lt;p&gt;The modulo operator will be recurrent throughout this post. A couple of examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 mod 5 ≣ 9 mod 5 ≣ 4&lt;/li&gt;
&lt;li&gt;5 mod 2 ≣ 1&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;This operator is called % in C, modulo in Scheme and mod in Haskell.&lt;/p&gt;
&lt;p&gt;A useful definition: p ≣ q (mod n) ⇔ p mod n ≣ q mod n.&lt;/p&gt;
&lt;p&gt;&amp;quot;|&amp;quot; will be used to mean &amp;quot;divides&amp;quot;: &amp;quot;a | b&amp;quot; means &amp;quot;a divides b&amp;quot;, &amp;quot;b is a multiple of a&amp;quot;, or, with modulo, &amp;quot;a | b ⇔ b ≣ 0 (mod a)&amp;quot;.&lt;/p&gt;
&lt;p&gt;We will be needing the concept of a &amp;quot;Congruential Equivalence Class&amp;quot; later on. They are written as [m]ₙ (∀ n ∈ N, m ∈ Z) and are defined as [m]ₙ = { x ∈ Z : x ≣ m (mod n) }.&lt;/p&gt;
&lt;p&gt;Depending on context, + and ∗ will either be the usual addition and multiplication of numbers, or addition and multiplication of classes.&lt;/p&gt;
&lt;p&gt;Addition and multiplication of classes are defined as [p]ₙ + [q]ₙ = [p+q]ₙ and [p]ₙ ∗ [q]ₙ = [p∗q]ₙ. Example: 2+2=4, [2]₃ + [1]₃ = [2+1]₃ = [0]₃.&lt;/p&gt;
&lt;h1&gt;What is a Group?!&lt;/h1&gt;
&lt;h2&gt;In general&lt;/h2&gt;
&lt;p&gt;A group is just a pair (S, O), where S is a set and O is a binary operation on S (i.e., O : S ∗ S → S) with the following required properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(R1) Associativity: ∀ a, b, c ∈ S: O(a, O(b, c)) = O(O(a, b), c)&lt;/li&gt;
&lt;li&gt;(R2) Identity: ∃¹ id ∈ S: ∀ a ∈ S: O(a, id) = O(id, a) = a&lt;/li&gt;
&lt;li&gt;(R3) Inverse: ∀ a ∈ S: ∃¹ a&#39; ∈ S: O(a, a&#39;) = O(a&#39;, a) = id&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;From (R2) and (R3) we can conclude that id always has inverse, itself.&lt;/p&gt;
&lt;p&gt;There is one extra optional property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(R4) Commutativity: ∀ a, b ∈ S: O(a, b) = O(b, a)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;A group with a commutative operation is called a commutative group or an abelian group.&lt;/p&gt;
&lt;p&gt;Given G = (G, O) a group, G will be used to refer both to the group itself and its associated set.&lt;/p&gt;
&lt;p&gt;A group G is said to be infinite if #G is infinite, and finite if #G is finite.&lt;/p&gt;
&lt;p&gt;That is the generic definition. We will focus on groups with integer sets and + or ∗ as the operation, however.&lt;/p&gt;
&lt;h2&gt;Integers&lt;/h2&gt;
&lt;p&gt;When the operation is + we call the identity element &amp;quot;null element&amp;quot; and represent it with 0. When the operation is ∗ we call the identity element &amp;quot;unity element&amp;quot; and represent it with 1.&lt;/p&gt;
&lt;p&gt;When the operation is + we call the inverse of an element a its symmetric and represent it as -a. When the operation is ∗ we call the inverse of an element a its inverse and represent it as a⁻¹.&lt;/p&gt;
&lt;h3&gt;(N₀, +)&lt;/h3&gt;
&lt;p&gt;N₀ is the set of natural numbers (w/ zero), and + is the usual addition on natural numbers. Is it a group?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;∀ a, b, c ∈ N₀: a + (b + c) = (a + b) + c&lt;/li&gt;
&lt;li&gt;0 is the identity of the group, because ∀ a ∈ N₀: a + 0 = 0 + a = a&lt;/li&gt;
&lt;li&gt;∀ a, b ∈ N: a + b ≠ 0 (Note that N = N₀∖{0})&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;N₀ with + does not satisfy property R3, so it is not a group.&lt;/p&gt;
&lt;h3&gt;(Z, +)&lt;/h3&gt;
&lt;p&gt;Z is the set of integers, and + is the usual addition on integers. Is it a group?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;∀ a, b, c ∈ Z: a + (b + c) = (a + b) + c&lt;/li&gt;
&lt;li&gt;0 is the identity of the group, because ∀ a ∈ Z: a + 0 = 0 + a = a&lt;/li&gt;
&lt;li&gt;∀ a ∈ Z: ∃¹ a&#39; ∈ Z: a + a&#39; = 0&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Z satisfies all 3 requirements so it is a group. We also know that addition is commutative, so Z is an abelian group (see property R4).&lt;/p&gt;
&lt;h3&gt;Other examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(R, +), where R is the set of real numbers, is a group&lt;/li&gt;
&lt;li&gt;(R∖{0}, ∗) is also a group&lt;/li&gt;
&lt;li&gt;(R, ∗) is not a group, because 0 has no inverse (R3)&lt;/li&gt;
&lt;li&gt;(N, +) is not a group, because there is no identity and no inverse (R2 and R3)&lt;/li&gt;
&lt;li&gt;(N, ∗) is not a group, because there is no inverse (R3)&lt;/li&gt;
&lt;li&gt;(Z∖{0}, ∗) is not a group, because other than 1 and -1, no element has inverse (R3)&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;What&#39;s next?&lt;/h1&gt;
&lt;p&gt;Some more definitions.&lt;/p&gt;
&lt;h2&gt;Subgroup&lt;/h2&gt;
&lt;p&gt;Given a group G, H is called a subgroup of G if H is contained in G and it is also a group, and we write H ≤ G. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;∀ (G, +) group: (G, +) ≤ (G, +)&lt;/li&gt;
&lt;li&gt;Trivial Subgroup: ∀ (G, +) group: ({0}, +) ≤ (G, +)&lt;/li&gt;
&lt;li&gt;(2Z, +) ≤ (Z, +)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;A subgroup H of a group G that is not G itself (H ≠ G, or H ⊂ G) is called a &amp;quot;Proper Subgroup&amp;quot;, and we write H &amp;lt; G. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trivial Subgroup: ∀ (G, +) group: ({0}, +) &amp;lt; (G, +)&lt;/li&gt;
&lt;li&gt;(2Z, +) &amp;lt; (Z, +)&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Multiples/Powers of an element&lt;/h2&gt;
&lt;p&gt;Given an element a of an additive group, a+...+a (n times) can be written as n∗a. Special case: 0∗a = 0.&lt;/p&gt;
&lt;p&gt;Given an element a of a multiplicative group, a∗...∗a (n times) can be written as aⁿ. Special case: a⁰ = 1.&lt;/p&gt;
&lt;p&gt;For negative n, n∗a = -((-n)∗a) = (-n)∗(-a); and aⁿ = (a⁻ⁿ)⁻¹ = (a⁻¹)⁻ⁿ.&lt;/p&gt;
&lt;h2&gt;Order of an element&lt;/h2&gt;
&lt;p&gt;The order of an element a is the minimum number of times it must be operated with itself until it turns into the identity, and is written as o(a). If no matter how many times you operate the element it doesn&#39;t turn into the identity, its order is said to be infinite.&lt;/p&gt;
&lt;p&gt;A more rigorous definition is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a has infinite order if ∀ n ∈ N: n∗a ≠ 0&lt;/li&gt;
&lt;li&gt;a has finite order k, that is, o(a) = k, if: (1) k ∈ N; (2) k∗a = 0; (3) ∀ n ∈ N: n∗a = 0 ⇒ n ≤ k&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;In particular, the order of the identity is 1, and the identity is the only element with order 1.&lt;/p&gt;
&lt;p&gt;Useful fact: ∀ G group: ∀ a ∈ G: o(a) | #G. From this comes that in a finite group no element has infinite order.&lt;/p&gt;
&lt;h2&gt;Generated Subgroup&lt;/h2&gt;
&lt;p&gt;Given a ∈ (G, +), 〈a〉 = { n∗a : n ∈ Z } is a subgroup of G and is called the &amp;quot;Subgroup of G generated by a&amp;quot;. In particular, if G = 〈a〉, a is said to generate G, or that G is generated by a. Note that #〈a〉 = o(a). An example of this is 〈1〉 = 〈-1〉 = Z.&lt;/p&gt;
&lt;h1&gt;Zₙ Groups&lt;/h1&gt;
&lt;p&gt;You can group integers together according to their (mod n), make a set out of them, and define a group with it. These groups are called Zₙ, for some n ∈ N, and are defined as Zₙ = { [m]ₙ : m ∈ { 0, ..., n-1 } }.&lt;/p&gt;
&lt;p&gt;These will get repetitive after Z₂, but the reason why they&#39;re here will become clear.&lt;/p&gt;
&lt;h2&gt;(Z₁, +)&lt;/h2&gt;
&lt;p&gt;According to definition above Z₁ = { [0]₁ }, but you can go further here:&lt;/p&gt;
&lt;p&gt;[0]₁
  = { def [m]ₙ }
{ x : x ∈ Z, x ≣ 0 (mod 1) }
  = { def (mod n) }
{ x : x ∈ Z, x mod 1 = 0 mod 1 }
  = { 0 mod 1 = 0 }
{ x : x ∈ Z, x mod 1 = 0 }
  = { ∀ x ∈ Z: 1 | x }
{ x : x ∈ Z }
  = { def Z }
Z&lt;/p&gt;
&lt;p&gt;Z₁ is a trivial group (#Z₁ = 1), so it isn&#39;t that interesting, other than Z being its only element.&lt;/p&gt;
&lt;p&gt;Some things we can find about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since it is a trivial group, its only subgroup is itself&lt;/li&gt;
&lt;li&gt;[0]₁ is the identity, so o([0]₁) = 1&lt;/li&gt;
&lt;li&gt;Z₁ = 〈[0]₁〉&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;(Z₂, +)&lt;/h2&gt;
&lt;p&gt;When n=2 we get Z₂ = { [0]₂, [1]₂ }.&lt;/p&gt;
&lt;p&gt;[0]₂
  = { def [m]ₙ }
{ x : x ∈ Z, x = 0 (mod 2) }
  = { def (mod n) }
{ x : x ∈ Z, x mod 2 = 0 mod 2 }
  = { 0 mod 2 = 0 }
{ x : x ∈ Z, x mod 2 = 0 }
  = { x mod 2 = 0 ⇒ ∃ k ∈ Z: x = 2 ∗ k }
{ 2 ∗ x : x ∈ Z }
  = { def 2Z }
2Z&lt;/p&gt;
&lt;p&gt;So [0]₂ = 2Z is the set of even integers. You can probably guess by now, but:&lt;/p&gt;
&lt;p&gt;[1]₂
  = (def [m]n)
{ x : x ∈ Z, x = 1 (mod 2) }
  = (def (mod n))
{ x : x ∈ Z, x mod 2 = 1 mod 2 }
  = (1 mod 2 = 1)
{ x : x ∈ Z, x mod 2 = 1 }
  = (x mod 2 = 1 ⇒ ∃ k ∈ Z: x = 2 ∗ k + 1)
{ 2 ∗ x + 1 : x ∈ Z }
  = (def 2Z+1)
2Z+1&lt;/p&gt;
&lt;p&gt;And with that you see that [1]₂ is the set of odd integers.&lt;/p&gt;
&lt;p&gt;Some things we can find about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0]₂ is the identity, so o([0]₂) = 1&lt;/li&gt;
&lt;li&gt;[1]₂ ≠ [0]₂, but [1]₂ + [1]₂ = [1 + 1]₂ = [2]₂ = [0]₂, so o([1]₂) = 2&lt;/li&gt;
&lt;li&gt;〈[0]₂〉 = { [0]₂ } &amp;lt; Z₂&lt;/li&gt;
&lt;li&gt;〈[1]₂〉 = Z₂&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;(Z₃, +)&lt;/h2&gt;
&lt;p&gt;Z₃ = { [0]₃, [1]₃, [2]₃ }&lt;/p&gt;
&lt;p&gt;I&#39;ll skip showing how to get to the definition of each of the classes from now. Also, you may have already noticed, but if not, [0]ₙ is the set of multiples of n, nZ.&lt;/p&gt;
&lt;p&gt;[0]₃ = 3Z
[1]₃ = 3Z + 1
[2]₃ = 3Z + 2&lt;/p&gt;
&lt;p&gt;And now things about Z₃:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;o([0]₃) = 1&lt;/li&gt;
&lt;li&gt;o([1]₃) = 3; you may also have noticed that o([1]n) = n. This has to do with the fact that ∀ n ∈ Z: n ∗ 1 = n. So n ∗ [1]n = [n ∗ 1]n = [n]n = [0]n&lt;/li&gt;
&lt;li&gt;o([2]₃) = 3; [2]₃ ≠ [0]₃, 2 ∗ [2]₃ = [1]₃ ≠ [0]₃, 3 ∗ [2]₃ = [0]₃ This one has to do with the fact that 2 and 3 are coprime, which means lcm(2, 3) = 6, and 6 / 2 = 3&lt;/li&gt;
&lt;li&gt;〈[0]₃〉 = { [0]₃ } &amp;lt; Z₃&lt;/li&gt;
&lt;li&gt;〈[1]₃〉 = 〈[2]₃〉 = Z₃&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;(Z₄, +)&lt;/h2&gt;
&lt;p&gt;Z₄ = { [0]₄, [1]₄, [2]₄, [3]₄ }&lt;/p&gt;
&lt;p&gt;[0]₄ = 4Z
[1]₄ = 4Z + 1
[2]₄ = 4Z + 2
[3]₄ = 4Z + 3&lt;/p&gt;
&lt;p&gt;Once again, things about this group:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;o([0]₄) = 1&lt;/li&gt;
&lt;li&gt;o([2]₄) = 2&lt;/li&gt;
&lt;li&gt;o([1]₄) = o([3]₄) = 4&lt;/li&gt;
&lt;li&gt;〈[2]₄〉 = { [0]₄, [2]₄ } &amp;lt; Z₄&lt;/li&gt;
&lt;li&gt;〈[1]₄〉 = 〈[3]₄〉 = Z₄&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Now something interesting happened here! Remember that ∀ G group: ∀ a ∈ G: o(a) | #G&lt;/p&gt;
&lt;p&gt;Because of this we know that the only possible orders are 1, 2 and 4.&lt;/p&gt;
&lt;p&gt;This also means that it is possible for a subgroup of cardinal 2 to exist. In this case, the only one is 〈[2]₄〉. Why, though, did this happen with Z₄, but not with Z₁, Z₂ or Z₃? Z₁ is obvious: #Z₁ = 1, so the only possible subgroup is itself. Z₂ is also easy: its only elements are [0]₂ and [1]₂, and we know that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;∀ n ∈ N: 〈[0]n〉 = { [0]n }; and that&lt;/li&gt;
&lt;li&gt;∀ n ∈ N: 〈[1]n〉 = Zₙ&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;For Z₃ it&#39;s not as clear. The hint is, again: ∀ G group: ∀ a ∈ G: o(a) | #G&lt;/p&gt;
&lt;p&gt;Both 2 and 3 are prime, which means, their only divisors are 1 and themselves. So it&#39;s not possible for a subgroup of Z₃ with cardinal 2 to exist.&lt;/p&gt;
&lt;h2&gt;(Z₅, +)&lt;/h2&gt;
&lt;p&gt;Try this one yourself.&lt;/p&gt;
&lt;h2&gt;(Zₙ, +)&lt;/h2&gt;
&lt;p&gt;Summing up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;∀ n ∈ N: Zₙ has more than one proper subgroup ⇔ n is not prime&lt;/li&gt;
&lt;li&gt;∀ n ∈ N: Zₙ has exactly one proper subgroup ⇔ n is prime&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Proving this is easy: Let n ∈ N.&lt;/p&gt;
&lt;p&gt;Suppose that Zₙ has more than one proper subgroup. We want to prove that n is not prime.&lt;/p&gt;
&lt;p&gt;There is a proper subgroup H such that #H &gt; 1. Since H is a proper subgroup, then #H &amp;lt; n. From this, and the fact that #H | n, we can conclude n is not prime.&lt;/p&gt;
&lt;p&gt;Now the other way: Suppose n is not prime. We want to prove that Zₙ has more than one proper subgroup. Since n is not prime, then ∃ k ∈ N: 1 &amp;lt; k &amp;lt; n ∧ k | n.&lt;/p&gt;
&lt;p&gt;Let k be such a number. Then ∃ a ∈ Zₙ: o(a) = k.&lt;/p&gt;
&lt;p&gt;Let a be such an element. o(a) = k ⇒ #〈a〉 = k. We know that 〈a〉 ≤ Zₙ and that k &amp;lt; n, so 〈a〉 &amp;lt; Zₙ.&lt;/p&gt;
&lt;h1&gt;TODO&lt;/h1&gt;
&lt;p&gt;Groups that are isomorphic to some proper subgroup.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/kB45oC/gnuplot.gmi</id>
  <title type="text">Gnuplot Quickstart</title>
  <updated>2022-07-14T00:00:00Z</updated>
  <published>2022-01-12T00:00:00Z</published>
  <link href="https://siiky.srht.site/kB45oC/gnuplot.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/kB45oC/gnuplot.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Gnuplot Quickstart
@siiky
2022/01/12
2022/07/14

I started learning Gnuplot for a PA because I didn&#39;t want to deal with Python BS or whatnot, and Gnuplot has been around since like... even before the dinosaurs were invented, so it must be super specialized for this kinda thing, and it must be pretty good right?

Hopefully I&#39;ll document well enough the things I&#39;ve learned these past few days, for posterity or someone else. I&#39;ve been using it to plot 2D graphs of recorded data, not functions/expressions, so my focus will be on that.

Gnuplot files don&#39;t have a &quot;standard&quot; file extension, but some common ones seem to be .gp, .plot, .gnu, .gnuplot, .plt. I&#39;ve been using .gp and will use .gp here.

To run Gnuplot scripts, just call gnuplot script.gp. It&#39;s possible to pass arguments to the script by using the -c flag: gnuplot -c script.gp arg1 arg2 etc. And inside the script the arguments are available as the variables ARG1, ARG2, etc. As is common on other programming languages, ARG0 is the script name. I don&#39;t know if there are, or what are the limits on the number of arguments, nor how to loop through them, but I&#39;m guessing it&#39;s possible.

Now let&#39;s get going with some Gnuplot code. I said the focus would be on plotting datafiles, so let&#39;s start with expressions:

```gp
# The output &quot;format&quot;.
set terminal svg

# The output file.
set output &quot;exp.svg&quot;

# Enable gridlines.
set grid

# Where to place the lines/points/&amp;c legend.
set key right bottom

# Legend of the XX/YY axes.
set xlabel &quot;The passage of time...&quot;
set ylabel &quot;Shittiness of the web&quot;

# Mirror or not the axes&#39; tics -- notice the YY axis has tics on both the left
#   and right, but the XX axis has only on the bottom, not the top.
set ytics mirror
set xtics nomirror

# Use a logscale of base 7 for the XX axis -- the base is optional and defaults
#   to 10 I think.
set logscale y 7

# The actual plot: `exp(x)` is the expression to plot; `x` is &quot;special&quot; --
#   there are a few different variables you can use, but they seem to depend on
#   the available axes/dimensions, but I don&#39;t know details of this so RTFM.
#
# `title &quot;...&quot;` sets this line&#39;s legend.
plot exp(x) title &quot;Super straight line&quot;
```

=&gt; exp.gp
=&gt; exp.svg

Notice how it starts to grow really fucking quick after t=5 -- right after HTML was invented.

Here&#39;s another one:

```gp
set terminal svg
set output &quot;rollercoaster.svg&quot;

# The number of samples to use to plot the expression.
set samples 1000

# The ranges here specify the XX and YY ranges respectively.
plot [-50:50] [-5:5] x*sin(x)*cos(x)**x title &quot;Rollercoaster&quot;
```

=&gt; rollercoaster.gp
=&gt; rollercoaster.svg

The website, with documentation and all (including a 300+ pages PDF of all the documentation, with proper PDF index!):

=&gt; http://www.gnuplot.info
=&gt; http://gnuplot.sourceforge.net

The first seems to be the &quot;official&quot; one, but is sometimes offline? The second looks like a mirror.

You can use the help command to read the documentation inside the Gnuplot REPL too.

An important concept is that of the terminal, as seen above being set to SVG. It&#39;s nothing but an &quot;output backend&quot;, and Gnuplot has tons of those -- run set terminal and see for yourself; there&#39;s even one to output ASCII art to the terminal! Different terminals may have different specific options -- RTFM for those.

Once you start messing around with line styles, line types, colors, and whatnot, it&#39;s helpful to know what the valid values are. For that use the test command after setting the terminal (the result of the test command varies depending on the terminal, so it&#39;s important to set it):

```gp
set terminal svg
set output &quot;gnuplot-test.svg&quot;
test
```

=&gt; gnuplot-test.gp
=&gt; gnuplot-test.svg

Variables are a thing, and you can define them just as you&#39;d expect:

```gp
some_var = 42
```

To plot data from files just pass the filename to plot:

```gp
plot &quot;/path/to/file.tsv&quot; # ...
```

Gnuplot is supposed to support many different formats but I don&#39;t know details here. I&#39;ve been using TSV because it makes sense. For tabular data files (TSV, CSV, ...), this may be useful:

```gp
set datafile separator tab
```

RTFM for details: help set datafile separator.

It&#39;s possible to define datasets inside a Gnuplot script, too, like this:

```gp
plot &quot;-&quot;
1 2
3 4
5 6
7 8
9 0
e
```

Notice the e at the end! You can even define more than one for the same plot command:

```gp
plot &quot;-&quot;, &quot;-&quot;
1 2
3 4
5 6
7 8
9 0
e
2 1
4 3
6 5
8 7
0 9
e
```

Another arguably more useful way is to do it like so (notice the dollar!):

```gp
$SomeData &lt;&lt; EOD
1 2
4 5
7 8
EOD
plot $SomeData # ...
```

This kind of inline data definition doesn&#39;t seem to work on the REPL though... At least I couldn&#39;t make it work.

For tabular data files, files may have many columns, some that you want, some
that you don&#39;t, some that are in the wrong order... To solve that, you use
using:

```gp
plot &quot;-&quot; using 1:3
1 2 3
4 5 6
7 8 9
```

The above uses the first and third columns of the dataset.

And with that, if you want to plot several graphs from the same dataset, you can do it like so:

```gp
plot &quot;/path/to/file.tsv&quot; using 1:3, &quot;&quot; using 1:4
```

Assuming the data file has at least 4 columns, the above will plot a line/w.e. using the first and third columns, and then another using the first and fourth columns. The empty string there is a shortcut to mean &quot;the previous dataset/file&quot;.

For certain plot types, such as for errorlines or errorbars, you may want or need to use more than 2 columns of data.

And a final plot, pretty much the most advanced I can get right now. The dataset&#39;s fields are separated by tabs but your browser or something may present them as spaces, so download the file for greater €€€profit€€€.

```gp
$Dataset &lt;&lt; EOD
NELEMS	RTIME-MEAN	RTIME-MIN	RTIME-MAX	TOTCYC-MEAN	TOTCYC-MIN	TOTCYC-MAX	TOTINS-MEAN	TOTINS-MIN	TOTINS-MAX	L1DCM-MEAN	L1DCM-MIN	L1DCM-MAX	L2DCM-MEAN	L2DCM-MIN	L2DCM-MAX
100	51.5	51	52	153107.0	151836	154378	49774.5	42768	56781	912.5	849	976	557.0	528	586
1000	386.4	373	396	1117484.4	1076454	1145864	652026.8	634123	680188	5681.0	5118	5990	1660.4	1300	1793
10000	29215.8	29061	29364	21425394.0	10119054	26280869	15941285.8	6979549	22139082	619685.8	169351	1140152	298639.6	17765	644415
100000	2852669.8	2845788	2859074	708231510.6	119757602	1080138950	1145341284.8	184498435	1753956316	93553900.2	13537085	144424582	72470004.8	2110199	120731566
200000	11472829.2	11426994	11502233	922765811.8	181797852	3298279336	1480628498.6	268678225	5359163617	120437869.6	19420767	444041994	87885551.2	2726575	385487784
300000	25821154.8	25729787	25883755	7291510319.0	393353142	9962527951	11904840316.2	594020363	16257913776	988685146.8	45337229	1351805549	907188629.2	12260881	1258022140
400000	45910144.6	45833530	46047114	680904937.0	670501982	689922089	1033095368.6	1029084389	1038083524	80272464.4	80011372	80610671	30805397.6	29580829	32181760
500000	71859779.2	71703444	72007099	11187695199.8	1031362427	25645713435	18329461121.4	1586757574	42172405522	1521273469.8	125041982	3509799991	1394315157.4	56848580	3340745801
600000	103237386.5	103196178	103278595	1492849041.0	1484306515	1501391567	2238479602.0	2234440484	2242518720	177991124.0	177535409	178446839	93661585.0	93119294	94203876
EOD

set terminal svg
set output &quot;errorlines.svg&quot;

# Tell Gnuplot that fields are separated by a tab, as briefly mentioned before.
set datafile separator tab

set title &quot;Some shitty performance right here...&quot;
set key left top

# Ask Gnuplot to use log scales for the XX, YY, and YY2 (right side) axes.
set logscale xyy2 10

set xtics nomirror
set ytics nomirror
set y2tics nomirror

set xlabel &quot;#Elements&quot;
set ylabel &quot;Time (s)&quot;
set y2label &quot;L1 Cache Misses&quot;

set grid

# The `($n/1000000)` syntax asks Gnuplot to divide the values of the field `n`
#   by 1000000 (in this case, the time is in microseconds, so dividing by
#   1000000 converts to secconds).
#
# `with yerrorlines` changes the style of plot, in this case lines with error
#   bars. `yerrorbars` is the same but without the connecting lines.
# Other common styles are `points` (the default?), `lines`, &amp; `linespoints`.
# RTFM for more: `help with`.
#
# The `yerrorlines` style requires additional values. There are some different
#   alternatives (RTFM), but in this case the columns are x:y:ymin:ymax. In
#   this dataset I&#39;ve used the mean for the YY, but you may use whatever you
#   wish.
#
# `title columnheader` asks Gnuplot to automatically read the given line&#39;s
#   legend from the input dataset. Note that Gnuplot supports some LaTeX-like
#   formatting syntax for text. E.g., the text &quot;RTIME_MEAN&quot; would be rendered
#   as &quot;RTIMEMEAN&quot; with the the &quot;M&quot; of &quot;MEAN&quot; in subscript.
#
# Finally, `axis x1y1` &amp; `axis x1y2` set the axes the data should be plotted in
#   -- x1 &amp; x2 for bottom &amp; top XX respectively; y1 &amp; y2 for left &amp; right YY
#   respectively.
plot $Dataset using 1:($2/1000000):($3/1000000):($4/1000000) with yerrorlines title columnheader axis x1y1,\
     &quot;&quot;       using 1:11:12:13                               with yerrorlines title columnheader axis x1y2
```

=&gt; errorlines.gp
=&gt; errorlines.svg

-----

Just a couple of notes on security, especially for someone wanting to develop an interface library. These are things that may be useful when writing and running scripts directly in Gnuplot, but that are a security nightmare if left as something to think about tomorrow.

system() a la C is a thing!

And so are backticks like in shell languages! The first line of the following Gnuplot code runs the echo command, but the second one doesn&#39;t:

```sh
&quot;`echo hello from Gnuplot`&quot;
&#39;`echo hello from Gnuplot`&#39;
```
  </content>
  <content type="text/html">

&lt;h1&gt;Gnuplot Quickstart&lt;/h1&gt;
&lt;p&gt;@siiky
2022/01/12
2022/07/14&lt;/p&gt;
&lt;p&gt;I started learning Gnuplot for a PA because I didn&#39;t want to deal with Python BS or whatnot, and Gnuplot has been around since like... even before the dinosaurs were invented, so it must be super specialized for this kinda thing, and it must be pretty good right?&lt;/p&gt;
&lt;p&gt;Hopefully I&#39;ll document well enough the things I&#39;ve learned these past few days, for posterity or someone else. I&#39;ve been using it to plot 2D graphs of recorded data, not functions/expressions, so my focus will be on that.&lt;/p&gt;
&lt;p&gt;Gnuplot files don&#39;t have a &amp;quot;standard&amp;quot; file extension, but some common ones seem to be .gp, .plot, .gnu, .gnuplot, .plt. I&#39;ve been using .gp and will use .gp here.&lt;/p&gt;
&lt;p&gt;To run Gnuplot scripts, just call gnuplot script.gp. It&#39;s possible to pass arguments to the script by using the -c flag: gnuplot -c script.gp arg1 arg2 etc. And inside the script the arguments are available as the variables ARG1, ARG2, etc. As is common on other programming languages, ARG0 is the script name. I don&#39;t know if there are, or what are the limits on the number of arguments, nor how to loop through them, but I&#39;m guessing it&#39;s possible.&lt;/p&gt;
&lt;p&gt;Now let&#39;s get going with some Gnuplot code. I said the focus would be on plotting datafiles, so let&#39;s start with expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# The output &amp;quot;format&amp;quot;.
set terminal svg

# The output file.
set output &amp;quot;exp.svg&amp;quot;

# Enable gridlines.
set grid

# Where to place the lines/points/&amp;amp;c legend.
set key right bottom

# Legend of the XX/YY axes.
set xlabel &amp;quot;The passage of time...&amp;quot;
set ylabel &amp;quot;Shittiness of the web&amp;quot;

# Mirror or not the axes&#39; tics -- notice the YY axis has tics on both the left
#   and right, but the XX axis has only on the bottom, not the top.
set ytics mirror
set xtics nomirror

# Use a logscale of base 7 for the XX axis -- the base is optional and defaults
#   to 10 I think.
set logscale y 7

# The actual plot: `exp(x)` is the expression to plot; `x` is &amp;quot;special&amp;quot; --
#   there are a few different variables you can use, but they seem to depend on
#   the available axes/dimensions, but I don&#39;t know details of this so RTFM.
#
# `title &amp;quot;...&amp;quot;` sets this line&#39;s legend.
plot exp(x) title &amp;quot;Super straight line&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;exp.gp&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;exp.svg&quot; alt /&gt;&lt;/p&gt;
&lt;p&gt;Notice how it starts to grow really fucking quick after t=5 -- right after HTML was invented.&lt;/p&gt;
&lt;p&gt;Here&#39;s another one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set terminal svg
set output &amp;quot;rollercoaster.svg&amp;quot;

# The number of samples to use to plot the expression.
set samples 1000

# The ranges here specify the XX and YY ranges respectively.
plot [-50:50] [-5:5] x*sin(x)*cos(x)**x title &amp;quot;Rollercoaster&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;rollercoaster.gp&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;rollercoaster.svg&quot; alt /&gt;&lt;/p&gt;
&lt;p&gt;The website, with documentation and all (including a 300+ pages PDF of all the documentation, with proper PDF index!):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnuplot.info&quot;&gt;http://www.gnuplot.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://gnuplot.sourceforge.net&quot;&gt;http://gnuplot.sourceforge.net&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The first seems to be the &amp;quot;official&amp;quot; one, but is sometimes offline? The second looks like a mirror.&lt;/p&gt;
&lt;p&gt;You can use the help command to read the documentation inside the Gnuplot REPL too.&lt;/p&gt;
&lt;p&gt;An important concept is that of the terminal, as seen above being set to SVG. It&#39;s nothing but an &amp;quot;output backend&amp;quot;, and Gnuplot has tons of those -- run set terminal and see for yourself; there&#39;s even one to output ASCII art to the terminal! Different terminals may have different specific options -- RTFM for those.&lt;/p&gt;
&lt;p&gt;Once you start messing around with line styles, line types, colors, and whatnot, it&#39;s helpful to know what the valid values are. For that use the test command after setting the terminal (the result of the test command varies depending on the terminal, so it&#39;s important to set it):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set terminal svg
set output &amp;quot;gnuplot-test.svg&amp;quot;
test
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;gnuplot-test.gp&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;gnuplot-test.svg&quot; alt /&gt;&lt;/p&gt;
&lt;p&gt;Variables are a thing, and you can define them just as you&#39;d expect:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;some_var = 42
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To plot data from files just pass the filename to plot:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot &amp;quot;/path/to/file.tsv&amp;quot; # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Gnuplot is supposed to support many different formats but I don&#39;t know details here. I&#39;ve been using TSV because it makes sense. For tabular data files (TSV, CSV, ...), this may be useful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set datafile separator tab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;RTFM for details: help set datafile separator.&lt;/p&gt;
&lt;p&gt;It&#39;s possible to define datasets inside a Gnuplot script, too, like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot &amp;quot;-&amp;quot;
1 2
3 4
5 6
7 8
9 0
e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the e at the end! You can even define more than one for the same plot command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot &amp;quot;-&amp;quot;, &amp;quot;-&amp;quot;
1 2
3 4
5 6
7 8
9 0
e
2 1
4 3
6 5
8 7
0 9
e
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another arguably more useful way is to do it like so (notice the dollar!):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$SomeData &amp;lt;&amp;lt; EOD
1 2
4 5
7 8
EOD
plot $SomeData # ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This kind of inline data definition doesn&#39;t seem to work on the REPL though... At least I couldn&#39;t make it work.&lt;/p&gt;
&lt;p&gt;For tabular data files, files may have many columns, some that you want, some
that you don&#39;t, some that are in the wrong order... To solve that, you use
using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot &amp;quot;-&amp;quot; using 1:3
1 2 3
4 5 6
7 8 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above uses the first and third columns of the dataset.&lt;/p&gt;
&lt;p&gt;And with that, if you want to plot several graphs from the same dataset, you can do it like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;plot &amp;quot;/path/to/file.tsv&amp;quot; using 1:3, &amp;quot;&amp;quot; using 1:4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming the data file has at least 4 columns, the above will plot a line/w.e. using the first and third columns, and then another using the first and fourth columns. The empty string there is a shortcut to mean &amp;quot;the previous dataset/file&amp;quot;.&lt;/p&gt;
&lt;p&gt;For certain plot types, such as for errorlines or errorbars, you may want or need to use more than 2 columns of data.&lt;/p&gt;
&lt;p&gt;And a final plot, pretty much the most advanced I can get right now. The dataset&#39;s fields are separated by tabs but your browser or something may present them as spaces, so download the file for greater €€€profit€€€.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$Dataset &amp;lt;&amp;lt; EOD
NELEMS  RTIME-MEAN  RTIME-MIN   RTIME-MAX   TOTCYC-MEAN TOTCYC-MIN  TOTCYC-MAX  TOTINS-MEAN TOTINS-MIN  TOTINS-MAX  L1DCM-MEAN  L1DCM-MIN   L1DCM-MAX   L2DCM-MEAN  L2DCM-MIN   L2DCM-MAX
100 51.5    51  52  153107.0    151836  154378  49774.5 42768   56781   912.5   849 976 557.0   528 586
1000    386.4   373 396 1117484.4   1076454 1145864 652026.8    634123  680188  5681.0  5118    5990    1660.4  1300    1793
10000   29215.8 29061   29364   21425394.0  10119054    26280869    15941285.8  6979549 22139082    619685.8    169351  1140152 298639.6    17765   644415
100000  2852669.8   2845788 2859074 708231510.6 119757602   1080138950  1145341284.8    184498435   1753956316  93553900.2  13537085    144424582   72470004.8  2110199 120731566
200000  11472829.2  11426994    11502233    922765811.8 181797852   3298279336  1480628498.6    268678225   5359163617  120437869.6 19420767    444041994   87885551.2  2726575 385487784
300000  25821154.8  25729787    25883755    7291510319.0    393353142   9962527951  11904840316.2   594020363   16257913776 988685146.8 45337229    1351805549  907188629.2 12260881    1258022140
400000  45910144.6  45833530    46047114    680904937.0 670501982   689922089   1033095368.6    1029084389  1038083524  80272464.4  80011372    80610671    30805397.6  29580829    32181760
500000  71859779.2  71703444    72007099    11187695199.8   1031362427  25645713435 18329461121.4   1586757574  42172405522 1521273469.8    125041982   3509799991  1394315157.4    56848580    3340745801
600000  103237386.5 103196178   103278595   1492849041.0    1484306515  1501391567  2238479602.0    2234440484  2242518720  177991124.0 177535409   178446839   93661585.0  93119294    94203876
EOD

set terminal svg
set output &amp;quot;errorlines.svg&amp;quot;

# Tell Gnuplot that fields are separated by a tab, as briefly mentioned before.
set datafile separator tab

set title &amp;quot;Some shitty performance right here...&amp;quot;
set key left top

# Ask Gnuplot to use log scales for the XX, YY, and YY2 (right side) axes.
set logscale xyy2 10

set xtics nomirror
set ytics nomirror
set y2tics nomirror

set xlabel &amp;quot;#Elements&amp;quot;
set ylabel &amp;quot;Time (s)&amp;quot;
set y2label &amp;quot;L1 Cache Misses&amp;quot;

set grid

# The `($n/1000000)` syntax asks Gnuplot to divide the values of the field `n`
#   by 1000000 (in this case, the time is in microseconds, so dividing by
#   1000000 converts to secconds).
#
# `with yerrorlines` changes the style of plot, in this case lines with error
#   bars. `yerrorbars` is the same but without the connecting lines.
# Other common styles are `points` (the default?), `lines`, &amp;amp; `linespoints`.
# RTFM for more: `help with`.
#
# The `yerrorlines` style requires additional values. There are some different
#   alternatives (RTFM), but in this case the columns are x:y:ymin:ymax. In
#   this dataset I&#39;ve used the mean for the YY, but you may use whatever you
#   wish.
#
# `title columnheader` asks Gnuplot to automatically read the given line&#39;s
#   legend from the input dataset. Note that Gnuplot supports some LaTeX-like
#   formatting syntax for text. E.g., the text &amp;quot;RTIME_MEAN&amp;quot; would be rendered
#   as &amp;quot;RTIMEMEAN&amp;quot; with the the &amp;quot;M&amp;quot; of &amp;quot;MEAN&amp;quot; in subscript.
#
# Finally, `axis x1y1` &amp;amp; `axis x1y2` set the axes the data should be plotted in
#   -- x1 &amp;amp; x2 for bottom &amp;amp; top XX respectively; y1 &amp;amp; y2 for left &amp;amp; right YY
#   respectively.
plot $Dataset using 1:($2/1000000):($3/1000000):($4/1000000) with yerrorlines title columnheader axis x1y1,\
     &amp;quot;&amp;quot;       using 1:11:12:13                               with yerrorlines title columnheader axis x1y2
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;errorlines.gp&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;errorlines.svg&quot; alt /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Just a couple of notes on security, especially for someone wanting to develop an interface library. These are things that may be useful when writing and running scripts directly in Gnuplot, but that are a security nightmare if left as something to think about tomorrow.&lt;/p&gt;
&lt;p&gt;system() a la C is a thing!&lt;/p&gt;
&lt;p&gt;And so are backticks like in shell languages! The first line of the following Gnuplot code runs the echo command, but the second one doesn&#39;t:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;`echo hello from Gnuplot`&amp;quot;
&#39;`echo hello from Gnuplot`&#39;
&lt;/code&gt;&lt;/pre&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/algebra/faucets.gmi</id>
  <title type="text">Faucets</title>
  <updated>2022-07-14T00:00:00Z</updated>
  <published>2021-07-23T00:00:00Z</published>
  <link href="https://siiky.srht.site/algebra/faucets.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/algebra/faucets.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Faucets
@siiky
2021/07/23
2022/07/14

Recently I asked a bunch of people which one out of two types of faucets they prefer. The answers were pretty surprising (to me), as everyone chose the same type.

In this post I&#39;ll prove them wrong.

# The Problem

The state of a faucet determines 2 things: output pressure and temperature. In real life, many things affect water temperature, including external factors: water pressure (especially for hot water), if the pipes are exposed to the sun, rain, etc. Also in real life, it&#39;s not uncommon for the maximum hot water pressure to be lower than that of cold water. However, to KISS, we won&#39;t take these details into account. In the case of pressure, we&#39;ll just assume it&#39;s the same for both hot and cold water.

So, in our simplified model, the state of a faucet alone will determine the water state: both water temperature and output pressure.

The plan is to prove that the faucet types are functionally equivalent to each other, and that each type is fully functional.

We&#39;ll call two faucet types functionally equivalent iff they can both represent the same set of water states, i.e., if the codomain of the functions FaucetState → WaterState that represent each type is the same. And we&#39;ll call a faucet type fully functional iff it can represent all water states, i.e., there&#39;s a surjective function FaucetState → WaterState.

After proving that both types are equivalent in function, we&#39;ll follow by proving that it&#39;s not enough to be equivalent, and that in some respects one of them is better than the other.

# Water

Instead of dealing with actual values and their correct units, we&#39;ll simplify our model further and use percentages instead.

Water pressure will range from 0% (off, no water running), to 100% (water running to the faucet&#39;s full capacity). Likewise, temperature will range from 0% (the coldest water you can get out of the faucet), to 100% (the hottest water you can get out of the faucet).

The water pressure and temperature considered are the output pressure and temperature, that is, what you&#39;d feel right out of the faucet.

The types so far:

* Percentage :: 101 (or (roughly) equivalently [0, 1])
* WaterPressure :: Percentage
* WaterTemperature :: Percentage -- we&#39;ll say the temperature is the percentage of hot water in the total amount of water, which fits just right with the definition written in the paragraphs above
* WaterState :: WaterPressure ∗ WaterTemperature ≈ Percentage²

# Faucets

Let&#39;s start by introducing both contenders:

=&gt; type_a_faucet.png Type A faucet specimen
=&gt; type_b_faucet.png Type B faucet specimen

And now let&#39;s move on to the mathematical models.

## Type A

This faucet type has two 1D handles, or knobs: one for cold water, and one for hot water.

In this type of faucet, the water pressure is simply the sum of hot water pressure and cold water pressure. There&#39;s a catch, however: the pressure of hot and cold water being independent, the maximum hot and cold water pressure must be half of the maximum faucet water pressure.

And the water temperature is simply the ratio of hot water over the total amount of water:  hot water pressure over faucet pressure.

This is what we have algebraically:

* HotPressure :: Percentage
* ColdPressure :: Percentage
* FaucetState :: HotPressure ∗ ColdPressure

fA  :: FaucetState → WaterState
fA (h, c) ↦ ((h + c) / 2, h / (h + c))

### Proof

We want to prove that fA is surjective, that is: ∀ (p, t) ∈ WaterState: ∃ (h, c) ∈ FaucetState: fA(h, c) = (p, t)

So, let&#39;s fix some (p, t) ∈ WaterState; let&#39;s find our (h, c) ∈ FaucetState:

fA(h, c) = (p, t)
  ≣ { exercise for the reader }
h = 2pt ∧ c = 2(p-pt)

Try fA(2pt, 2(p - pt)) if you don&#39;t believe me. p-pt makes sense because p and t are percentages:

* The product of two percentages is also a percentage
* p ≥ pt ⇔ p-pt ≥ 0. Alternatively: p ≥ pt ⇔ 1 ≥ t ⇔ t ≤ 1

Another way to write c is 2p(1-t). Less obvious how to get to it, but more obvious what it means: the pressure of non-hot water, since t is the temperature (with greater meaning hotter).

## Type B

This faucet type has only one 2D handle: one dimension controls the water pressure, and the other the hot/cold water mixture. In this type of faucet, both the water pressure and temperature are the faucet&#39;s pressure and temperature, so its mathematical model is the simplest possible.

Algebraically:

* FaucetPressure :: Percentage
* FaucetHotPerc :: Percentage -- to make things easy, we&#39;ll say that the hot/cold water mixture dimension is to be represented simply as the percentage of hot water
* FaucetState :: FaucetPressure ∗ FaucetHotPerc ≈ WaterState

fB :: FaucetState → WaterState
fB(p, h) = (p, h)

### Proof

fB clearly is surjective, because it is the identity function.

## Of As and Bs

Since both faucet types are fully functional they&#39;re also functionally equivalent.

# As Used by Physical Beings through Mechanical Interaction

Did you notice something with the mathematical models?
I&#39;ll give you a hint: it&#39;s obvious -- I&#39;ve even mentioned it already.
Not there yet? Here&#39;s another: type B.
Right?! It is the epitome of simplicity!

Did you notice something else?
Here&#39;s a hint: it&#39;s not obvious.
Still not obvious? Here: type A.
Right?! Not a damn clue! But squint harder...

Here goes by analogy: ever tried to move a (computer) cursor on a single axis (vertical, horizontal, doesn&#39;t matter) with a (computer) mouse? I&#39;ll bet you have! I&#39;ll also bet you&#39;ve very rarely (and barely) did so satisfactorily, even if trying very hard! This is easily explained, because while we aim to affect one dimension only, the controls we have available for use affect more than that one dimension, and one may simultaneously (and unintentionally) affect more than that one dimension.

How does this translate to the faucets discussion? Faucets B require you to set one or two parameters with a single 2D control, that is, set one or two parameters simultaneously. While with faucets A you&#39;re only required to set a single parameter at a time, through a single 1D control for each parameter.

Imagine you&#39;re enjoying the current temperature but not so much the current current. Or maybe you like the current but wish it was a tad hotter. What do you do if you have a faucet A? Just change the thing right away! What do you do if you have a faucet B? Roll for luck!

For us, physical beings using faucets through mechanical interaction, it follows that faucets A are superior.

I can think of more reasons to justify the superiority of faucets A, but I&#39;ll leave them for another post, maybe.

=&gt; https://en.wikipedia.org/wiki/KISS_principle KISS
  </content>
  <content type="text/html">

&lt;h1&gt;Faucets&lt;/h1&gt;
&lt;p&gt;@siiky
2021/07/23
2022/07/14&lt;/p&gt;
&lt;p&gt;Recently I asked a bunch of people which one out of two types of faucets they prefer. The answers were pretty surprising (to me), as everyone chose the same type.&lt;/p&gt;
&lt;p&gt;In this post I&#39;ll prove them wrong.&lt;/p&gt;
&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;The state of a faucet determines 2 things: output pressure and temperature. In real life, many things affect water temperature, including external factors: water pressure (especially for hot water), if the pipes are exposed to the sun, rain, etc. Also in real life, it&#39;s not uncommon for the maximum hot water pressure to be lower than that of cold water. However, to KISS, we won&#39;t take these details into account. In the case of pressure, we&#39;ll just assume it&#39;s the same for both hot and cold water.&lt;/p&gt;
&lt;p&gt;So, in our simplified model, the state of a faucet alone will determine the water state: both water temperature and output pressure.&lt;/p&gt;
&lt;p&gt;The plan is to prove that the faucet types are functionally equivalent to each other, and that each type is fully functional.&lt;/p&gt;
&lt;p&gt;We&#39;ll call two faucet types functionally equivalent iff they can both represent the same set of water states, i.e., if the codomain of the functions FaucetState → WaterState that represent each type is the same. And we&#39;ll call a faucet type fully functional iff it can represent all water states, i.e., there&#39;s a surjective function FaucetState → WaterState.&lt;/p&gt;
&lt;p&gt;After proving that both types are equivalent in function, we&#39;ll follow by proving that it&#39;s not enough to be equivalent, and that in some respects one of them is better than the other.&lt;/p&gt;
&lt;h1&gt;Water&lt;/h1&gt;
&lt;p&gt;Instead of dealing with actual values and their correct units, we&#39;ll simplify our model further and use percentages instead.&lt;/p&gt;
&lt;p&gt;Water pressure will range from 0% (off, no water running), to 100% (water running to the faucet&#39;s full capacity). Likewise, temperature will range from 0% (the coldest water you can get out of the faucet), to 100% (the hottest water you can get out of the faucet).&lt;/p&gt;
&lt;p&gt;The water pressure and temperature considered are the output pressure and temperature, that is, what you&#39;d feel right out of the faucet.&lt;/p&gt;
&lt;p&gt;The types so far:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Percentage :: 101 (or (roughly) equivalently [0, 1])&lt;/li&gt;
&lt;li&gt;WaterPressure :: Percentage&lt;/li&gt;
&lt;li&gt;WaterTemperature :: Percentage -- we&#39;ll say the temperature is the percentage of hot water in the total amount of water, which fits just right with the definition written in the paragraphs above&lt;/li&gt;
&lt;li&gt;WaterState :: WaterPressure ∗ WaterTemperature ≈ Percentage²&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Faucets&lt;/h1&gt;
&lt;p&gt;Let&#39;s start by introducing both contenders:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;type_a_faucet.png&quot; alt=&quot;Type A faucet specimen&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;type_b_faucet.png&quot; alt=&quot;Type B faucet specimen&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And now let&#39;s move on to the mathematical models.&lt;/p&gt;
&lt;h2&gt;Type A&lt;/h2&gt;
&lt;p&gt;This faucet type has two 1D handles, or knobs: one for cold water, and one for hot water.&lt;/p&gt;
&lt;p&gt;In this type of faucet, the water pressure is simply the sum of hot water pressure and cold water pressure. There&#39;s a catch, however: the pressure of hot and cold water being independent, the maximum hot and cold water pressure must be half of the maximum faucet water pressure.&lt;/p&gt;
&lt;p&gt;And the water temperature is simply the ratio of hot water over the total amount of water:  hot water pressure over faucet pressure.&lt;/p&gt;
&lt;p&gt;This is what we have algebraically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HotPressure :: Percentage&lt;/li&gt;
&lt;li&gt;ColdPressure :: Percentage&lt;/li&gt;
&lt;li&gt;FaucetState :: HotPressure ∗ ColdPressure&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;fA  :: FaucetState → WaterState
fA (h, c) ↦ ((h + c) / 2, h / (h + c))&lt;/p&gt;
&lt;h3&gt;Proof&lt;/h3&gt;
&lt;p&gt;We want to prove that fA is surjective, that is: ∀ (p, t) ∈ WaterState: ∃ (h, c) ∈ FaucetState: fA(h, c) = (p, t)&lt;/p&gt;
&lt;p&gt;So, let&#39;s fix some (p, t) ∈ WaterState; let&#39;s find our (h, c) ∈ FaucetState:&lt;/p&gt;
&lt;p&gt;fA(h, c) = (p, t)
  ≣ { exercise for the reader }
h = 2pt ∧ c = 2(p-pt)&lt;/p&gt;
&lt;p&gt;Try fA(2pt, 2(p - pt)) if you don&#39;t believe me. p-pt makes sense because p and t are percentages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The product of two percentages is also a percentage&lt;/li&gt;
&lt;li&gt;p ≥ pt ⇔ p-pt ≥ 0. Alternatively: p ≥ pt ⇔ 1 ≥ t ⇔ t ≤ 1&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Another way to write c is 2p(1-t). Less obvious how to get to it, but more obvious what it means: the pressure of non-hot water, since t is the temperature (with greater meaning hotter).&lt;/p&gt;
&lt;h2&gt;Type B&lt;/h2&gt;
&lt;p&gt;This faucet type has only one 2D handle: one dimension controls the water pressure, and the other the hot/cold water mixture. In this type of faucet, both the water pressure and temperature are the faucet&#39;s pressure and temperature, so its mathematical model is the simplest possible.&lt;/p&gt;
&lt;p&gt;Algebraically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FaucetPressure :: Percentage&lt;/li&gt;
&lt;li&gt;FaucetHotPerc :: Percentage -- to make things easy, we&#39;ll say that the hot/cold water mixture dimension is to be represented simply as the percentage of hot water&lt;/li&gt;
&lt;li&gt;FaucetState :: FaucetPressure ∗ FaucetHotPerc ≈ WaterState&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;fB :: FaucetState → WaterState
fB(p, h) = (p, h)&lt;/p&gt;
&lt;h3&gt;Proof&lt;/h3&gt;
&lt;p&gt;fB clearly is surjective, because it is the identity function.&lt;/p&gt;
&lt;h2&gt;Of As and Bs&lt;/h2&gt;
&lt;p&gt;Since both faucet types are fully functional they&#39;re also functionally equivalent.&lt;/p&gt;
&lt;h1&gt;As Used by Physical Beings through Mechanical Interaction&lt;/h1&gt;
&lt;p&gt;Did you notice something with the mathematical models?
I&#39;ll give you a hint: it&#39;s obvious -- I&#39;ve even mentioned it already.
Not there yet? Here&#39;s another: type B.
Right?! It is the epitome of simplicity!&lt;/p&gt;
&lt;p&gt;Did you notice something else?
Here&#39;s a hint: it&#39;s not obvious.
Still not obvious? Here: type A.
Right?! Not a damn clue! But squint harder...&lt;/p&gt;
&lt;p&gt;Here goes by analogy: ever tried to move a (computer) cursor on a single axis (vertical, horizontal, doesn&#39;t matter) with a (computer) mouse? I&#39;ll bet you have! I&#39;ll also bet you&#39;ve very rarely (and barely) did so satisfactorily, even if trying very hard! This is easily explained, because while we aim to affect one dimension only, the controls we have available for use affect more than that one dimension, and one may simultaneously (and unintentionally) affect more than that one dimension.&lt;/p&gt;
&lt;p&gt;How does this translate to the faucets discussion? Faucets B require you to set one or two parameters with a single 2D control, that is, set one or two parameters simultaneously. While with faucets A you&#39;re only required to set a single parameter at a time, through a single 1D control for each parameter.&lt;/p&gt;
&lt;p&gt;Imagine you&#39;re enjoying the current temperature but not so much the current current. Or maybe you like the current but wish it was a tad hotter. What do you do if you have a faucet A? Just change the thing right away! What do you do if you have a faucet B? Roll for luck!&lt;/p&gt;
&lt;p&gt;For us, physical beings using faucets through mechanical interaction, it follows that faucets A are superior.&lt;/p&gt;
&lt;p&gt;I can think of more reasons to justify the superiority of faucets A, but I&#39;ll leave them for another post, maybe.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/KISS_principle&quot;&gt;KISS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/algebra/cat_theory_perf.gmi</id>
  <title type="text">Category Theory and Performance</title>
  <updated>2022-07-14T00:00:00Z</updated>
  <published>2019-10-15T00:00:00Z</published>
  <link href="https://siiky.srht.site/algebra/cat_theory_perf.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/algebra/cat_theory_perf.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Category Theory and Performance
@siiky
2019/10/15
2022/07/14

Imagine for a second that we understand Category Theory. Now imagine that we have a fancy category, representing a part of a program, with two objects X and Y (representing the input and output types of our program respectively), and morphisms f : X → Y and g : Y → X (because this is a category). This is what we have:

=&gt; ctp-cat.svg Some category

Imagine now that there&#39;s a (reasonable) way to determine if two morphisms are equal. That is, given f, g : X → Y, f and g are equal iff, ∀ x ∈ X: f(x) = g(x).

Imagine there&#39;s also a way to analyze performance of a given morphism. We&#39;ll represent the performance of a given morphism f as P(f). The lesser P(f) is, for any given morphism, the better.

From this category we&#39;ll generate a new one where the morphisms are annotated along with their performance. We&#39;ll represent an annotated morphism f as (f, P(f)). Like so:

=&gt; ctp-cat-perf.svg Some category w/ performance analysis

Application of a morphism to an object and composition of morphisms ignores the right component of the tuple:

* (f, P(f))(x) = f(x)
* (g, P(g)) • (f, P(f)) = (g•f, P(g•f))

And thus, for this post, I&#39;ll say that &quot;two morphisms are equal&quot; to mean that the &quot;plain morphism&quot; is equal, that is, ignoring the right component of the tuples; and I&#39;ll say that &quot;two morphisms are the same&quot; when both components of the tuple are equal. Think of two different implementations of a certain abstract algorithm. Both implementations perform the same operation, but they&#39;re not the same implementation, they (may) have different properties. We&#39;re interested in performance here.

Some properties right away:

* Two equal morphisms do not necessarily have equal performance: ¬(f = g ⇒ P(f) = P(g)).
* Two morphisms with the same performance aren&#39;t necessarily equal: ¬(P(f) = P(g) ⇒ f = g)
* Two morphisms with different performance aren&#39;t necessarity different: ¬(P(f) ≠ P(g) ⇒ f ≠ g)

The latter two don&#39;t add much to our toolbox.

Now, from our original category, we&#39;ll forsake g, because who cares, and we&#39;ll add to it a morphism h equal to f.

=&gt; ctp-cat-perf-h.svg Category w/ performance analysis &amp; h

Because f = h, improving the performance of our program, without changing its results, consists in choosing the morphism with better performance. If P(f) &lt; P(h), choose f; if P(h) &lt; P(f), choose h; otherwise, ask your mirror for the prettier of the two.

&quot;What&#39;s this all good for?&quot; you may ask! Nothing, really, if you don&#39;t use it. We like imagining, so we&#39;ll do it once more: there&#39;s a complicated (imaginary) category representing our complicated (imaginary) program, with performance annotations. The program takes an input I and transforms it into some output O. For simplicity, we&#39;ll only represent the most performant morphism between each two objects.

=&gt; ctp-complicated-cat.svg Complicated Category

Omitted labels because they clutter too much. {X, Y, Z, W} form a complete graph. Now finding the most performant way to write our program is finding the shortest weighted path between I and O, with the performance as the weight. The hardest part is coming up with different implementations and analyzing their performance, really, because even a computer can find the best way to optimize the program!

=&gt; https://en.wikipedia.org/wiki/Category_theory Category Theory
=&gt; https://en.wikipedia.org/wiki/Category_(mathematics) Category
  </content>
  <content type="text/html">

&lt;h1&gt;Category Theory and Performance&lt;/h1&gt;
&lt;p&gt;@siiky
2019/10/15
2022/07/14&lt;/p&gt;
&lt;p&gt;Imagine for a second that we understand Category Theory. Now imagine that we have a fancy category, representing a part of a program, with two objects X and Y (representing the input and output types of our program respectively), and morphisms f : X → Y and g : Y → X (because this is a category). This is what we have:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ctp-cat.svg&quot; alt=&quot;Some category&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Imagine now that there&#39;s a (reasonable) way to determine if two morphisms are equal. That is, given f, g : X → Y, f and g are equal iff, ∀ x ∈ X: f(x) = g(x).&lt;/p&gt;
&lt;p&gt;Imagine there&#39;s also a way to analyze performance of a given morphism. We&#39;ll represent the performance of a given morphism f as P(f). The lesser P(f) is, for any given morphism, the better.&lt;/p&gt;
&lt;p&gt;From this category we&#39;ll generate a new one where the morphisms are annotated along with their performance. We&#39;ll represent an annotated morphism f as (f, P(f)). Like so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ctp-cat-perf.svg&quot; alt=&quot;Some category w/ performance analysis&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Application of a morphism to an object and composition of morphisms ignores the right component of the tuple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(f, P(f))(x) = f(x)&lt;/li&gt;
&lt;li&gt;(g, P(g)) • (f, P(f)) = (g•f, P(g•f))&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;And thus, for this post, I&#39;ll say that &amp;quot;two morphisms are equal&amp;quot; to mean that the &amp;quot;plain morphism&amp;quot; is equal, that is, ignoring the right component of the tuples; and I&#39;ll say that &amp;quot;two morphisms are the same&amp;quot; when both components of the tuple are equal. Think of two different implementations of a certain abstract algorithm. Both implementations perform the same operation, but they&#39;re not the same implementation, they (may) have different properties. We&#39;re interested in performance here.&lt;/p&gt;
&lt;p&gt;Some properties right away:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two equal morphisms do not necessarily have equal performance: ¬(f = g ⇒ P(f) = P(g)).&lt;/li&gt;
&lt;li&gt;Two morphisms with the same performance aren&#39;t necessarily equal: ¬(P(f) = P(g) ⇒ f = g)&lt;/li&gt;
&lt;li&gt;Two morphisms with different performance aren&#39;t necessarity different: ¬(P(f) ≠ P(g) ⇒ f ≠ g)&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The latter two don&#39;t add much to our toolbox.&lt;/p&gt;
&lt;p&gt;Now, from our original category, we&#39;ll forsake g, because who cares, and we&#39;ll add to it a morphism h equal to f.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ctp-cat-perf-h.svg&quot; alt=&quot;Category w/ performance analysis &amp;amp; h&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Because f = h, improving the performance of our program, without changing its results, consists in choosing the morphism with better performance. If P(f) &amp;lt; P(h), choose f; if P(h) &amp;lt; P(f), choose h; otherwise, ask your mirror for the prettier of the two.&lt;/p&gt;
&lt;p&gt;&amp;quot;What&#39;s this all good for?&amp;quot; you may ask! Nothing, really, if you don&#39;t use it. We like imagining, so we&#39;ll do it once more: there&#39;s a complicated (imaginary) category representing our complicated (imaginary) program, with performance annotations. The program takes an input I and transforms it into some output O. For simplicity, we&#39;ll only represent the most performant morphism between each two objects.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ctp-complicated-cat.svg&quot; alt=&quot;Complicated Category&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Omitted labels because they clutter too much. {X, Y, Z, W} form a complete graph. Now finding the most performant way to write our program is finding the shortest weighted path between I and O, with the performance as the weight. The hardest part is coming up with different implementations and analyzing their performance, really, because even a computer can find the best way to optimize the program!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Category_theory&quot;&gt;Category Theory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Category_(mathematics)&quot;&gt;Category&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/scheme/gv-dsl.gmi</id>
  <title type="text">GraphViz Scheme DSL</title>
  <updated>2022-07-14T00:00:00Z</updated>
  <published>2019-10-01T00:00:00Z</published>
  <link href="https://siiky.srht.site/scheme/gv-dsl.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/scheme/gv-dsl.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# GraphViz Scheme DSL
@siiky
2019/10/01
2022/07/14

I&#39;ve (loosely) defined a DSL to represent GraphViz DOT in Scheme, and created a converter library &amp; program that takes the DSL as input and outputs .gv text. It almost certainly doesn&#39;t support all of the features of DOT, but I intentionally left out &quot;validation&quot; of input, because I don&#39;t know all of DOT and I don&#39;t pretend to. The DSL is not only a Scheme representation but also saves some work.

I use it on this site, for example:

=&gt; ../algebra/cat_theory_perf.gmi Category Theory and Performance

The code can be found online, but try not to read it, it&#39;s much too ugly. :/

=&gt; https://github.com/siiky/gvs siiky/gvs
  </content>
  <content type="text/html">

&lt;h1&gt;GraphViz Scheme DSL&lt;/h1&gt;
&lt;p&gt;@siiky
2019/10/01
2022/07/14&lt;/p&gt;
&lt;p&gt;I&#39;ve (loosely) defined a DSL to represent GraphViz DOT in Scheme, and created a converter library &amp;amp; program that takes the DSL as input and outputs .gv text. It almost certainly doesn&#39;t support all of the features of DOT, but I intentionally left out &amp;quot;validation&amp;quot; of input, because I don&#39;t know all of DOT and I don&#39;t pretend to. The DSL is not only a Scheme representation but also saves some work.&lt;/p&gt;
&lt;p&gt;I use it on this site, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../algebra/cat_theory_perf.gmi&quot;&gt;Category Theory and Performance&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The code can be found online, but try not to read it, it&#39;s much too ugly. :/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/siiky/gvs&quot;&gt;siiky/gvs&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/osm/overpass.gmi</id>
  <title type="text">Overpass</title>
  <updated>2022-07-12T00:00:00Z</updated>
  <published>2022-03-26T00:00:00Z</published>
  <link href="https://siiky.srht.site/osm/overpass.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/osm/overpass.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Overpass
@siiky
2022/03/26
2022/07/12

Overpass is an interface used to query OSM data. Overpass Turbo is an Overpass web client you can use to query OSM data, export it, &amp;c.

=&gt; https://overpass-turbo.eu Overpass Turbo
=&gt; https://wiki.openstreetmap.org/wiki/Overpass_turbo Overpass Turbo (OSM Wiki)
=&gt; https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL Overpass Query Language
=&gt; https://wiki.openstreetmap.org/wiki/Overpass_API Overpass API

## Useful Queries

This is a list of useful queries I&#39;ve learned over time.

### Features last modified by an user

Nodes, ways, or relations last modified by &quot;user name&quot;:

```
nwr(user:&quot;user name&quot;)({{bbox}});
out body;
```

### Features modified between two dates

Node, way, or relation amenities modified between 2022-02-04T00:00:00Z and &quot;to-date&quot;:

```
// to-date is optional and defaults to now
[diff:&quot;2022-02-04T00:00:00Z&quot;,&quot;to-date&quot;];
nwr[&quot;amenity&quot;]({{bbox}});
out body;
```

### Features around other features

Picnic sites within a 1km radius of restaurants with takeaway:

```
node[amenity=restaurant][takeaway=yes]({{bbox}});
node(around:1000)[tourism=picnic_site];
out body;
```

### Features inside some area object

Libraries in Portugal:

```
nwr[&quot;amenity&quot;=&quot;library&quot;](area:3600295480);
out body;

// Or:

area(3600295480)-&gt;.searchArea;
(nwr[&quot;amenity&quot;=&quot;library&quot;](area.searchArea););
out body;
&gt;;
out skel qt;
```

I don&#39;t understand the difference between the two yet, but the latter is supposed to be more correct. All I know is that &gt;; makes the query recursive (whatever that means).

Found on StackOverflow an explanation of the area:XXX:

&gt; If the polygon you want to query inside of is an OSM feature, you can also query using an area ID.
&gt;
&gt; Area IDs are generated by the Overpass server to make querying data within existing polygons easier. You can determine the area ID for a way by adding 2400000000 to the way ID and the area ID for a relation by adding 3600000000 to the relation ID (assuming that the way or relation is a valid area feature).

=&gt; https://stackoverflow.com/a/65982945

I found Portugal&#39;s relation object, which is the relation 295480, and 3600000000+295480=3600295480.

=&gt; https://www.openstreetmap.org/relation/295480
  </content>
  <content type="text/html">

&lt;h1&gt;Overpass&lt;/h1&gt;
&lt;p&gt;@siiky
2022/03/26
2022/07/12&lt;/p&gt;
&lt;p&gt;Overpass is an interface used to query OSM data. Overpass Turbo is an Overpass web client you can use to query OSM data, export it, &amp;amp;c.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://overpass-turbo.eu&quot;&gt;Overpass Turbo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Overpass_turbo&quot;&gt;Overpass Turbo (OSM Wiki)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL&quot;&gt;Overpass Query Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.openstreetmap.org/wiki/Overpass_API&quot;&gt;Overpass API&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Useful Queries&lt;/h2&gt;
&lt;p&gt;This is a list of useful queries I&#39;ve learned over time.&lt;/p&gt;
&lt;h3&gt;Features last modified by an user&lt;/h3&gt;
&lt;p&gt;Nodes, ways, or relations last modified by &amp;quot;user name&amp;quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nwr(user:&amp;quot;user name&amp;quot;)({{bbox}});
out body;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Features modified between two dates&lt;/h3&gt;
&lt;p&gt;Node, way, or relation amenities modified between 2022-02-04T00:00:00Z and &amp;quot;to-date&amp;quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// to-date is optional and defaults to now
[diff:&amp;quot;2022-02-04T00:00:00Z&amp;quot;,&amp;quot;to-date&amp;quot;];
nwr[&amp;quot;amenity&amp;quot;]({{bbox}});
out body;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Features around other features&lt;/h3&gt;
&lt;p&gt;Picnic sites within a 1km radius of restaurants with takeaway:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node[amenity=restaurant][takeaway=yes]({{bbox}});
node(around:1000)[tourism=picnic_site];
out body;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Features inside some area object&lt;/h3&gt;
&lt;p&gt;Libraries in Portugal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nwr[&amp;quot;amenity&amp;quot;=&amp;quot;library&amp;quot;](area:3600295480);
out body;

// Or:

area(3600295480)-&amp;gt;.searchArea;
(nwr[&amp;quot;amenity&amp;quot;=&amp;quot;library&amp;quot;](area.searchArea););
out body;
&amp;gt;;
out skel qt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&#39;t understand the difference between the two yet, but the latter is supposed to be more correct. All I know is that &gt;; makes the query recursive (whatever that means).&lt;/p&gt;
&lt;p&gt;Found on StackOverflow an explanation of the area:XXX:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the polygon you want to query inside of is an OSM feature, you can also query using an area ID.&lt;/p&gt;
&lt;p&gt;Area IDs are generated by the Overpass server to make querying data within existing polygons easier. You can determine the area ID for a way by adding 2400000000 to the way ID and the area ID for a relation by adding 3600000000 to the relation ID (assuming that the way or relation is a valid area feature).&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/65982945&quot;&gt;https://stackoverflow.com/a/65982945&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;I found Portugal&#39;s relation object, which is the relation 295480, and 3600000000+295480=3600295480.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.openstreetmap.org/relation/295480&quot;&gt;https://www.openstreetmap.org/relation/295480&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/philosophy/donating.gmi</id>
  <title type="text">Donating</title>
  <updated>2022-07-08T00:00:00Z</updated>
  <published>2022-02-01T00:00:00Z</published>
  <link href="https://siiky.srht.site/philosophy/donating.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/philosophy/donating.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Donating
@siiky
2022/02/01
2022/07/08

What if there was a way to force oneself to donate?

Donating to projects you use, enjoy, or believe in, is a way to help ensure their sustainability. However, for some reason that I haven&#39;t figured out yet, it&#39;s hard to get going. Won&#39;t try to speak for anyone else, but as for me, there&#39;s always a what if, such as, what if I had donated to this instead of that? what if this turns out to be evil?

My mom, who earns in a month less than me by half, used to donate more than me. I can&#39;t believe I&#39;m unique in that; I&#39;m sure there are many people out there that can donate (have the monetary power) but don&#39;t.

Think of everything that you use or have used for free, think only of things that are distributed freely by their creators and that you haven&#39;t paid for nor donated to; realize that it took effort to create it, and that otherwise, e.g. with a book or a movie, you&#39;d have to pay for it somewhere; given that you haven&#39;t paid for it, it should be obvious that you&#39;re committing &quot;theft&quot;. Theft is probably on everyone&#39;s naughty list; assuming that we are and/or want to be ethical, then it&#39;s something to avoid.

I understand that this is so oversimplified it almost couldn&#39;t be at all helpful. And I&#39;m sure I&#39;ve overlooked many aspects of the whole situation.

But this isn&#39;t supposed to be some very deep philosophical thinking. It&#39;s just a bit of rhetoric to try and convince people to donate to things they enjoy and would like to keep afloat.

Using rhetoric to improve people... I bet Plato didn&#39;t see that coming!

=&gt; https://www.gutenberg.org/ebooks/1672 Gorgias
  </content>
  <content type="text/html">

&lt;h1&gt;Donating&lt;/h1&gt;
&lt;p&gt;@siiky
2022/02/01
2022/07/08&lt;/p&gt;
&lt;p&gt;What if there was a way to force oneself to donate?&lt;/p&gt;
&lt;p&gt;Donating to projects you use, enjoy, or believe in, is a way to help ensure their sustainability. However, for some reason that I haven&#39;t figured out yet, it&#39;s hard to get going. Won&#39;t try to speak for anyone else, but as for me, there&#39;s always a what if, such as, what if I had donated to this instead of that? what if this turns out to be evil?&lt;/p&gt;
&lt;p&gt;My mom, who earns in a month less than me by half, used to donate more than me. I can&#39;t believe I&#39;m unique in that; I&#39;m sure there are many people out there that can donate (have the monetary power) but don&#39;t.&lt;/p&gt;
&lt;p&gt;Think of everything that you use or have used for free, think only of things that are distributed freely by their creators and that you haven&#39;t paid for nor donated to; realize that it took effort to create it, and that otherwise, e.g. with a book or a movie, you&#39;d have to pay for it somewhere; given that you haven&#39;t paid for it, it should be obvious that you&#39;re committing &amp;quot;theft&amp;quot;. Theft is probably on everyone&#39;s naughty list; assuming that we are and/or want to be ethical, then it&#39;s something to avoid.&lt;/p&gt;
&lt;p&gt;I understand that this is so oversimplified it almost couldn&#39;t be at all helpful. And I&#39;m sure I&#39;ve overlooked many aspects of the whole situation.&lt;/p&gt;
&lt;p&gt;But this isn&#39;t supposed to be some very deep philosophical thinking. It&#39;s just a bit of rhetoric to try and convince people to donate to things they enjoy and would like to keep afloat.&lt;/p&gt;
&lt;p&gt;Using rhetoric to improve people... I bet Plato didn&#39;t see that coming!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/1672&quot;&gt;Gorgias&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/osm/prettymaps.gmi</id>
  <title type="text">prettymaps</title>
  <updated>2022-07-08T00:00:00Z</updated>
  <published>2022-01-22T00:00:00Z</published>
  <link href="https://siiky.srht.site/osm/prettymaps.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/osm/prettymaps.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# prettymaps
@siiky
2022/01/22
2022/07/08

Found this library reading WeeklyOSM 580 called prettymaps:

=&gt; https://weeklyosm.eu/archives/14825 WeeklyOSM 580
=&gt; https://github.com/marceloprates/prettymaps prettymaps

It does indeed create pretty maps!

Found also a website that exposes a limited set of options to the library.

=&gt; https://prettymaps-online-nzcbpymxfq-uc.a.run.app

And created this pretty thing from an area in Seia.

=&gt; https://www.openstreetmap.org/#map=16/40.4144/-7.7073 Seia
=&gt; seia.png
  </content>
  <content type="text/html">

&lt;h1&gt;prettymaps&lt;/h1&gt;
&lt;p&gt;@siiky
2022/01/22
2022/07/08&lt;/p&gt;
&lt;p&gt;Found this library reading WeeklyOSM 580 called prettymaps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://weeklyosm.eu/archives/14825&quot;&gt;WeeklyOSM 580&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/marceloprates/prettymaps&quot;&gt;prettymaps&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;It does indeed create pretty maps!&lt;/p&gt;
&lt;p&gt;Found also a website that exposes a limited set of options to the library.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://prettymaps-online-nzcbpymxfq-uc.a.run.app&quot;&gt;https://prettymaps-online-nzcbpymxfq-uc.a.run.app&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;And created this pretty thing from an area in Seia.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.openstreetmap.org/#map=16/40.4144/-7.7073&quot;&gt;Seia&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;seia.png&quot; alt /&gt;&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/kB45oC/mirrors.gmi</id>
  <title type="text">Content-based Mirrors</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2022-06-09T00:00:00Z</published>
  <link href="https://siiky.srht.site/kB45oC/mirrors.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/kB45oC/mirrors.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Content-based Mirrors
@siiky
2022/06/09
2022/07/07

Contacted SEP yesterday asking if there was a way to make personal archives/mirrors of either the whole site or several entries.

=&gt; https://plato.stanford.edu Stanford Encyclopedia of Philosophy

They kindly replied (aweome, and thanks!) quoting the Terms of Use¹, saying that I have permission to freely crawl/download entries for personal use, within reasonable network use (1. User Rights) -- I just can&#39;t make them public (non-personal) (2b. &amp; 2d. Limited Electronic Distribution Rights).

=&gt; https://plato.stanford.edu/info.html#terms Terms of Use

While I don&#39;t mean to convince them of anything, it gave me the idea for this post: big sites that publish content publicly for free use are a great fit for experimenting with novel means of distribution and archival other than the good (bad) old HTTP we have today.

More specifically, I&#39;ll try to convince you that content-based content addressing is a better alternative to location-based content addressing (the current web), and try to explain how and why.

=&gt; https://en.wikipedia.org/wiki/Content-addressable_network Content-addressable network (Wikipedia)
=&gt; https://docs.ipfs.io/concepts/glossary/#content-addressing Content addressing (IPFS glossary)

To make writing easier, I&#39;ll pick the Debian package repos as a sort of &quot;case study&quot;, but other package repositories would work equally well (Arch, Nix, F-Droid, Flathub, ...). A good alternative would be any Wikimedia site, such as Wikipedia.² I&#39;ll write about mirrors but much of it applies to archives equally well. Although some of the points I&#39;ll raise may have nuances that make more sense to sites or to package repos, to archives or to mirrors, the spirit is there!

## Location-based Addressing

Let&#39;s start with content.

Setting up a mirror site isn&#39;t for just about anyone. You can&#39;t wake up one day and think &quot;yup, feel like mirroring Debian&#39;s repos starting today.&quot; Ignoring technical requirements, there&#39;s too much bureaucracy for you to decide it on such a whim.³ But is this bureaucracy necessary? I don&#39;t think so, I think it&#39;s only a symptom of the current web.

On the current web (location-based), when you go to https://example.com/some-page.html you don&#39;t know what you&#39;re gonna get. Hopefully whatever it is you&#39;re looking for, but you just can&#39;t know. Plus, the content you get from a location may change from today to tomorrow -- a very important point.

Imagine if anyone could claim to be a Debian mirror. Users set example.com/debian-repo in sources.list, thinking they&#39;re getting the official Debian packages, but (dramatic plot twist) the mirror is malicious and all the packages play nyan cat in loop.

To emphasize it: there&#39;s no way for a site to prove what content it&#39;s serving, or for you to know that you&#39;ll get what you&#39;re expecting.⁴ When you visit some page on the current web, you have to trust the site. And because the content delivered from a particular location may change, the trustworthy sites of today may not be so tomorrow.

What would the consequences be if a hypothetical Debian mirror was/became malicious? Assuming it was an &quot;official&quot; one (listed on the mirrors): Debian would have to drop it from the list; damage to its users resulting from it couldn&#39;t be undone (or very unlikely); but worst of all, the rules for registering as a mirror would very likely become stricter in an effort to avoid another incident, thus making the content more centralized.

=&gt; https://www.debian.org/mirror/list Debian mirrors

## Content-based Addressing

In contrast, in a content-based system, content is uniquely identified by something⁵, so that when you ask for content ABC you&#39;ll get ABC, not XYZ. This has lots of implications!

Side note: a content-based system needn&#39;t necessarily be a public P2P network, but since the post is about publicly shared &amp; shareable content, it&#39;s what makes most sense, and what I&#39;ll use as a model here, with all the bad (good) that comes with it.

First, since the content is no longer tied to a trusted entity (site owner/operator), the content can be distributed by anyone, and the system can take care of making sure the content you get corresponds to the content you request.

With the trust deal sealed, the bureaucracy is no longer necessary. If Debian&#39;s repos were available through such a system, deciding to mirror them from one day to the next wouldn&#39;t be unthinkable! You could easily opt-in to mirror their repos, and they could trust the system to deliver users the (authentic) packages they request, independently of whom they get the packages from.

Since anyone can safely share the content with anyone else more easily, more people can join in and help share that content. I could share the packages I have installed on my own PCs, for example, helping others download them too.

Bonus benefit: Debian&#39;s traffic would decrease, and file transfer would be more local, that is, you&#39;d generally get the files from your closest neighbors (that have them, of course), making the whole packaging system more robust (resilient) -- even if Debian&#39;s servers go down, I can install things as long as I can connect to anyone that has them.

=&gt; https://en.wikipedia.org/wiki/Resilience_%28network%29 Network resiliency (Wikipedia)

Unfortunately, however, this is only the ideal. For some reason unbeknownst to me, people prefer to stick with the archaic C-S architecture and the so very great HTTP centralized web.

=&gt; https://en.wikipedia.org/wiki/Client%E2%80%93server_model C-S architecture (Wikipedia)

The only problem I haven&#39;t mentioned yet is that we don&#39;t want content to be immutable (one of the implications of content-based addressing). There must be a way to &quot;update&quot; content. Put another way, we still need some form of location-based addressing, of which there are some. One is for the content owner to provide the latest &quot;root&quot; address through some current means, e.g., https://debian.org/root-content, so that I can ask Debian for the latest content, but fetch it from other peers. Another is to bake a similar mechanism into the system itself -- entities may publish the latest &quot;root&quot; address to the network on a known address (location-based but not necessarily human-readable/human-friendly).

## IPFS

Now, I didn&#39;t come up with any of these ideas myself. I tried to make the post a bit generic, but always thinking of a particular network in the background. And it should be unsurprising that this network should be IPFS. It&#39;s the best content-based addressable P2P content distribution network that I know of to date.

I won&#39;t go into details here, but there&#39;s a &quot;namespace&quot; of content-identifiers (CIDs), and two network schemes: one for content-based addressing (IPFS, ipfs://) and another for location-based addressing (IPNS, ipns://).⁶

Unfortunately, IPNS is yet to become generally practical. And, as is common of P2P content distribuition networks, unpopular content is hard to get (especially slow to find). Finally, the &quot;reference&quot; IPFS node implementation, Kubo (previously known as go-ipfs), is a bit more resource hungry than BitTorrent clients.⁷

## Footnotes

¹ I hadn&#39;t come across the ToU before while browsing the site (refreshing!) and even had some trouble finding them after the email.

² Except there are no &quot;official&quot; Wikipedia mirrors, and no restrictions or bureaucracies to become one.

=&gt; https://en.wikipedia.org/wiki/Wikipedia:Mirrors_and_forks Mirrors and forks (Wikipedia)
=&gt; https://en.wikipedia.org/wiki/Wikipedia:FAQ/Forking Forking FAQ (Wikipedia)

³ Admittedly, much less than I would ever have expected: a manual request! But even this little is already too much...

=&gt; https://www.debian.org/mirror/ftpmirror Setting up a Debian archive mirror

⁴ In the particular case of package repos, a list of checksums, for example, could be downloaded from the official repos, and used to confirm individual files haven&#39;t been altered (apt uses a simple &quot;clock&quot; version to detect outdated mirrors but nothing else). Authenticity of files could be checked using, for example, pubkey cryptography (apt does this), but still there are caveats -- you know a file came from who you expect, but not that it *is* the file you want.

⁵ This is a technical implementation detail, but if it makes it easier to understand you can think of it as a cryptographic hash of the content. It&#39;s only important that the something be determinisc and based on the content itself.

⁶ The CID &quot;namespace&quot; is shared, so the same CID may identify different content depending on the scheme (ipfs:// or ipns://), as should be expected.

⁷ While you may be able to run a BT client on a phone, for example, a full IPFS node would likely be inefficient/slow -- a Raspberry Pi 2 can still manage it for light use. Version v0.13.0 introduced some changes that make &quot;light nodes&quot; closer to a possibility, but no such (working) node exists as of now, AFAIK. Also new in this version is resource management configuration, making it possible to limit certain resources based on configuration. Previously you could only have some heuristics to &quot;garbage collect&quot; connected peers; now you can limit the number of connections, open FDs, maximum memory, &amp;c! My Raspberry Pi 2 is no longer beaten dead by IPFS. :3

=&gt; https://github.com/ipfs/go-ipfs/releases/tag/v0.13.0#support-for-block-and-car-response-formats IPFS v0.13.0 Release Notes
=&gt; https://github.com/ipfs/kubo/blob/master/docs/config.md#swarmresourcemgr IPFS resource management
  </content>
  <content type="text/html">

&lt;h1&gt;Content-based Mirrors&lt;/h1&gt;
&lt;p&gt;@siiky
2022/06/09
2022/07/07&lt;/p&gt;
&lt;p&gt;Contacted SEP yesterday asking if there was a way to make personal archives/mirrors of either the whole site or several entries.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plato.stanford.edu&quot;&gt;Stanford Encyclopedia of Philosophy&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;They kindly replied (aweome, and thanks!) quoting the Terms of Use¹, saying that I have permission to freely crawl/download entries for personal use, within reasonable network use (1. User Rights) -- I just can&#39;t make them public (non-personal) (2b. &amp;amp; 2d. Limited Electronic Distribution Rights).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://plato.stanford.edu/info.html#terms&quot;&gt;Terms of Use&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;While I don&#39;t mean to convince them of anything, it gave me the idea for this post: big sites that publish content publicly for free use are a great fit for experimenting with novel means of distribution and archival other than the good (bad) old HTTP we have today.&lt;/p&gt;
&lt;p&gt;More specifically, I&#39;ll try to convince you that content-based content addressing is a better alternative to location-based content addressing (the current web), and try to explain how and why.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Content-addressable_network&quot;&gt;Content-addressable network (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.ipfs.io/concepts/glossary/#content-addressing&quot;&gt;Content addressing (IPFS glossary)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;To make writing easier, I&#39;ll pick the Debian package repos as a sort of &amp;quot;case study&amp;quot;, but other package repositories would work equally well (Arch, Nix, F-Droid, Flathub, ...). A good alternative would be any Wikimedia site, such as Wikipedia.² I&#39;ll write about mirrors but much of it applies to archives equally well. Although some of the points I&#39;ll raise may have nuances that make more sense to sites or to package repos, to archives or to mirrors, the spirit is there!&lt;/p&gt;
&lt;h2&gt;Location-based Addressing&lt;/h2&gt;
&lt;p&gt;Let&#39;s start with content.&lt;/p&gt;
&lt;p&gt;Setting up a mirror site isn&#39;t for just about anyone. You can&#39;t wake up one day and think &amp;quot;yup, feel like mirroring Debian&#39;s repos starting today.&amp;quot; Ignoring technical requirements, there&#39;s too much bureaucracy for you to decide it on such a whim.³ But is this bureaucracy necessary? I don&#39;t think so, I think it&#39;s only a symptom of the current web.&lt;/p&gt;
&lt;p&gt;On the current web (location-based), when you go to https://example.com/some-page.html you don&#39;t know what you&#39;re gonna get. Hopefully whatever it is you&#39;re looking for, but you just can&#39;t know. Plus, the content you get from a location may change from today to tomorrow -- a very important point.&lt;/p&gt;
&lt;p&gt;Imagine if anyone could claim to be a Debian mirror. Users set example.com/debian-repo in sources.list, thinking they&#39;re getting the official Debian packages, but (dramatic plot twist) the mirror is malicious and all the packages play nyan cat in loop.&lt;/p&gt;
&lt;p&gt;To emphasize it: there&#39;s no way for a site to prove what content it&#39;s serving, or for you to know that you&#39;ll get what you&#39;re expecting.⁴ When you visit some page on the current web, you have to trust the site. And because the content delivered from a particular location may change, the trustworthy sites of today may not be so tomorrow.&lt;/p&gt;
&lt;p&gt;What would the consequences be if a hypothetical Debian mirror was/became malicious? Assuming it was an &amp;quot;official&amp;quot; one (listed on the mirrors): Debian would have to drop it from the list; damage to its users resulting from it couldn&#39;t be undone (or very unlikely); but worst of all, the rules for registering as a mirror would very likely become stricter in an effort to avoid another incident, thus making the content more centralized.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.debian.org/mirror/list&quot;&gt;Debian mirrors&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Content-based Addressing&lt;/h2&gt;
&lt;p&gt;In contrast, in a content-based system, content is uniquely identified by something⁵, so that when you ask for content ABC you&#39;ll get ABC, not XYZ. This has lots of implications!&lt;/p&gt;
&lt;p&gt;Side note: a content-based system needn&#39;t necessarily be a public P2P network, but since the post is about publicly shared &amp;amp; shareable content, it&#39;s what makes most sense, and what I&#39;ll use as a model here, with all the bad (good) that comes with it.&lt;/p&gt;
&lt;p&gt;First, since the content is no longer tied to a trusted entity (site owner/operator), the content can be distributed by anyone, and the system can take care of making sure the content you get corresponds to the content you request.&lt;/p&gt;
&lt;p&gt;With the trust deal sealed, the bureaucracy is no longer necessary. If Debian&#39;s repos were available through such a system, deciding to mirror them from one day to the next wouldn&#39;t be unthinkable! You could easily opt-in to mirror their repos, and they could trust the system to deliver users the (authentic) packages they request, independently of whom they get the packages from.&lt;/p&gt;
&lt;p&gt;Since anyone can safely share the content with anyone else more easily, more people can join in and help share that content. I could share the packages I have installed on my own PCs, for example, helping others download them too.&lt;/p&gt;
&lt;p&gt;Bonus benefit: Debian&#39;s traffic would decrease, and file transfer would be more local, that is, you&#39;d generally get the files from your closest neighbors (that have them, of course), making the whole packaging system more robust (resilient) -- even if Debian&#39;s servers go down, I can install things as long as I can connect to anyone that has them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Resilience_%28network%29&quot;&gt;Network resiliency (Wikipedia)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Unfortunately, however, this is only the ideal. For some reason unbeknownst to me, people prefer to stick with the archaic C-S architecture and the so very great HTTP centralized web.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Client%E2%80%93server_model&quot;&gt;C-S architecture (Wikipedia)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The only problem I haven&#39;t mentioned yet is that we don&#39;t want content to be immutable (one of the implications of content-based addressing). There must be a way to &amp;quot;update&amp;quot; content. Put another way, we still need some form of location-based addressing, of which there are some. One is for the content owner to provide the latest &amp;quot;root&amp;quot; address through some current means, e.g., https://debian.org/root-content, so that I can ask Debian for the latest content, but fetch it from other peers. Another is to bake a similar mechanism into the system itself -- entities may publish the latest &amp;quot;root&amp;quot; address to the network on a known address (location-based but not necessarily human-readable/human-friendly).&lt;/p&gt;
&lt;h2&gt;IPFS&lt;/h2&gt;
&lt;p&gt;Now, I didn&#39;t come up with any of these ideas myself. I tried to make the post a bit generic, but always thinking of a particular network in the background. And it should be unsurprising that this network should be IPFS. It&#39;s the best content-based addressable P2P content distribution network that I know of to date.&lt;/p&gt;
&lt;p&gt;I won&#39;t go into details here, but there&#39;s a &amp;quot;namespace&amp;quot; of content-identifiers (CIDs), and two network schemes: one for content-based addressing (IPFS, ipfs://) and another for location-based addressing (IPNS, ipns://).⁶&lt;/p&gt;
&lt;p&gt;Unfortunately, IPNS is yet to become generally practical. And, as is common of P2P content distribuition networks, unpopular content is hard to get (especially slow to find). Finally, the &amp;quot;reference&amp;quot; IPFS node implementation, Kubo (previously known as go-ipfs), is a bit more resource hungry than BitTorrent clients.⁷&lt;/p&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p&gt;¹ I hadn&#39;t come across the ToU before while browsing the site (refreshing!) and even had some trouble finding them after the email.&lt;/p&gt;
&lt;p&gt;² Except there are no &amp;quot;official&amp;quot; Wikipedia mirrors, and no restrictions or bureaucracies to become one.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Mirrors_and_forks&quot;&gt;Mirrors and forks (Wikipedia)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:FAQ/Forking&quot;&gt;Forking FAQ (Wikipedia)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;³ Admittedly, much less than I would ever have expected: a manual request! But even this little is already too much...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.debian.org/mirror/ftpmirror&quot;&gt;Setting up a Debian archive mirror&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;⁴ In the particular case of package repos, a list of checksums, for example, could be downloaded from the official repos, and used to confirm individual files haven&#39;t been altered (apt uses a simple &amp;quot;clock&amp;quot; version to detect outdated mirrors but nothing else). Authenticity of files could be checked using, for example, pubkey cryptography (apt does this), but still there are caveats -- you know a file came from who you expect, but not that it &lt;em&gt;is&lt;/em&gt; the file you want.&lt;/p&gt;
&lt;p&gt;⁵ This is a technical implementation detail, but if it makes it easier to understand you can think of it as a cryptographic hash of the content. It&#39;s only important that the something be determinisc and based on the content itself.&lt;/p&gt;
&lt;p&gt;⁶ The CID &amp;quot;namespace&amp;quot; is shared, so the same CID may identify different content depending on the scheme (ipfs:// or ipns://), as should be expected.&lt;/p&gt;
&lt;p&gt;⁷ While you may be able to run a BT client on a phone, for example, a full IPFS node would likely be inefficient/slow -- a Raspberry Pi 2 can still manage it for light use. Version v0.13.0 introduced some changes that make &amp;quot;light nodes&amp;quot; closer to a possibility, but no such (working) node exists as of now, AFAIK. Also new in this version is resource management configuration, making it possible to limit certain resources based on configuration. Previously you could only have some heuristics to &amp;quot;garbage collect&amp;quot; connected peers; now you can limit the number of connections, open FDs, maximum memory, &amp;amp;c! My Raspberry Pi 2 is no longer beaten dead by IPFS. :3&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ipfs/go-ipfs/releases/tag/v0.13.0#support-for-block-and-car-response-formats&quot;&gt;IPFS v0.13.0 Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ipfs/kubo/blob/master/docs/config.md#swarmresourcemgr&quot;&gt;IPFS resource management&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/words/covid.gmi</id>
  <title type="text">The COVID Experience</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2022-05-31T00:00:00Z</published>
  <link href="https://siiky.srht.site/words/covid.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/words/covid.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# The COVID Experience
@siiky
2022/05/31
2022/07/07

Late at the night of 2022/05/17, while reading Poe&#39;s The Murders in the Rue Morgue before going to sleep, I started feeling sick -- tired, minor headache, and raspy throat that started earlier during the day. The following morning I felt like total shit: I could barely stand, my head was killing me (the first real head ache I&#39;ve had in many years!), felt dizzy, my mouth dry as a bone yet water seemed like it did nothing. There was no goddamn paracetamol in the house, I would be alone until 19h~20h, and needless to say I couldn&#39;t go to the pharmacy myself. Luckily, my dad managed to escape work for a bit to bring me some, at around 13h... or 14h?... Don&#39;t remember now... Still hadn&#39;t eaten anything the whole morning, and I wasn&#39;t even hungry -- though this by itself isn&#39;t surprising since I started skipping breakfast close to one year ago, but let&#39;s leave that for another post -- and I slept most of the time -- sleeping was fuckin&#39; great! The paracetamol really helped, my unscientific and uninformed guess of a reason being that I rarely take any meds -- don&#39;t usually need &#39;em or I just 我慢 motherfucker! Because I can. Anyway, this was basically it for the first day: sleep, sleep, sleep. At the end of the day I did a COVID self-test and it gave positive -- &quot;Why settle for B- when you can have A+?&quot;, says Nicole&#39;s dad (insert appropriate Samuel L. Jackson motherfucker meme). At dinner I had soup but couldn&#39;t bring myself to eat even one third of what I usually eat. &quot;Weird,&quot; I thought, and shrugged back to sleep.

=&gt; ../books/list.gmi Edgar Allan Poe, The Murders in the Rue Morgue
=&gt; https://invidious.snopyta.org/watch?v=BSGXP6WENj0&amp;t=1m Nicole&#39;s dad

Thursday morning woke up at like 7h again... and still feeling like shit... Went through the bureaucracy of registering myself as a possible positive in the national health system and scheduling a confirmation lab test. Turns out, you don&#39;t actually schedule the test, you just wait for some code from the health system, and then you can go to any lab at any time and use the code for a free test. Went for mine at 14h, close to 15h. Damn nurses or whatever they are, sticking the damn cotton swab into you till it touches the back of your neck, and laughing all the while. For lunch I tried some chicken nuggets (of those you can just stick into the microwave), and guess what, it tasted so salty I couldn&#39;t taste anything else, at all, only salt. Had some bread afterwards -- at least that just didn&#39;t taste like anything. At dinner I had some soup again, but I could eat even less of it than the previous day. It tasted so bad I started feeling ill, nauseated. It&#39;s not that it didn&#39;t taste like anything, because of lack of smell and/or taste, but that it really tasted bad. I even tested it: smelled a some chocolate cookies, and they smelled fucking great! But tasted like shit...

On friday I woke up already feeling hungry, probably because I hadn&#39;t eaten that much since it all started. But I was so tired I went back to sleep. When I woke up again, close to lunch time, I was feeling even more tired and hungry. Since soup tasted like shit, but bread didn&#39;t, I decided to try something somewhat similar-ish, that I like a lot: tuna pasta! Except I made it plainer than radio music: water, pasta, tuna, and the smallest pinch of salt you could possibly pinch with your pinchy fingers. I was feeling so weak while cooking that I mouthed a coffee-spoonful of sugar for fear of passing out. I made it, managed to cook some without falling on my side, and still to get back to my room with food to eat! And I was so glad the pasta didn&#39;t taste like shit! I even went back for seconds! はい、お代わり！ It was enough for lunch, dinner, and lunch the next day (not that I made that much, I just didn&#39;t eat that much).

This food-tasting-like-shit-and-feeling-indisposed-afterwards continued throughout the following week, after I was supposed to be COVID-free already. But I&#39;m alright now, I think, and making plans for eating out one of these days.

Reading it back, I don&#39;t think I managed to convey well enough how bad this part of the experience was... I&#39;m not even sure that was the intent of the post, but wanted to make it clear now that it really was the worst part! If you can help avoid it, do! You really don&#39;t want food to taste like shit, it sucks ass. And if you do end up catching it, sleep as much as you can, it really helps.
  </content>
  <content type="text/html">

&lt;h1&gt;The COVID Experience&lt;/h1&gt;
&lt;p&gt;@siiky
2022/05/31
2022/07/07&lt;/p&gt;
&lt;p&gt;Late at the night of 2022/05/17, while reading Poe&#39;s The Murders in the Rue Morgue before going to sleep, I started feeling sick -- tired, minor headache, and raspy throat that started earlier during the day. The following morning I felt like total shit: I could barely stand, my head was killing me (the first real head ache I&#39;ve had in many years!), felt dizzy, my mouth dry as a bone yet water seemed like it did nothing. There was no goddamn paracetamol in the house, I would be alone until 19h~20h, and needless to say I couldn&#39;t go to the pharmacy myself. Luckily, my dad managed to escape work for a bit to bring me some, at around 13h... or 14h?... Don&#39;t remember now... Still hadn&#39;t eaten anything the whole morning, and I wasn&#39;t even hungry -- though this by itself isn&#39;t surprising since I started skipping breakfast close to one year ago, but let&#39;s leave that for another post -- and I slept most of the time -- sleeping was fuckin&#39; great! The paracetamol really helped, my unscientific and uninformed guess of a reason being that I rarely take any meds -- don&#39;t usually need &#39;em or I just 我慢 motherfucker! Because I can. Anyway, this was basically it for the first day: sleep, sleep, sleep. At the end of the day I did a COVID self-test and it gave positive -- &amp;quot;Why settle for B- when you can have A+?&amp;quot;, says Nicole&#39;s dad (insert appropriate Samuel L. Jackson motherfucker meme). At dinner I had soup but couldn&#39;t bring myself to eat even one third of what I usually eat. &amp;quot;Weird,&amp;quot; I thought, and shrugged back to sleep.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../books/list.gmi&quot;&gt;Edgar Allan Poe, The Murders in the Rue Morgue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://invidious.snopyta.org/watch?v=BSGXP6WENj0&amp;amp;t=1m&quot;&gt;Nicole&#39;s dad&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Thursday morning woke up at like 7h again... and still feeling like shit... Went through the bureaucracy of registering myself as a possible positive in the national health system and scheduling a confirmation lab test. Turns out, you don&#39;t actually schedule the test, you just wait for some code from the health system, and then you can go to any lab at any time and use the code for a free test. Went for mine at 14h, close to 15h. Damn nurses or whatever they are, sticking the damn cotton swab into you till it touches the back of your neck, and laughing all the while. For lunch I tried some chicken nuggets (of those you can just stick into the microwave), and guess what, it tasted so salty I couldn&#39;t taste anything else, at all, only salt. Had some bread afterwards -- at least that just didn&#39;t taste like anything. At dinner I had some soup again, but I could eat even less of it than the previous day. It tasted so bad I started feeling ill, nauseated. It&#39;s not that it didn&#39;t taste like anything, because of lack of smell and/or taste, but that it really tasted bad. I even tested it: smelled a some chocolate cookies, and they smelled fucking great! But tasted like shit...&lt;/p&gt;
&lt;p&gt;On friday I woke up already feeling hungry, probably because I hadn&#39;t eaten that much since it all started. But I was so tired I went back to sleep. When I woke up again, close to lunch time, I was feeling even more tired and hungry. Since soup tasted like shit, but bread didn&#39;t, I decided to try something somewhat similar-ish, that I like a lot: tuna pasta! Except I made it plainer than radio music: water, pasta, tuna, and the smallest pinch of salt you could possibly pinch with your pinchy fingers. I was feeling so weak while cooking that I mouthed a coffee-spoonful of sugar for fear of passing out. I made it, managed to cook some without falling on my side, and still to get back to my room with food to eat! And I was so glad the pasta didn&#39;t taste like shit! I even went back for seconds! はい、お代わり！ It was enough for lunch, dinner, and lunch the next day (not that I made that much, I just didn&#39;t eat that much).&lt;/p&gt;
&lt;p&gt;This food-tasting-like-shit-and-feeling-indisposed-afterwards continued throughout the following week, after I was supposed to be COVID-free already. But I&#39;m alright now, I think, and making plans for eating out one of these days.&lt;/p&gt;
&lt;p&gt;Reading it back, I don&#39;t think I managed to convey well enough how bad this part of the experience was... I&#39;m not even sure that was the intent of the post, but wanted to make it clear now that it really was the worst part! If you can help avoid it, do! You really don&#39;t want food to taste like shit, it sucks ass. And if you do end up catching it, sleep as much as you can, it really helps.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/kB45oC/water_stations.gmi</id>
  <title type="text">Water Stations</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2022-05-11T00:00:00Z</published>
  <link href="https://siiky.srht.site/kB45oC/water_stations.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/kB45oC/water_stations.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Water Stations
@siiky
2022/05/11
2022/07/07

Crazy idea: what if instead of selling plastic bottles, stores sold water by the litre, similarly to how diesel/gasoline is sold by the litre? People would BYOB, be it plastic, metal, or glass, and fill it up.

I know some places already do this, or have something similar, but it&#39;s not that widespread.
  </content>
  <content type="text/html">

&lt;h1&gt;Water Stations&lt;/h1&gt;
&lt;p&gt;@siiky
2022/05/11
2022/07/07&lt;/p&gt;
&lt;p&gt;Crazy idea: what if instead of selling plastic bottles, stores sold water by the litre, similarly to how diesel/gasoline is sold by the litre? People would BYOB, be it plastic, metal, or glass, and fill it up.&lt;/p&gt;
&lt;p&gt;I know some places already do this, or have something similar, but it&#39;s not that widespread.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/scheme/reader-syntax.gmi</id>
  <title type="text">Reader Syntax</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2022-03-15T00:00:00Z</published>
  <link href="https://siiky.srht.site/scheme/reader-syntax.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/scheme/reader-syntax.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Reader Syntax
@siiky
2022/03/15
2022/07/07

TIL a bit of reader syntax magic. With very few lines of code I was able to make available the #!sql reader syntax to let me read the contents of SQL files as a literal string (any file actually, but I was thinking of using it for SQL files only).

```scm
; This:
#!sql &quot;path/to/file.sql&quot;
; Into this:
&quot;CREATE TABLE entries (\n    cid      TEXT        PRIMARY KEY NOT NULL UNIQUE,\n    name     TEXT        NOT NULL,\n    consumed BOOLEAN     NOT NULL DEFAULT FALSE,\n    url      TEXT        UNIQUE,\n    type     VARCHAR(10) NOT NULL REFERENCES types (name)\n);\n\nCREATE TABLE nodes (\n    id   TEXT        PRIMARY KEY NOT NULL UNIQUE,\n    name VARCHAR(20) UNIQUE\n);\n\nCREATE TABLE pins (\n    node TEXT NOT NULL REFERENCES nodes (id),\n    cid  TEXT NOT NULL REFERENCES entries (cid)\n);\n\nCREATE TABLE types (\n    name VARCHAR(10) PRIMARY KEY NOT NULL UNIQUE\n);\n&quot;
```

Here&#39;s the necessary code in its entirety:

```scm
(set-read-syntax!
  &#39;sql
  (lambda (port)
    (let ((path (read port)))
      (unless (string? path)
        (syntax-error &quot;The #!sql syntax expects a string&quot;))

      (let ((sql-stmt (call-with-input-file path (cute read-string #f &lt;&gt;) #:text)))
        (unless (string? sql-stmt)
          (syntax-error &quot;Failed reading the SQL file&quot;))
        sql-stmt))))
```

There&#39;s one caveat with this approach, however: the reader syntax will be available to the whole program, not just the file or module that defined or imported it. This means that the identifiers must be unique, otherwise different definitions will collide with each other and the compiled program won&#39;t be what you expect. AND I think that it will be available not only at compile time, but at runtime as well -- very good to keep in mind!

Someone on IRC mentioned that it&#39;s possible to use -extend (-X) to make it available at compile time only. As an example, they said that compiling with -X srfi-19-literals would allow one to write #@1-1-22. Try this, after installing SRFI-19:

```sh
csi -R srfi-19 -R srfi-19-literals -p &quot;#@`date +&#39;%Y-%m-%d&#39;`&quot;
```

Relevant CHICKEN documentation for set-read-syntax! &amp; friends:

=&gt; https://wiki.call-cc.org/man/5/Module%20(chicken%20read-syntax)
=&gt; https://api.call-cc.org/5/doc/chicken/read-syntax

And the relevant SRFI-19 literals documentation:

=&gt; https://wiki.call-cc.org/eggref/5/srfi-19#date-literal-form
=&gt; https://api.call-cc.org/5/doc/srfi-19/date-literal-form

-----

To make it more obvious why this is cool, here goes a slightly more realistic, though still simple, example.

Let&#39;s say we have these SQL files:

```sql
-- schema.sql
CREATE TABLE sometbl (col TINYINT NOT NULL);

-- data.sql
INSERT INTO sometbl (col) VALUES (0),(1),(2),(3),(4),(5);

-- select.sql
SELECT rowid, col FROM sometbl;
```

An example.scm:

```scm
(import sql-de-lite)

(define-constant schema #!sql&quot;schema.sql&quot;)
(define-constant data #!sql&quot;data.sql&quot;)
(define-constant select #!sql&quot;select.sql&quot;)

(print (call-with-database
         &#39;memory
         (lambda (db)
           (let ((schema (sql db schema))
                 (data (sql db data))
                 (select (sql db select)))
             (query fetch-all schema)
             (query fetch-all data)
             (query fetch-all select)))))
```

And the set-read-syntax! call from before wrapped up in a module sql-reader-syntax. After compiling the module you can compile the example with csc -X sql-reader-syntax example.scm, and this is the result of running it:

```sh
$ ./example
((1 0) (2 1) (3 2) (4 3) (5 4) (6 5))
```

The example.scm is basically transformed into this before being compiled:

```scm
(import sql-de-lite)

(define-constant schema &quot;CREATE TABLE sometbl (col TINYINT NOT NULL);&quot;)
(define-constant data &quot;INSERT INTO sometbl (col) VALUES (0),(1),(2),(3),(4),(5);&quot;)
(define-constant select &quot;SELECT rowid, col FROM sometbl;&quot;)

(print (call-with-database
         &#39;memory
         (lambda (db)
           (let ((schema (sql db schema))
                 (data (sql db data))
                 (select (sql db select)))
             (query fetch-all schema)
             (query fetch-all data)
             (query fetch-all select)))))
```

And notice how schema, data, and select are constants (defined with define-constant, kinda similar to the static keyword in C).
  </content>
  <content type="text/html">

&lt;h1&gt;Reader Syntax&lt;/h1&gt;
&lt;p&gt;@siiky
2022/03/15
2022/07/07&lt;/p&gt;
&lt;p&gt;TIL a bit of reader syntax magic. With very few lines of code I was able to make available the #!sql reader syntax to let me read the contents of SQL files as a literal string (any file actually, but I was thinking of using it for SQL files only).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;; This:
#!sql &amp;quot;path/to/file.sql&amp;quot;
; Into this:
&amp;quot;CREATE TABLE entries (\n    cid      TEXT        PRIMARY KEY NOT NULL UNIQUE,\n    name     TEXT        NOT NULL,\n    consumed BOOLEAN     NOT NULL DEFAULT FALSE,\n    url      TEXT        UNIQUE,\n    type     VARCHAR(10) NOT NULL REFERENCES types (name)\n);\n\nCREATE TABLE nodes (\n    id   TEXT        PRIMARY KEY NOT NULL UNIQUE,\n    name VARCHAR(20) UNIQUE\n);\n\nCREATE TABLE pins (\n    node TEXT NOT NULL REFERENCES nodes (id),\n    cid  TEXT NOT NULL REFERENCES entries (cid)\n);\n\nCREATE TABLE types (\n    name VARCHAR(10) PRIMARY KEY NOT NULL UNIQUE\n);\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s the necessary code in its entirety:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(set-read-syntax!
  &#39;sql
  (lambda (port)
    (let ((path (read port)))
      (unless (string? path)
        (syntax-error &amp;quot;The #!sql syntax expects a string&amp;quot;))

      (let ((sql-stmt (call-with-input-file path (cute read-string #f &amp;lt;&amp;gt;) #:text)))
        (unless (string? sql-stmt)
          (syntax-error &amp;quot;Failed reading the SQL file&amp;quot;))
        sql-stmt))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s one caveat with this approach, however: the reader syntax will be available to the whole program, not just the file or module that defined or imported it. This means that the identifiers must be unique, otherwise different definitions will collide with each other and the compiled program won&#39;t be what you expect. AND I think that it will be available not only at compile time, but at runtime as well -- very good to keep in mind!&lt;/p&gt;
&lt;p&gt;Someone on IRC mentioned that it&#39;s possible to use -extend (-X) to make it available at compile time only. As an example, they said that compiling with -X srfi-19-literals would allow one to write #@1-1-22. Try this, after installing SRFI-19:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;csi -R srfi-19 -R srfi-19-literals -p &amp;quot;#@`date +&#39;%Y-%m-%d&#39;`&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Relevant CHICKEN documentation for set-read-syntax! &amp;amp; friends:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.call-cc.org/man/5/Module%20(chicken%20read-syntax)&quot;&gt;https://wiki.call-cc.org/man/5/Module%20(chicken%20read-syntax)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://api.call-cc.org/5/doc/chicken/read-syntax&quot;&gt;https://api.call-cc.org/5/doc/chicken/read-syntax&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;And the relevant SRFI-19 literals documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.call-cc.org/eggref/5/srfi-19#date-literal-form&quot;&gt;https://wiki.call-cc.org/eggref/5/srfi-19#date-literal-form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://api.call-cc.org/5/doc/srfi-19/date-literal-form&quot;&gt;https://api.call-cc.org/5/doc/srfi-19/date-literal-form&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;To make it more obvious why this is cool, here goes a slightly more realistic, though still simple, example.&lt;/p&gt;
&lt;p&gt;Let&#39;s say we have these SQL files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-- schema.sql
CREATE TABLE sometbl (col TINYINT NOT NULL);

-- data.sql
INSERT INTO sometbl (col) VALUES (0),(1),(2),(3),(4),(5);

-- select.sql
SELECT rowid, col FROM sometbl;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example.scm:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(import sql-de-lite)

(define-constant schema #!sql&amp;quot;schema.sql&amp;quot;)
(define-constant data #!sql&amp;quot;data.sql&amp;quot;)
(define-constant select #!sql&amp;quot;select.sql&amp;quot;)

(print (call-with-database
         &#39;memory
         (lambda (db)
           (let ((schema (sql db schema))
                 (data (sql db data))
                 (select (sql db select)))
             (query fetch-all schema)
             (query fetch-all data)
             (query fetch-all select)))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the set-read-syntax! call from before wrapped up in a module sql-reader-syntax. After compiling the module you can compile the example with csc -X sql-reader-syntax example.scm, and this is the result of running it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./example
((1 0) (2 1) (3 2) (4 3) (5 4) (6 5))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example.scm is basically transformed into this before being compiled:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(import sql-de-lite)

(define-constant schema &amp;quot;CREATE TABLE sometbl (col TINYINT NOT NULL);&amp;quot;)
(define-constant data &amp;quot;INSERT INTO sometbl (col) VALUES (0),(1),(2),(3),(4),(5);&amp;quot;)
(define-constant select &amp;quot;SELECT rowid, col FROM sometbl;&amp;quot;)

(print (call-with-database
         &#39;memory
         (lambda (db)
           (let ((schema (sql db schema))
                 (data (sql db data))
                 (select (sql db select)))
             (query fetch-all schema)
             (query fetch-all data)
             (query fetch-all select)))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And notice how schema, data, and select are constants (defined with define-constant, kinda similar to the static keyword in C).&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/philosophy/butterfly_effect.gmi</id>
  <title type="text">Butterfly Effect</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2022-02-17T00:00:00Z</published>
  <link href="https://siiky.srht.site/philosophy/butterfly_effect.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/philosophy/butterfly_effect.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Butterfly Effect
@siiky
2022/02/17
2022/07/07

Everyone or almost everyone has heard that butterfly wings and hurricanes have something to do with each other.

Whether they perceptibly have or not, small changes/actions have big impacts, even if only for the simple adding-up of all of them.

So next time you have alternatives, one of them better than the other, even if &quot;it wouldn&#39;t make adifference any way&quot;, choose the better option.

By &quot;alternative&quot; let it be understood something that is within your reach. Flying over a cliff (rather than falling off it) when you obviously can&#39;t fly is not an alternative. But paying some extra at your local grocer rather than at the biggest supermarket chain probably is.

-----

These are some of my goals in line with this idea:

* [X] Stop using TIDAL
* [X] Stop using Google Maps -- help get OSM good enough for everyday use
* [x] Stop using FB messager (and WhatsApp) once and for all -- already using Signal (other than IRC &amp; email) almost exclusively
* [x] Move away from YT -- probably PeerTube or similar, or Invidious as last resort
* [-] Move to Sourcehut from GitHub -- just missing the time; hopefully this summer I&#39;ll have the time to move everything
  </content>
  <content type="text/html">

&lt;h1&gt;Butterfly Effect&lt;/h1&gt;
&lt;p&gt;@siiky
2022/02/17
2022/07/07&lt;/p&gt;
&lt;p&gt;Everyone or almost everyone has heard that butterfly wings and hurricanes have something to do with each other.&lt;/p&gt;
&lt;p&gt;Whether they perceptibly have or not, small changes/actions have big impacts, even if only for the simple adding-up of all of them.&lt;/p&gt;
&lt;p&gt;So next time you have alternatives, one of them better than the other, even if &amp;quot;it wouldn&#39;t make adifference any way&amp;quot;, choose the better option.&lt;/p&gt;
&lt;p&gt;By &amp;quot;alternative&amp;quot; let it be understood something that is within your reach. Flying over a cliff (rather than falling off it) when you obviously can&#39;t fly is not an alternative. But paying some extra at your local grocer rather than at the biggest supermarket chain probably is.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;These are some of my goals in line with this idea:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[X] Stop using TIDAL&lt;/li&gt;
&lt;li&gt;[X] Stop using Google Maps -- help get OSM good enough for everyday use&lt;/li&gt;
&lt;li&gt;[x] Stop using FB messager (and WhatsApp) once and for all -- already using Signal (other than IRC &amp;amp; email) almost exclusively&lt;/li&gt;
&lt;li&gt;[x] Move away from YT -- probably PeerTube or similar, or Invidious as last resort&lt;/li&gt;
&lt;li&gt;[-] Move to Sourcehut from GitHub -- just missing the time; hopefully this summer I&#39;ll have the time to move everything&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/crypto/double_transposition.gmi</id>
  <title type="text">Double Transposition Cipher</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2022-02-13T00:00:00Z</published>
  <link href="https://siiky.srht.site/crypto/double_transposition.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/crypto/double_transposition.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Double Transposition Cipher
@siiky
2022/02/13
2022/07/07

Got into &quot;hand ciphers&quot; recently, and this was the first (seemingly) decent one that is easy-ish and quick-ish to use.

=&gt; https://en.wikipedia.org/wiki/Double_transposition Wikipedia
=&gt; https://www.pbs.org/wgbh/nova/decoding/doubtrans.html Where I first learned of it

The basic idea is that you create a matrix of N columns (number of letters of the key), where you will write down row-wise the message you want to encipher, and then reorder the result column-wise according to the chosen key.

An interesting property of this method is that the resulting cipher text has the exact same length and letters of the plain text -- it&#39;s an anagram! This is also its main flaw, of course.

## Ciphering

Let&#39;s say we want to encipher the text &quot;TOMORROW AT DUSK MOJITOS AT THE BEACH&quot;. First, you choose the key, e.g. &quot;GORILLA&quot;, make the matrix and annotate each letter&#39;s sequence number:

```
2673451
GORILLA
-------
```

Then write down the message row-wise (left-to-right, top-to-bottom) in the matrix:

```
2673451  1234567
GORILLA  AGILLOR
-------  -------
TOMORRO  OTORROM
WATDUSK  KWDUSAT
MOJITOS  SMITOOJ
ATTHEBE  EAHEBTT
ACH       A   CH
```

And that&#39;s it, the first transposition is done. The ciphered text can be read column-wise (top-to-bottom, column number) in the columns order: &quot;OKSE TWMAA ODIH RUTE RSOB OAOTC MTJTH&quot;.
I read some places recommending breaking the ciphered text into blocks of for example 5, so as to be easier to transmit/read off. But I believe also as not to give more hints about the key (due to the shorter columns). With that: &quot;OKSET WMAAO DIHRU TERSO BOAOT CMTJT H&quot;.

To get to a double transposition ciphered text you have to apply this process again, now using the previous ciphered text as the plain text (and probably a good idea to use a different key). E.g., with the key &quot;ALMOND&quot;:

```
134652
ALMOND
------
OKSETW
MAAODI
HRUTER
SOBOAO
TCMTJT
H
```

The final ciphered text: &quot;OMHST HWIRO TKARO CSAUB MTDEA JEOTO T&quot;.

## Deciphering

To decipher you have to do the reverse. You make the matrix as before, and then the way you fill it depends on the number of columns and the length of the message. To get the number of rows, and the number of columns of the last row, the formula in Scheme is:

```
(receive (q r) (quotient&amp;modulo (string-length cipher-text)
                                (string-length key))
  (+ q 1) ; #rows
  r)      ; #columns of the last row
```

(quotient&amp;modulo is actually CHICKEN-specific; in plain Scheme you&#39;d use quotient and modulo separately)

In English: the number of rows is the quotient of the division of the length of the cipher text by the length of the key, plus 1; the number of columns of the last row is the remainder.

So, for the previous cipher text and the key &quot;ALMOND&quot;:

```
(string-length cipher-text) ;=&gt; 31
(string-length &quot;ALMOND&quot;) ;=&gt; 6
(quotient 31 6) ;=&gt; 5
(modulo 31 6) ;=&gt; 1
```

This means that the matrix must have 6 rows, but that the last row has only 1 letter.

Putting it into practice, we get this (using * to denote blanks and # blocked blanks):

```
134652      134652      134652
ALMOND      ALMOND      ALMOND
------      ------      ------
******      O*****      O****W
******  =&gt;  M*****  =&gt;  M****I  =&gt; ...
******      H*****      H****R
******      S*****      S****O
******      T*****      T****T
*#####      H#####      H#####
```

And so on...
  </content>
  <content type="text/html">

&lt;h1&gt;Double Transposition Cipher&lt;/h1&gt;
&lt;p&gt;@siiky
2022/02/13
2022/07/07&lt;/p&gt;
&lt;p&gt;Got into &amp;quot;hand ciphers&amp;quot; recently, and this was the first (seemingly) decent one that is easy-ish and quick-ish to use.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Double_transposition&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.pbs.org/wgbh/nova/decoding/doubtrans.html&quot;&gt;Where I first learned of it&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The basic idea is that you create a matrix of N columns (number of letters of the key), where you will write down row-wise the message you want to encipher, and then reorder the result column-wise according to the chosen key.&lt;/p&gt;
&lt;p&gt;An interesting property of this method is that the resulting cipher text has the exact same length and letters of the plain text -- it&#39;s an anagram! This is also its main flaw, of course.&lt;/p&gt;
&lt;h2&gt;Ciphering&lt;/h2&gt;
&lt;p&gt;Let&#39;s say we want to encipher the text &amp;quot;TOMORROW AT DUSK MOJITOS AT THE BEACH&amp;quot;. First, you choose the key, e.g. &amp;quot;GORILLA&amp;quot;, make the matrix and annotate each letter&#39;s sequence number:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2673451
GORILLA
-------
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then write down the message row-wise (left-to-right, top-to-bottom) in the matrix:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2673451  1234567
GORILLA  AGILLOR
-------  -------
TOMORRO  OTORROM
WATDUSK  KWDUSAT
MOJITOS  SMITOOJ
ATTHEBE  EAHEBTT
ACH       A   CH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&#39;s it, the first transposition is done. The ciphered text can be read column-wise (top-to-bottom, column number) in the columns order: &amp;quot;OKSE TWMAA ODIH RUTE RSOB OAOTC MTJTH&amp;quot;.
I read some places recommending breaking the ciphered text into blocks of for example 5, so as to be easier to transmit/read off. But I believe also as not to give more hints about the key (due to the shorter columns). With that: &amp;quot;OKSET WMAAO DIHRU TERSO BOAOT CMTJT H&amp;quot;.&lt;/p&gt;
&lt;p&gt;To get to a double transposition ciphered text you have to apply this process again, now using the previous ciphered text as the plain text (and probably a good idea to use a different key). E.g., with the key &amp;quot;ALMOND&amp;quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;134652
ALMOND
------
OKSETW
MAAODI
HRUTER
SOBOAO
TCMTJT
H
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The final ciphered text: &amp;quot;OMHST HWIRO TKARO CSAUB MTDEA JEOTO T&amp;quot;.&lt;/p&gt;
&lt;h2&gt;Deciphering&lt;/h2&gt;
&lt;p&gt;To decipher you have to do the reverse. You make the matrix as before, and then the way you fill it depends on the number of columns and the length of the message. To get the number of rows, and the number of columns of the last row, the formula in Scheme is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(receive (q r) (quotient&amp;amp;modulo (string-length cipher-text)
                                (string-length key))
  (+ q 1) ; #rows
  r)      ; #columns of the last row
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(quotient&amp;amp;modulo is actually CHICKEN-specific; in plain Scheme you&#39;d use quotient and modulo separately)&lt;/p&gt;
&lt;p&gt;In English: the number of rows is the quotient of the division of the length of the cipher text by the length of the key, plus 1; the number of columns of the last row is the remainder.&lt;/p&gt;
&lt;p&gt;So, for the previous cipher text and the key &amp;quot;ALMOND&amp;quot;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(string-length cipher-text) ;=&amp;gt; 31
(string-length &amp;quot;ALMOND&amp;quot;) ;=&amp;gt; 6
(quotient 31 6) ;=&amp;gt; 5
(modulo 31 6) ;=&amp;gt; 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that the matrix must have 6 rows, but that the last row has only 1 letter.&lt;/p&gt;
&lt;p&gt;Putting it into practice, we get this (using * to denote blanks and # blocked blanks):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;134652      134652      134652
ALMOND      ALMOND      ALMOND
------      ------      ------
******      O*****      O****W
******  =&amp;gt;  M*****  =&amp;gt;  M****I  =&amp;gt; ...
******      H*****      H****R
******      S*****      S****O
******      T*****      T****T
*#####      H#####      H#####
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And so on...&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/scheme/pipes.gmi</id>
  <title type="text">Pipes</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2022-01-09T00:00:00Z</published>
  <link href="https://siiky.srht.site/scheme/pipes.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/scheme/pipes.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Pipes
@siiky
2022/01/09
2022/07/07

I&#39;ve been using my own pipe operators for a while. This is the latest definition:

```scm
(define (*=&gt; vals . funs)
  (foldl (lambda (val fun) (fun val))
         (apply (car funs) vals)
         (cdr funs)))

(define ((*-&gt; . funs) . vals)
  (foldl (lambda (val fun) (fun val))
         (apply (car funs) vals)
         (cdr funs)))

(define (=&gt; val . funs)
  (foldl (lambda (val fun) (fun val)) val funs))

(define ((-&gt; . funs) val)
  (foldl (lambda (val fun) (fun val)) val funs))
```

And this is the original definition (with slightly different semantics):

```scm
(define (=*&gt; val funs)
  (foldl (lambda (val fun) (fun val)) val funs))

(define ((-*&gt; funs) val)
  (=*&gt; val funs))

(define (=&gt; val . funs)
  (=*&gt; val funs))

(define ((-&gt; . funs) val)
  (=*&gt; val funs))
```

Comparing with Scheme&#39;s `o`:

```scm
(o snd fst)
(-&gt; fst snd)
```

There&#39;s no equivalent to Scheme&#39;s `compose`.

I&#39;ve never used =*&gt; and -*&gt; directly (they&#39;re there just in case, and as the base for the other two), but I&#39;ve grown attached to -&gt; and =&gt;.

The reasoning behind the names is simple: think of a function as a &quot;processing pipe&quot;. -&gt; is a chain of such pipes, and a pipe on its own, without &quot;contents&quot; -- you have to plug something on one end to get something on the other end. On the other hand, =&gt; already has the stuff plugged in, ready to go, so it&#39;s fatter.

Some uses:

```scm
(map (-&gt; do-this
         and-that)
     some-list)

(=&gt; some-list
    (cute map (-&gt; do-this and-that) &lt;&gt;)
    (cute filter (o not screwed?) &lt;&gt;))

((-&gt; (cute map (-&gt; do-this and-that) &lt;&gt;)
     (cute filter (o not screwed?) &lt;&gt;))
   some-list)

(filter (o not screwed?)
        (map (-&gt; do-this and-that)
             some-list))
```

(-&gt; do-this and-that) is an unary function -- that&#39;s why it can be given to map.

(=&gt; some-list ...) evaluates to a value, which is the result of applying the filter to the result of applying the map to some-list.

The third and fourth expressions, ((-&gt; ...) some-list) and (filter ...), are equivalent to the second.

Note the use of o instead of -&gt; in the filter&#39;s predicate. Personal preference, but I think that case reads better with o because it&#39;s more like English.

-----

But now that&#39;ll probably be the end of them for me.

Yesterday I learned of SRFI-197 -- very cool! There&#39;s even an egg for CHICKEN already.

=&gt; https://srfi.schemers.org/srfi-197/srfi-197.html SRFI-197
=&gt; https://wiki.call-cc.org/eggref/5/srfi-197 SRFI-197 egg

And I can rename the exported identifiers to the ones I&#39;ve been using:

```scm
(import
  chicken.module
  (rename
    (only srfi-197
          chain
          chain-lambda)
    (chain =&gt;)
    (chain-lambda -&gt;)))
```

With that, the previous example is written like so:

```scm
(map (-&gt; (do-this _)
         (and-that _))
     some-list)

(=&gt; some-list
    (map (-&gt; (do-this _) (and-that _)) _)
    (filter (o not screwed?) _))

((-&gt; (map (-&gt; (do-this _) (and-that _)) _)
     (filter (o not screwed?) _))
   some-list)

(filter (o not screwed?)
        (map (-&gt; (do-this _) (and-that _))
             some-list))
```

Maybe the advantage(s) aren&#39;t obvious (maybe they&#39;re not advantages at all!),
but to me not having to write `cute` for non-unary functions is a plus, even if
I&#39;m now forced to write parenthesis and an underscore on every unary function.

I guess the only situation(s) I don&#39;t see myself using it is if I want to avoid
dependencies.
  </content>
  <content type="text/html">

&lt;h1&gt;Pipes&lt;/h1&gt;
&lt;p&gt;@siiky
2022/01/09
2022/07/07&lt;/p&gt;
&lt;p&gt;I&#39;ve been using my own pipe operators for a while. This is the latest definition:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define (*=&amp;gt; vals . funs)
  (foldl (lambda (val fun) (fun val))
         (apply (car funs) vals)
         (cdr funs)))

(define ((*-&amp;gt; . funs) . vals)
  (foldl (lambda (val fun) (fun val))
         (apply (car funs) vals)
         (cdr funs)))

(define (=&amp;gt; val . funs)
  (foldl (lambda (val fun) (fun val)) val funs))

(define ((-&amp;gt; . funs) val)
  (foldl (lambda (val fun) (fun val)) val funs))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is the original definition (with slightly different semantics):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define (=*&amp;gt; val funs)
  (foldl (lambda (val fun) (fun val)) val funs))

(define ((-*&amp;gt; funs) val)
  (=*&amp;gt; val funs))

(define (=&amp;gt; val . funs)
  (=*&amp;gt; val funs))

(define ((-&amp;gt; . funs) val)
  (=*&amp;gt; val funs))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comparing with Scheme&#39;s &lt;code&gt;o&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(o snd fst)
(-&amp;gt; fst snd)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s no equivalent to Scheme&#39;s &lt;code&gt;compose&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;ve never used =&lt;em&gt;&gt; and -&lt;/em&gt;&gt; directly (they&#39;re there just in case, and as the base for the other two), but I&#39;ve grown attached to -&gt; and =&amp;gt;.&lt;/p&gt;
&lt;p&gt;The reasoning behind the names is simple: think of a function as a &amp;quot;processing pipe&amp;quot;. -&gt; is a chain of such pipes, and a pipe on its own, without &amp;quot;contents&amp;quot; -- you have to plug something on one end to get something on the other end. On the other hand, =&amp;gt; already has the stuff plugged in, ready to go, so it&#39;s fatter.&lt;/p&gt;
&lt;p&gt;Some uses:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(map (-&amp;gt; do-this
         and-that)
     some-list)

(=&amp;gt; some-list
    (cute map (-&amp;gt; do-this and-that) &amp;lt;&amp;gt;)
    (cute filter (o not screwed?) &amp;lt;&amp;gt;))

((-&amp;gt; (cute map (-&amp;gt; do-this and-that) &amp;lt;&amp;gt;)
     (cute filter (o not screwed?) &amp;lt;&amp;gt;))
   some-list)

(filter (o not screwed?)
        (map (-&amp;gt; do-this and-that)
             some-list))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(-&gt; do-this and-that) is an unary function -- that&#39;s why it can be given to map.&lt;/p&gt;
&lt;p&gt;(=&amp;gt; some-list ...) evaluates to a value, which is the result of applying the filter to the result of applying the map to some-list.&lt;/p&gt;
&lt;p&gt;The third and fourth expressions, ((-&gt; ...) some-list) and (filter ...), are equivalent to the second.&lt;/p&gt;
&lt;p&gt;Note the use of o instead of -&gt; in the filter&#39;s predicate. Personal preference, but I think that case reads better with o because it&#39;s more like English.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;But now that&#39;ll probably be the end of them for me.&lt;/p&gt;
&lt;p&gt;Yesterday I learned of SRFI-197 -- very cool! There&#39;s even an egg for CHICKEN already.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://srfi.schemers.org/srfi-197/srfi-197.html&quot;&gt;SRFI-197&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.call-cc.org/eggref/5/srfi-197&quot;&gt;SRFI-197 egg&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;And I can rename the exported identifiers to the ones I&#39;ve been using:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(import
  chicken.module
  (rename
    (only srfi-197
          chain
          chain-lambda)
    (chain =&amp;gt;)
    (chain-lambda -&amp;gt;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that, the previous example is written like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(map (-&amp;gt; (do-this _)
         (and-that _))
     some-list)

(=&amp;gt; some-list
    (map (-&amp;gt; (do-this _) (and-that _)) _)
    (filter (o not screwed?) _))

((-&amp;gt; (map (-&amp;gt; (do-this _) (and-that _)) _)
     (filter (o not screwed?) _))
   some-list)

(filter (o not screwed?)
        (map (-&amp;gt; (do-this _) (and-that _))
             some-list))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe the advantage(s) aren&#39;t obvious (maybe they&#39;re not advantages at all!),
but to me not having to write &lt;code&gt;cute&lt;/code&gt; for non-unary functions is a plus, even if
I&#39;m now forced to write parenthesis and an underscore on every unary function.&lt;/p&gt;
&lt;p&gt;I guess the only situation(s) I don&#39;t see myself using it is if I want to avoid
dependencies.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/functional_programming/naming.gmi</id>
  <title type="text">Naming Operations rather than Variables</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2021-12-15T00:00:00Z</published>
  <link href="https://siiky.srht.site/functional_programming/naming.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/functional_programming/naming.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Naming Operations rather than Variables
@siiky
2021/12/15
2022/07/07

Naming, using, reading, and understanding well named operations rather than (kinda) well named variables grows the habit of reading and understanding code rather than relying on variables being well named -- and everyone knows naming is hard.

Bad:

```py
x = &#39;42&#39;
x_food = foo(x)
x_bard_food = bar(x_food)
x_zazd_bard_food = zaz(x_bard_food)
```

Good (using procedural composition):

```py
x = zaz(bar(foo(&#39;42&#39;)))
```

Better (if the chain of operations is long):

```py
x = &#39;42&#39;
x = foo(x)
x = bar(x)
x = zaz(x)
```

Best (using functional composition):

```scm
(=&gt; &#39;42&#39;
    foo
    bar
    zaz)

; OR

((-&gt; foo bar zaz) &#39;42&#39;)
```

It also comes with rather nice advantages. Just compare the two approaches in each scenario:

* Imagine you want to change the order of operations in the chain;
* Imagine you want to add an operation to the chain;
* Imagine you want to remove an operation from the chain.

And a final bonus: the &quot;better&quot; approach is easier to read than the &quot;bad&quot; approach, and requires less typing, thank you very much.
  </content>
  <content type="text/html">

&lt;h1&gt;Naming Operations rather than Variables&lt;/h1&gt;
&lt;p&gt;@siiky
2021/12/15
2022/07/07&lt;/p&gt;
&lt;p&gt;Naming, using, reading, and understanding well named operations rather than (kinda) well named variables grows the habit of reading and understanding code rather than relying on variables being well named -- and everyone knows naming is hard.&lt;/p&gt;
&lt;p&gt;Bad:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = &#39;42&#39;
x_food = foo(x)
x_bard_food = bar(x_food)
x_zazd_bard_food = zaz(x_bard_food)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good (using procedural composition):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = zaz(bar(foo(&#39;42&#39;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Better (if the chain of operations is long):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;x = &#39;42&#39;
x = foo(x)
x = bar(x)
x = zaz(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Best (using functional composition):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(=&amp;gt; &#39;42&#39;
    foo
    bar
    zaz)

; OR

((-&amp;gt; foo bar zaz) &#39;42&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It also comes with rather nice advantages. Just compare the two approaches in each scenario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Imagine you want to change the order of operations in the chain;&lt;/li&gt;
&lt;li&gt;Imagine you want to add an operation to the chain;&lt;/li&gt;
&lt;li&gt;Imagine you want to remove an operation from the chain.&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;And a final bonus: the &amp;quot;better&amp;quot; approach is easier to read than the &amp;quot;bad&amp;quot; approach, and requires less typing, thank you very much.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/work/CVE-2020-26935.gmi</id>
  <title type="text">CVE-2020-26935</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2020-11-06T00:00:00Z</published>
  <link href="https://siiky.srht.site/work/CVE-2020-26935.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/work/CVE-2020-26935.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# CVE-2020-26935
@siiky
2020/11/06
2022/07/07

At work I got the chance to discover a vulnerability in phpMyAdmin. You can find some details on the project&#39;s official advisory, and you can check out the CVE details on MITRE and NVD.

I&#39;d like to publish all the details, but I&#39;m not sure I can.

=&gt; https://www.phpmyadmin.net phpMyAdmin
=&gt; https://www.phpmyadmin.net/security/PMASA-2020-6 Official advisory (PMASA-2020-6)
=&gt; https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26935 CVE-2020-26935 on MITRE
=&gt; https://nvd.nist.gov/vuln/detail/CVE-2020-26935 CVE-2020-26935 on NVD
  </content>
  <content type="text/html">

&lt;h1&gt;CVE-2020-26935&lt;/h1&gt;
&lt;p&gt;@siiky
2020/11/06
2022/07/07&lt;/p&gt;
&lt;p&gt;At work I got the chance to discover a vulnerability in phpMyAdmin. You can find some details on the project&#39;s official advisory, and you can check out the CVE details on MITRE and NVD.&lt;/p&gt;
&lt;p&gt;I&#39;d like to publish all the details, but I&#39;m not sure I can.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.phpmyadmin.net&quot;&gt;phpMyAdmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.phpmyadmin.net/security/PMASA-2020-6&quot;&gt;Official advisory (PMASA-2020-6)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-26935&quot;&gt;CVE-2020-26935 on MITRE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2020-26935&quot;&gt;CVE-2020-26935 on NVD&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/words/quotes.gmi</id>
  <title type="text">just quotes</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2020-05-26T00:00:00Z</published>
  <link href="https://siiky.srht.site/words/quotes.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/words/quotes.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# just quotes
@siiky
2020/05/26
2022/07/07

In no particular order.

====================

My transcription, possibly wrong:

&gt; おい、君は先、羊飼いの犬だと言ったな。犬でいいじゃないか。いい犬は羊を豊な牧草地へ導くことで、羊から多いに感謝されることもあるさ。

影山、梶に、人間の條件 から

The subtitle&#39;s translation:

&gt; Listen. So you think you&#39;d just be a shepherd&#39;s dog. What&#39;s wrong with that? A good dog can lead the sheep to greener pastures and earn their gratitude.

Kageyama, to Kaji, from The Human Condition: No Greater Love

=&gt; https://ja.wikipedia.org/wiki/%E4%BA%BA%E9%96%93%E3%81%AE%E6%A2%9D%E4%BB%B6_%28%E6%98%A0%E7%94%BB%29 Wikipedia (JP)
=&gt; https://en.wikipedia.org/wiki/The_Human_Condition_%28film_series%29 Wikipedia (EN)
=&gt; https://www.imdb.com/title/tt0053114/ IMDB

====================

&gt; Everyone you will ever meet knows something you don&#39;t.

Bill Nye

====================

&gt; He who knows best best knows how little he knows.

Thomas Jefferson

====================

&gt; Lenina shook her head. &quot;Was and will make me ill,&quot; she quoted, &quot;I take a gramme and only am.&quot;

Lenina, from Brave New World, by Aldous Huxley

=&gt; https://en.wikipedia.org/wiki/Brave_new_world Wikipedia

====================

&gt; It&#39;s the triumph of superior reason to live with folks who don&#39;t have any.

Socrates, from Socrates, by Voltaire

=&gt; https://en.wikipedia.org/wiki/Voltaire%27s_Socrates_%28play%29 Wikipedia
=&gt; https://www.gutenberg.org/ebooks/4683 Project Gutenberg

====================

This one is somewhat longer, and it&#39;s not someone&#39;s or some character&#39;s quote,
but it&#39;s a good paragraph from a good book.

&gt; &quot;A New Theory of Biology&quot; was the title of the paper which Mustapha Mond had just finished reading. He sat for some time, meditatively frowning, then picked up his pen and wrote across the title-page. &quot;The author&#39;s mathematical treatment of the conception of purpose is novel and highly ingenious, but heretical and, so far as the present social order is concerned, dangerous and potentially subversive. _Not to be published_.&quot; He underlined the words. &quot;The author will be kept under supervision. His transference to the Marine Biological Station of St Helena may become necessary.&quot; A pity, he thought, as he signed his name. It was a masterly piece of work. But once you began admitting explanations in terms of purpose -- well, you didn&#39;t know what the result might be. It was the sort of idea that might easily recondition the more unsettled minds among the higher castes -- make them lose their faith in happiness as the Sovereign Good and take to believing, instead, that the goal was somewhere beyond, somewhere outside of the present human sphere; that the purpose of life was not the maintenance of well-being, but some intensification and refining of consciousness, some enlargement of knowledge. Which was, the Controller reflected, quite possibly true. But not, in the present circumstances, admissible. He picked up his pen again, and under the words _&quot;Not to be published&quot;_ drew a second line, thicker and blacker than the first; then sighed. &quot;What fun it would be,&quot; he thought, &quot;if one didn&#39;t have to think about happiness!&quot;

From Brave New World, by Aldous Huxley

=&gt; https://en.wikipedia.org/wiki/Brave_new_world Wikipedia

====================

&gt; The creatures outside looked from pig to man, and from man to pig, and from pig to man again; but already it was impossible to say which was which.

From Animal Farm, by George Orwell

=&gt; https://en.wikipedia.org/wiki/Animal_Farm Wikipedia
=&gt; https://gutenberg.net.au/plusfifty-n-z.html#orwell Project Gutenberg Australia

====================

&gt; God&#39;s power we allow is infinite: But neither man nor any other animal are happy: Therefore he does not will their happiness. His wisdom is infinite: He is never mistaken in choosing the means to any end: But the course of nature tends not to human or animal felicity: Therefore it is not established for that purpose. Through the whole compass of human knowledge, there are no inferences more certain and infallible than these. In what respect, then, do his benevolence and mercy resemble the benevolence and mercy of men?

From Dialogues Concerning Natural Religion, by David Hume

=&gt; https://en.wikipedia.org/wiki/Problem_of_evil#Atheistic_viewpoint Wikipedia

====================

&gt; 6.371: At the basis of the whole modern view of the world lies the illusion that the so-called laws of nature are the explanations of natural phenomena.

From Tractatus Logico-Philosophicus, by Ludwig Wittgenstein

=&gt; https://en.wikipedia.org/wiki/Tractatus_Logico-Philosophicus Wikipedia
=&gt; https://standardebooks.org/ebooks/ludwig-wittgenstein/tractatus-logico-philosophicus/c-k-ogden Standard Ebooks

====================

&gt; If one desires to be happy, sir, one must never understand duty; for, as soon as one has comprehended it, it is implacable.

Jean Valjean to Marius Pontmercy, from Les Misérables, by Victor Hugo

=&gt; https://en.wikipedia.org/wiki/Les_Mis%C3%A9rables Wikipedia
=&gt; https://standardebooks.org/ebooks/victor-hugo/les-miserables/isabel-f-hapgood Standard Ebooks
  </content>
  <content type="text/html">

&lt;h1&gt;just quotes&lt;/h1&gt;
&lt;p&gt;@siiky
2020/05/26
2022/07/07&lt;/p&gt;
&lt;p&gt;In no particular order.&lt;/p&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;p&gt;My transcription, possibly wrong:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;おい、君は先、羊飼いの犬だと言ったな。犬でいいじゃないか。いい犬は羊を豊な牧草地へ導くことで、羊から多いに感謝されることもあるさ。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;影山、梶に、人間の條件 から&lt;/p&gt;
&lt;p&gt;The subtitle&#39;s translation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Listen. So you think you&#39;d just be a shepherd&#39;s dog. What&#39;s wrong with that? A good dog can lead the sheep to greener pastures and earn their gratitude.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Kageyama, to Kaji, from The Human Condition: No Greater Love&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E4%BA%BA%E9%96%93%E3%81%AE%E6%A2%9D%E4%BB%B6_%28%E6%98%A0%E7%94%BB%29&quot;&gt;Wikipedia (JP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Human_Condition_%28film_series%29&quot;&gt;Wikipedia (EN)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.imdb.com/title/tt0053114/&quot;&gt;IMDB&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everyone you will ever meet knows something you don&#39;t.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Bill Nye&lt;/p&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He who knows best best knows how little he knows.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thomas Jefferson&lt;/p&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lenina shook her head. &amp;quot;Was and will make me ill,&amp;quot; she quoted, &amp;quot;I take a gramme and only am.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Lenina, from Brave New World, by Aldous Huxley&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Brave_new_world&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#39;s the triumph of superior reason to live with folks who don&#39;t have any.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Socrates, from Socrates, by Voltaire&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Voltaire%27s_Socrates_%28play%29&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org/ebooks/4683&quot;&gt;Project Gutenberg&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;p&gt;This one is somewhat longer, and it&#39;s not someone&#39;s or some character&#39;s quote,
but it&#39;s a good paragraph from a good book.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;A New Theory of Biology&amp;quot; was the title of the paper which Mustapha Mond had just finished reading. He sat for some time, meditatively frowning, then picked up his pen and wrote across the title-page. &amp;quot;The author&#39;s mathematical treatment of the conception of purpose is novel and highly ingenious, but heretical and, so far as the present social order is concerned, dangerous and potentially subversive. &lt;em&gt;Not to be published&lt;/em&gt;.&amp;quot; He underlined the words. &amp;quot;The author will be kept under supervision. His transference to the Marine Biological Station of St Helena may become necessary.&amp;quot; A pity, he thought, as he signed his name. It was a masterly piece of work. But once you began admitting explanations in terms of purpose -- well, you didn&#39;t know what the result might be. It was the sort of idea that might easily recondition the more unsettled minds among the higher castes -- make them lose their faith in happiness as the Sovereign Good and take to believing, instead, that the goal was somewhere beyond, somewhere outside of the present human sphere; that the purpose of life was not the maintenance of well-being, but some intensification and refining of consciousness, some enlargement of knowledge. Which was, the Controller reflected, quite possibly true. But not, in the present circumstances, admissible. He picked up his pen again, and under the words &lt;em&gt;&amp;quot;Not to be published&amp;quot;&lt;/em&gt; drew a second line, thicker and blacker than the first; then sighed. &amp;quot;What fun it would be,&amp;quot; he thought, &amp;quot;if one didn&#39;t have to think about happiness!&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;From Brave New World, by Aldous Huxley&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Brave_new_world&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The creatures outside looked from pig to man, and from man to pig, and from pig to man again; but already it was impossible to say which was which.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;From Animal Farm, by George Orwell&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Animal_Farm&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gutenberg.net.au/plusfifty-n-z.html#orwell&quot;&gt;Project Gutenberg Australia&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;God&#39;s power we allow is infinite: But neither man nor any other animal are happy: Therefore he does not will their happiness. His wisdom is infinite: He is never mistaken in choosing the means to any end: But the course of nature tends not to human or animal felicity: Therefore it is not established for that purpose. Through the whole compass of human knowledge, there are no inferences more certain and infallible than these. In what respect, then, do his benevolence and mercy resemble the benevolence and mercy of men?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;From Dialogues Concerning Natural Religion, by David Hume&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Problem_of_evil#Atheistic_viewpoint&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6.371: At the basis of the whole modern view of the world lies the illusion that the so-called laws of nature are the explanations of natural phenomena.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;From Tractatus Logico-Philosophicus, by Ludwig Wittgenstein&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tractatus_Logico-Philosophicus&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/ludwig-wittgenstein/tractatus-logico-philosophicus/c-k-ogden&quot;&gt;Standard Ebooks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;====================&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If one desires to be happy, sir, one must never understand duty; for, as soon as one has comprehended it, it is implacable.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Jean Valjean to Marius Pontmercy, from Les Misérables, by Victor Hugo&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Les_Mis%C3%A9rables&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org/ebooks/victor-hugo/les-miserables/isabel-f-hapgood&quot;&gt;Standard Ebooks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/work/credit.gmi</id>
  <title type="text">Credit</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2020-04-30T00:00:00Z</published>
  <link href="https://siiky.srht.site/work/credit.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/work/credit.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Credit
@siiky
2020/04/30
2022/07/07

DISCLAIMER: This post has nothing to do with me or CVE-2020-26935.

=&gt; CVE-2020-26935.gmi CVE-2020-26935

There are some types of work or achievements at work that can be credited directly to one person or small group of people. I don&#39;t mean fixing bugs or developing some new fancy useless feature, but, for example, a new revolutionary algorithm, protocol, or cryptographic system. This may or may not be a part of their job. Sometimes a white paper about the novelty is written and published; sometimes it isn&#39;t. In either case, it is not uncommon for the matter to break out on news and social media sites. The titles usually go something like &quot;$COMPANY does $BIGTHING&quot;.

Is this right?

A few months ago news with a title somewhat similar to the above broke out, and the company was the one I work for. It was really big news, and all thanks to the work of a group of two or three people in the company. Not anyone else. What name is mentioned in the title? The company&#39;s. Who did the work? Some nameless group inside the company.

One day, at lunch, the topic came up because of something the head of that small group replied in an interview, when asked &quot;What are your comments about $COMPANY having done $BIGTHING?&quot;: &quot;Has it?&quot;. This coming up, almost at once, everyone got (figuratively) up, as if someone had insulted $PERSONALDEITY inside $DESIGNATEDPLACEOFWORSHIPOFSAIDDEITY. And I just really don&#39;t get it. Why would anyone think it&#39;s right to credit the company instead of the people who&#39;ve actually done the thing? How can a company, not being a being, not in the possession of reason, not being able to take an action, not being able to affect the real physical world, possibly accomplish any a thing?

Maybe I&#39;m being a bit harsh on companies, but I believe crediting something/someone for something it/they haven&#39;t done is not right. I would say, if anything, the only credit companies deserve is for doing The Right Thing™ in investing on someone competent and deserving of the remuneration.

/rant

All companies not mentioned in this post are fictious, not real, and any resemblance to any other also not real companies is purely coincidental.
  </content>
  <content type="text/html">

&lt;h1&gt;Credit&lt;/h1&gt;
&lt;p&gt;@siiky
2020/04/30
2022/07/07&lt;/p&gt;
&lt;p&gt;DISCLAIMER: This post has nothing to do with me or CVE-2020-26935.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;CVE-2020-26935.gmi&quot;&gt;CVE-2020-26935&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;There are some types of work or achievements at work that can be credited directly to one person or small group of people. I don&#39;t mean fixing bugs or developing some new fancy useless feature, but, for example, a new revolutionary algorithm, protocol, or cryptographic system. This may or may not be a part of their job. Sometimes a white paper about the novelty is written and published; sometimes it isn&#39;t. In either case, it is not uncommon for the matter to break out on news and social media sites. The titles usually go something like &amp;quot;$COMPANY does $BIGTHING&amp;quot;.&lt;/p&gt;
&lt;p&gt;Is this right?&lt;/p&gt;
&lt;p&gt;A few months ago news with a title somewhat similar to the above broke out, and the company was the one I work for. It was really big news, and all thanks to the work of a group of two or three people in the company. Not anyone else. What name is mentioned in the title? The company&#39;s. Who did the work? Some nameless group inside the company.&lt;/p&gt;
&lt;p&gt;One day, at lunch, the topic came up because of something the head of that small group replied in an interview, when asked &amp;quot;What are your comments about $COMPANY having done $BIGTHING?&amp;quot;: &amp;quot;Has it?&amp;quot;. This coming up, almost at once, everyone got (figuratively) up, as if someone had insulted $PERSONALDEITY inside $DESIGNATEDPLACEOFWORSHIPOFSAIDDEITY. And I just really don&#39;t get it. Why would anyone think it&#39;s right to credit the company instead of the people who&#39;ve actually done the thing? How can a company, not being a being, not in the possession of reason, not being able to take an action, not being able to affect the real physical world, possibly accomplish any a thing?&lt;/p&gt;
&lt;p&gt;Maybe I&#39;m being a bit harsh on companies, but I believe crediting something/someone for something it/they haven&#39;t done is not right. I would say, if anything, the only credit companies deserve is for doing The Right Thing™ in investing on someone competent and deserving of the remuneration.&lt;/p&gt;
&lt;p&gt;/rant&lt;/p&gt;
&lt;p&gt;All companies not mentioned in this post are fictious, not real, and any resemblance to any other also not real companies is purely coincidental.&lt;/p&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/scheme/kless.gmi</id>
  <title type="text">kless</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2019-10-13T00:00:00Z</published>
  <link href="https://siiky.srht.site/scheme/kless.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/scheme/kless.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# kless
@siiky
2019/10/13
2022/07/07

I read recently a blog post called The Lisp Curse (not yet HTTPS enabled, but hoping it will be in the future). In this post, the author, Rudolf Winestock, says that &quot;Making Scheme object-oriented is a sophomore homework assignment&quot;; and so, for fun, I tried hacking an abstraction for defining classes in Scheme, with the little knowledge of macros that I have.

=&gt; https://www.winestockwebdesign.com/Essays/Lisp_Curse.html The Lisp Curse

# Implementation

Below is the definition of the kless macro.

```scm
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;!! Read identifiers with Metalocalypse Pickles&#39; accent !!!
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

(define-syntax kless
  ; `meth` is a reserved keyword inside the macro, i.e., it has a special
  ; meaning and you can&#39;t name a kless or method &quot;meth&quot;
  (syntax-rules (meth)

    ;; TEMPLATE
    ((kless
       (kless-name ver-name ...)
       (meth (meth-name meth-args ...)
             meth-body ...) ...)

     ;; RESULT
     (begin
       ; If your Scheme of choice doesn&#39;t support curried definitions
       ; use lambda instead:
       ;   (define (kless-name ver-name ...)
       ;     (lambda (method self . args)
       (define ((kless-name ver-name ...) method self . args)
         (define (err sym)
           (error (string-append &quot;&#39;&quot; (symbol-&gt;string sym) &quot;&#39;? dat shiet dun exist yo&quot;)))

         (define (getter ver)
           (case ver
             ((ver-name) ver-name) ...
             (else (err ver))))

         (define (setter ver val)
           (case ver
             ((ver-name) (set! ver-name val)) ...
             (else (err ver))))

         ;; Dispatch
         (case method
           ((get) (apply getter args))
           ((set) (apply setter args))
           ((meth-name)
            (apply (lambda (meth-args ...)
                     meth-body ...)
                   args)) ...
           (else (err method))))

       ;; [GS]etters
       (define (ver-name self . val)
         (if (null? val)
             (self &#39;get self &#39;var-name)
             (self &#39;set self &#39;var-name (car val)))) ...

       ;; Custom methods
       (define (meth-name self meth-args ...)
         (self &#39;meth-name self meth-args ...)) ...))))
```

With kless you can specify instance variables, with getters and destructive setters automatically defined for you, and instance (non-static) methods. Because the methods&#39; bodies are inserted into the object itself, instance variables are in scope, and no extra magic is needed for making them available.

Having two classes with methods (or variables, for that matter) of the same name results in two functions with exactly the same names and bodies being defined. By defining the two classes above (dek and blenk-dek), show-me is defined twice, like so:

```scm
(define (show-me self)
  (self &#39;show-me self))
```

This is OK in Scheme, so dick-typing (a la Python) is supported.

# Example klesses

The following example shows that/how kless works, and what OO is good for.

Defining two classes:

```scm
;; Very important dek class! It is used to represent various types of deks
(kless (dek x y)
       (meth (show-me)
             (print &quot;8&quot; (make-string x #\=) &quot;D&quot; (make-string y #\~))))

(kless (blenk-dek x)
       (meth (show-me)
             (print &quot;8&quot; (make-string x #\=) &quot;D&quot;)))
```

Inspecting generated procedures and trying things out with csi (the CHICKEN Scheme Interpreter):

```
#;1&gt; dek
#&lt;procedure (dek x y)&gt;
#;2&gt; blenk-dek
#&lt;procedure (blenk-dek x)&gt;
#;3&gt; x
#&lt;procedure (x self270 . val282)&gt;
#;4&gt; y
#&lt;procedure (y self204 . val216)&gt;
#;5&gt; show-me
#&lt;procedure (show-me self270)&gt;
#;6&gt; (show-me (dek 2 4))
8==D~~~~
#;7&gt; (show-me (blenk-dek 4))
8====D
```

# Thorns

self is not in scope (or rather, self, the object itself, is in scope, but is not called self because of syntax-rules magic). Recursive methods are still possible, with a named-let or define. Just don&#39;t use other methods.

No type predicate is defined, but can be easily implemented.

No hierarchy, inheritance, no nothing!

No &quot;static&quot; class methods. Because, what? Just make a function, prefix it with the class name and be done with it.

No extending already defined classes, a la Haskell&#39;s type classes (instance ... where), or Rust&#39;s traits (impl). Put everything inside kless and dick-typing does the rest.

Method overriding on a per object basis is not possible. This may be easy to implement. One way is to put a table inside the object, from method name to procedure (Symbol -&gt; Method), and arrange a way to get and set that procedure from outside the object. A problem arises then: this new method doesn&#39;t have the instance variables in scope. One could be tempted to think that something like the following solves the problem.

```scm
(define (meth-setter meth-name meth-maker)
  (update-meth-table meth-name (meth-maker ver-name ...)))
```

This would indeed bring the current variables into scope, but not future updates, as this new method&#39;s scope is not the same as the object&#39;s scope itself. (There was also something similar on Let Over Lambda IIRC)

=&gt; https://letoverlambda.com Let Over Lambda

Another option would be to have another indirection for the actual method&#39;s code, such that the current instance variables are given on each call. Calling one such method would be something like:

```scm
(((lambda (ver-name ...)    ; instance variables
    (lambda (meth-args ...) ; method parameters
      meth-body ...))       ; method body
  ver-name ...)             ; get the method procedure, with instance variables in scope
 meth-args ...)             ; call the methodd
```
  </content>
  <content type="text/html">

&lt;h1&gt;kless&lt;/h1&gt;
&lt;p&gt;@siiky
2019/10/13
2022/07/07&lt;/p&gt;
&lt;p&gt;I read recently a blog post called The Lisp Curse (not yet HTTPS enabled, but hoping it will be in the future). In this post, the author, Rudolf Winestock, says that &amp;quot;Making Scheme object-oriented is a sophomore homework assignment&amp;quot;; and so, for fun, I tried hacking an abstraction for defining classes in Scheme, with the little knowledge of macros that I have.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.winestockwebdesign.com/Essays/Lisp_Curse.html&quot;&gt;The Lisp Curse&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;
&lt;p&gt;Below is the definition of the kless macro.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;!! Read identifiers with Metalocalypse Pickles&#39; accent !!!
;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

(define-syntax kless
  ; `meth` is a reserved keyword inside the macro, i.e., it has a special
  ; meaning and you can&#39;t name a kless or method &amp;quot;meth&amp;quot;
  (syntax-rules (meth)

    ;; TEMPLATE
    ((kless
       (kless-name ver-name ...)
       (meth (meth-name meth-args ...)
             meth-body ...) ...)

     ;; RESULT
     (begin
       ; If your Scheme of choice doesn&#39;t support curried definitions
       ; use lambda instead:
       ;   (define (kless-name ver-name ...)
       ;     (lambda (method self . args)
       (define ((kless-name ver-name ...) method self . args)
         (define (err sym)
           (error (string-append &amp;quot;&#39;&amp;quot; (symbol-&amp;gt;string sym) &amp;quot;&#39;? dat shiet dun exist yo&amp;quot;)))

         (define (getter ver)
           (case ver
             ((ver-name) ver-name) ...
             (else (err ver))))

         (define (setter ver val)
           (case ver
             ((ver-name) (set! ver-name val)) ...
             (else (err ver))))

         ;; Dispatch
         (case method
           ((get) (apply getter args))
           ((set) (apply setter args))
           ((meth-name)
            (apply (lambda (meth-args ...)
                     meth-body ...)
                   args)) ...
           (else (err method))))

       ;; [GS]etters
       (define (ver-name self . val)
         (if (null? val)
             (self &#39;get self &#39;var-name)
             (self &#39;set self &#39;var-name (car val)))) ...

       ;; Custom methods
       (define (meth-name self meth-args ...)
         (self &#39;meth-name self meth-args ...)) ...))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With kless you can specify instance variables, with getters and destructive setters automatically defined for you, and instance (non-static) methods. Because the methods&#39; bodies are inserted into the object itself, instance variables are in scope, and no extra magic is needed for making them available.&lt;/p&gt;
&lt;p&gt;Having two classes with methods (or variables, for that matter) of the same name results in two functions with exactly the same names and bodies being defined. By defining the two classes above (dek and blenk-dek), show-me is defined twice, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define (show-me self)
  (self &#39;show-me self))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is OK in Scheme, so dick-typing (a la Python) is supported.&lt;/p&gt;
&lt;h1&gt;Example klesses&lt;/h1&gt;
&lt;p&gt;The following example shows that/how kless works, and what OO is good for.&lt;/p&gt;
&lt;p&gt;Defining two classes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;;; Very important dek class! It is used to represent various types of deks
(kless (dek x y)
       (meth (show-me)
             (print &amp;quot;8&amp;quot; (make-string x #\=) &amp;quot;D&amp;quot; (make-string y #\~))))

(kless (blenk-dek x)
       (meth (show-me)
             (print &amp;quot;8&amp;quot; (make-string x #\=) &amp;quot;D&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inspecting generated procedures and trying things out with csi (the CHICKEN Scheme Interpreter):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#;1&amp;gt; dek
#&amp;lt;procedure (dek x y)&amp;gt;
#;2&amp;gt; blenk-dek
#&amp;lt;procedure (blenk-dek x)&amp;gt;
#;3&amp;gt; x
#&amp;lt;procedure (x self270 . val282)&amp;gt;
#;4&amp;gt; y
#&amp;lt;procedure (y self204 . val216)&amp;gt;
#;5&amp;gt; show-me
#&amp;lt;procedure (show-me self270)&amp;gt;
#;6&amp;gt; (show-me (dek 2 4))
8==D~~~~
#;7&amp;gt; (show-me (blenk-dek 4))
8====D
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Thorns&lt;/h1&gt;
&lt;p&gt;self is not in scope (or rather, self, the object itself, is in scope, but is not called self because of syntax-rules magic). Recursive methods are still possible, with a named-let or define. Just don&#39;t use other methods.&lt;/p&gt;
&lt;p&gt;No type predicate is defined, but can be easily implemented.&lt;/p&gt;
&lt;p&gt;No hierarchy, inheritance, no nothing!&lt;/p&gt;
&lt;p&gt;No &amp;quot;static&amp;quot; class methods. Because, what? Just make a function, prefix it with the class name and be done with it.&lt;/p&gt;
&lt;p&gt;No extending already defined classes, a la Haskell&#39;s type classes (instance ... where), or Rust&#39;s traits (impl). Put everything inside kless and dick-typing does the rest.&lt;/p&gt;
&lt;p&gt;Method overriding on a per object basis is not possible. This may be easy to implement. One way is to put a table inside the object, from method name to procedure (Symbol -&gt; Method), and arrange a way to get and set that procedure from outside the object. A problem arises then: this new method doesn&#39;t have the instance variables in scope. One could be tempted to think that something like the following solves the problem.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(define (meth-setter meth-name meth-maker)
  (update-meth-table meth-name (meth-maker ver-name ...)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would indeed bring the current variables into scope, but not future updates, as this new method&#39;s scope is not the same as the object&#39;s scope itself. (There was also something similar on Let Over Lambda IIRC)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://letoverlambda.com&quot;&gt;Let Over Lambda&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Another option would be to have another indirection for the actual method&#39;s code, such that the current instance variables are given on each call. Calling one such method would be something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(((lambda (ver-name ...)    ; instance variables
    (lambda (meth-args ...) ; method parameters
      meth-body ...))       ; method body
  ver-name ...)             ; get the method procedure, with instance variables in scope
 meth-args ...)             ; call the methodd
&lt;/code&gt;&lt;/pre&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/scheme/exceptions.gmi</id>
  <title type="text">Exceptions (aka Conditions) in Scheme</title>
  <updated>2022-07-07T00:00:00Z</updated>
  <published>2019-08-13T00:00:00Z</published>
  <link href="https://siiky.srht.site/scheme/exceptions.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/scheme/exceptions.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Exceptions (aka Conditions) in Scheme
@siiky
2019/08/13
2022/07/07

DISCLAIMER: I&#39;m not a very advanced Schemer, and conditions in Scheme are especially confusing to me. Please excuse any possibly wrong terminology or claims. If you have any comments, shoot me a message.

Exceptions are (in general) very weird things, but even more so in Scheme. I have little (close to none) experience with them, and the little that I have was attained from need (i.e., &quot;works? great!&quot;).

## Conditions

Conditions are objects that represent an exception (like instances of a subclass of Exception in Java, maybe?), and in Scheme you can use them just like any other object. You can create one, pass it around, and not even throw it. It&#39;s also possible to throw non-condition objects (maybe for non-local or early return?).

## Exception Handling

### Catching

A neat way to catch exceptions is with condition-case.

=&gt; https://api.call-cc.org/5/doc/chicken/condition/condition-case condition-case

You give it an expression that may throw, give it the kinds of exceptions you are expecting and how to deal with each of them, and voila:

```scm
; General usage
(condition-case expression
  ((kind1 kind2) (print &quot;kind1 kind2&quot;) ...)
  ((kind) (print &quot;kind&quot;) ...)
  ; con needn&#39;t be a condition
  (con () (print &quot;some other kind: &quot; con) ...))

; Concrete example
(condition-case
  (begin
    (print &quot;This is part of the expression&quot;)
    (car (/ 42 0)))
  ((exn type)
    (print &quot;Wrong type&quot;)
    #f)
  ((exn arithmetic)
    (print &quot;Some arithmetic error&quot;)
    0)
  (con ()
    (print con &quot; ¯\\_(ツ)_/¯&quot;)
    con))

;; prints:
;; This is part of the expression
;; Some arithmetic error
;; =&gt; 0
```

If no exception is thrown when evaluating the expression, the value of the condition-case block is that of the expression. If an exception is thrown, then the value is that of the last of the expressions associated with the first matching branch. If there is no matching branch, the exception is propagated, until a handler for it is found (or none, in which case the program crashes).

The condition cases should be ordered from more specific to less specific, because the first one to match is picked. For example, a condition of kind (exn type) is also of kind (exn), so the former should be above the latter.

```scm
(condition-case (car &#39;some-val)
  ((exn)      (print &quot;Wrong type&quot;))
  ((exn type) (print &quot;This will never happen&quot;)))
```

### Throwing

If you want to throw something, use signal. There are also abort and raise, but I don&#39;t know why/when one should use them. In CHICKEN, SRFI-18&#39;s raise is just signal, but this may change in the future and might not even be the case in other implementations.

=&gt; https://api.call-cc.org/5/doc/chicken/condition/signal signal
=&gt; https://api.call-cc.org/5/doc/chicken/condition/abort abort
=&gt; https://api.call-cc.org/5/doc/srfi-18/raise raise
=&gt; https://srfi.schemers.org/srfi-18/srfi-18.html SRFI-18

## Related Topics of Interest

* Continuable and non-continuable exceptions;
* How is all this implemented?
* How to make a condition and how to get things out of a condition object.
  </content>
  <content type="text/html">

&lt;h1&gt;Exceptions (aka Conditions) in Scheme&lt;/h1&gt;
&lt;p&gt;@siiky
2019/08/13
2022/07/07&lt;/p&gt;
&lt;p&gt;DISCLAIMER: I&#39;m not a very advanced Schemer, and conditions in Scheme are especially confusing to me. Please excuse any possibly wrong terminology or claims. If you have any comments, shoot me a message.&lt;/p&gt;
&lt;p&gt;Exceptions are (in general) very weird things, but even more so in Scheme. I have little (close to none) experience with them, and the little that I have was attained from need (i.e., &amp;quot;works? great!&amp;quot;).&lt;/p&gt;
&lt;h2&gt;Conditions&lt;/h2&gt;
&lt;p&gt;Conditions are objects that represent an exception (like instances of a subclass of Exception in Java, maybe?), and in Scheme you can use them just like any other object. You can create one, pass it around, and not even throw it. It&#39;s also possible to throw non-condition objects (maybe for non-local or early return?).&lt;/p&gt;
&lt;h2&gt;Exception Handling&lt;/h2&gt;
&lt;h3&gt;Catching&lt;/h3&gt;
&lt;p&gt;A neat way to catch exceptions is with condition-case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://api.call-cc.org/5/doc/chicken/condition/condition-case&quot;&gt;condition-case&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;You give it an expression that may throw, give it the kinds of exceptions you are expecting and how to deal with each of them, and voila:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;; General usage
(condition-case expression
  ((kind1 kind2) (print &amp;quot;kind1 kind2&amp;quot;) ...)
  ((kind) (print &amp;quot;kind&amp;quot;) ...)
  ; con needn&#39;t be a condition
  (con () (print &amp;quot;some other kind: &amp;quot; con) ...))

; Concrete example
(condition-case
  (begin
    (print &amp;quot;This is part of the expression&amp;quot;)
    (car (/ 42 0)))
  ((exn type)
    (print &amp;quot;Wrong type&amp;quot;)
    #f)
  ((exn arithmetic)
    (print &amp;quot;Some arithmetic error&amp;quot;)
    0)
  (con ()
    (print con &amp;quot; ¯\\_(ツ)_/¯&amp;quot;)
    con))

;; prints:
;; This is part of the expression
;; Some arithmetic error
;; =&amp;gt; 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If no exception is thrown when evaluating the expression, the value of the condition-case block is that of the expression. If an exception is thrown, then the value is that of the last of the expressions associated with the first matching branch. If there is no matching branch, the exception is propagated, until a handler for it is found (or none, in which case the program crashes).&lt;/p&gt;
&lt;p&gt;The condition cases should be ordered from more specific to less specific, because the first one to match is picked. For example, a condition of kind (exn type) is also of kind (exn), so the former should be above the latter.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(condition-case (car &#39;some-val)
  ((exn)      (print &amp;quot;Wrong type&amp;quot;))
  ((exn type) (print &amp;quot;This will never happen&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Throwing&lt;/h3&gt;
&lt;p&gt;If you want to throw something, use signal. There are also abort and raise, but I don&#39;t know why/when one should use them. In CHICKEN, SRFI-18&#39;s raise is just signal, but this may change in the future and might not even be the case in other implementations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://api.call-cc.org/5/doc/chicken/condition/signal&quot;&gt;signal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://api.call-cc.org/5/doc/chicken/condition/abort&quot;&gt;abort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://api.call-cc.org/5/doc/srfi-18/raise&quot;&gt;raise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://srfi.schemers.org/srfi-18/srfi-18.html&quot;&gt;SRFI-18&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Related Topics of Interest&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Continuable and non-continuable exceptions;&lt;/li&gt;
&lt;li&gt;How is all this implemented?&lt;/li&gt;
&lt;li&gt;How to make a condition and how to get things out of a condition object.&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/projects/gemtext.gmi</id>
  <title type="text">Scheme Gemtext Reader</title>
  <updated>2022-07-05T00:00:00Z</updated>
  <published>2022-07-05T00:00:00Z</published>
  <link href="https://siiky.srht.site/projects/gemtext.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/projects/gemtext.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Scheme Gemtext Reader
@siiky
2022/07/05
2022/07/05

Yesterday I made a Scheme library to read Gemtext into a simple AST: a list of lines of text, headers, links, list blocks, or code blocks.

## Text

```gmi
some text
```

```scm
&quot;some text&quot;
```

Just a string, not tagged in any way. Empty lines are kept.

## Headers

```
^(#+)\s+(.*)$
```

```scm
`(header ,(string-length $1) ,$2)
```

If *strict-gemtext-headers* is enabled, header lines of level &gt; 3 are not considered headers.

```gmi
##### title
```

```scm
&quot;##### title&quot;       ; (w/ *strict-gemtext-headers* enabled)
&#39;(header 5 &quot;title&quot;) ; (w/ *strict-gemtext-headers* disabled)
```

## Links

```gmi
=&gt; some-uri.gmi Optional alt text
```

```scm
&#39;(link &quot;some-uri.gmi&quot; &quot;Optional alt text&quot;)
```

If there&#39;s no alt text, the empty string is used:

```gmi
=&gt; some-uri.gmi
```

```scm
&#39;(link &quot;some-uri.gmi&quot; &quot;&quot;)
```

## Lists

```gmi
* item 1
* item 2
```

```scm
&#39;(list &quot;item 1&quot;
       &quot;item 2&quot;)
```

## Code blocks

(pretend there&#39;s no space between the three backticks)

```gmi
`` `some optional alt text
some
pre-formatted
text
`` `
```

```scm
&#39;(code &quot;some optional alt text&quot;
       &quot;some&quot;
       &quot;pre-formatted&quot;
       &quot;text&quot;)
```

If there&#39;s no alt text, the empty string is used:

```gmi
`` `some optional alt text
some
pre-formatted
text
`` `
```

```scm
&#39;(code &quot;&quot;
       &quot;some&quot;
       &quot;pre-formatted&quot;
       &quot;text&quot;)
```

## Example

```gmi
# Factorial

There are two steps to compute the factorial of a number:

* Compute the list of integers from 1 up to the number
* Multiply all the integers of the list

=&gt; https://en.wikipedia.org/wiki/Factorial
=&gt; gemini://gemi.dev/cgi-bin/wp.cgi/view?Factorial Factorial (Gemipedia)

## Haskell code

Here&#39;s the code in Haskell:

`` `hs
fact n = prod [1..n]
`` `
```

```scm
&#39;((header 1 &quot;Factorial&quot;)
  &quot;&quot;
  &quot;There are two steps to compute the factorial of a number:&quot;
  &quot;&quot;
  (list &quot;Compute the list of integers from 1 up to the number&quot;
        &quot;Multiply all the integers of the list&quot;)
  &quot;&quot;
  (link &quot;https://en.wikipedia.org/wiki/Factorial&quot; &quot;&quot;)
  (link &quot;gemini://gemi.dev/cgi-bin/wp.cgi/view?Factorial&quot; &quot;Factorial (Gemipedia)&quot;)
  &quot;&quot;
  (header 2 &quot;Haskell code&quot;)
  &quot;&quot;
  &quot;Here&#39;s the code in Haskell:&quot;
  &quot;&quot;
  (code &quot;hs&quot;
        &quot;fact n = prod [1..n]&quot;))
```

## Output Patterns

```scm
(header level title)
(link uri alt-text)
(code alt-text . lines)
(list . items)
```
  </content>
  <content type="text/html">

&lt;h1&gt;Scheme Gemtext Reader&lt;/h1&gt;
&lt;p&gt;@siiky
2022/07/05
2022/07/05&lt;/p&gt;
&lt;p&gt;Yesterday I made a Scheme library to read Gemtext into a simple AST: a list of lines of text, headers, links, list blocks, or code blocks.&lt;/p&gt;
&lt;h2&gt;Text&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;some text



&amp;quot;some text&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just a string, not tagged in any way. Empty lines are kept.&lt;/p&gt;
&lt;h2&gt;Headers&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;^(#+)\s+(.*)$



`(header ,(string-length $1) ,$2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;em&gt;strict-gemtext-headers&lt;/em&gt; is enabled, header lines of level &gt; 3 are not considered headers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##### title



&amp;quot;##### title&amp;quot;       ; (w/ *strict-gemtext-headers* enabled)
&#39;(header 5 &amp;quot;title&amp;quot;) ; (w/ *strict-gemtext-headers* disabled)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;=&amp;gt; some-uri.gmi Optional alt text



&#39;(link &amp;quot;some-uri.gmi&amp;quot; &amp;quot;Optional alt text&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there&#39;s no alt text, the empty string is used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;=&amp;gt; some-uri.gmi



&#39;(link &amp;quot;some-uri.gmi&amp;quot; &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Lists&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;* item 1
* item 2



&#39;(list &amp;quot;item 1&amp;quot;
       &amp;quot;item 2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Code blocks&lt;/h2&gt;
&lt;p&gt;(pretend there&#39;s no space between the three backticks)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`` `some optional alt text
some
pre-formatted
text
`` `



&#39;(code &amp;quot;some optional alt text&amp;quot;
       &amp;quot;some&amp;quot;
       &amp;quot;pre-formatted&amp;quot;
       &amp;quot;text&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there&#39;s no alt text, the empty string is used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`` `some optional alt text
some
pre-formatted
text
`` `



&#39;(code &amp;quot;&amp;quot;
       &amp;quot;some&amp;quot;
       &amp;quot;pre-formatted&amp;quot;
       &amp;quot;text&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# Factorial

There are two steps to compute the factorial of a number:

* Compute the list of integers from 1 up to the number
* Multiply all the integers of the list

=&amp;gt; https://en.wikipedia.org/wiki/Factorial
=&amp;gt; gemini://gemi.dev/cgi-bin/wp.cgi/view?Factorial Factorial (Gemipedia)

## Haskell code

Here&#39;s the code in Haskell:

`` `hs
fact n = prod [1..n]
`` `



&#39;((header 1 &amp;quot;Factorial&amp;quot;)
  &amp;quot;&amp;quot;
  &amp;quot;There are two steps to compute the factorial of a number:&amp;quot;
  &amp;quot;&amp;quot;
  (list &amp;quot;Compute the list of integers from 1 up to the number&amp;quot;
        &amp;quot;Multiply all the integers of the list&amp;quot;)
  &amp;quot;&amp;quot;
  (link &amp;quot;https://en.wikipedia.org/wiki/Factorial&amp;quot; &amp;quot;&amp;quot;)
  (link &amp;quot;gemini://gemi.dev/cgi-bin/wp.cgi/view?Factorial&amp;quot; &amp;quot;Factorial (Gemipedia)&amp;quot;)
  &amp;quot;&amp;quot;
  (header 2 &amp;quot;Haskell code&amp;quot;)
  &amp;quot;&amp;quot;
  &amp;quot;Here&#39;s the code in Haskell:&amp;quot;
  &amp;quot;&amp;quot;
  (code &amp;quot;hs&amp;quot;
        &amp;quot;fact n = prod [1..n]&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Output Patterns&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;(header level title)
(link uri alt-text)
(code alt-text . lines)
(list . items)
&lt;/code&gt;&lt;/pre&gt;  </content>
</entry>
<entry>
  <id>https://siiky.srht.site/care/list.gmi</id>
  <title type="text">Care list</title>
  <updated>2022-07-04T00:00:00Z</updated>
  <published>2022-01-09T00:00:00Z</published>
  <link href="https://siiky.srht.site/care/list.html" rel="alternate" type="text/html"/>
  <link href="gemini://siiky.srht.site/care/list.gmi" rel="alternate" type="text/gemtext"/>
  <content type="text/gemini">
# Care list
@siiky
2022/01/09
2022/07/04

If you don&#39;t know what IPFS is or don&#39;t know how to use it, see this quickstart:

=&gt; ipfs.gmi

IPFS root directory of this list:

=&gt; ipfs://bafybeicsuo27ufnhjw2k5ophno5hgxhuvfbzzerrgsx7fxmy4kxwthpkbi

Because sharing is caring. This is a list of things I&#39;m caring with others. Some of the types of cares you may find here are books from Gutenberg or Standard Ebooks that I particularly like; public movies/documentaries I find interesting and/or important; and copies of technical material distributed publicly and freely by their creators. Whatever care you may find here, it shouldn&#39;t be illegal.

=&gt; https://www.gutenberg.org Gutenberg
=&gt; https://standardebooks.org Standard Ebooks

You&#39;ll find at least three spider cares.

=&gt; spidercare.jpg

The URI of the root of the list will be always at the top of the page (the &quot;IPFS root directory ...&quot;). From it you can get to all other cares (if I don&#39;t screw up). Over the rest of the page I&#39;ll post some notable cares and/or (maybe) more details -- maybe even sources!

The cares are added to IPFS using `ipfs add` with the options `--recursive --raw-leaves --cid-version=1`. Videos also get a `--trickle `. The full command is something like this:

```
ipfs files cp /ipfs/`ipfs add -p -Q -r -t --pin=false --cid-version=1 --raw-leaves &#39;/path/to/file_or_directory&#39;` &#39;/care-list/videos/file_or_directory&#39;
```

If you feel the urge to support someone after finding or benefitting from this list, support the creators of the cares themselves.

# Books

## Geographies of Digital Exclusion: Data and Inequality

```
/books/geographies_of_digital_exclusion.pdf.
```

Originally downloaded from the website of the Oxford Internet Institute.

=&gt; https://www.oii.ox.ac.uk/research/publications/geographies-of-digital-exclusion-data-and-inequality

Published in 2022/01 by Pluto Press, with ISBN 9780745340180.

## Program Design by Calculation

```
/books/pdbc.pdf
```

Written by José Nuno Oliveira, professor of the Informatics Department of the University of Minho.

Not necessarily the latest version! The original is usually available here.

=&gt; http://www4.di.uminho.pt/~jno/ps/pdbc.pdf

# Videos

## OPLSS (Oregon Programming Language Summer School)

```
/videos/oplss/
```

Only some of the lectures are mirrored on this path.

=&gt; https://www.cs.uoregon.edu/research/summerschool/archives.html Official OPLSS site
=&gt; ipfs://bafybeidlgjvd6qdjgdb2vqtdnssvvfbv47m3wj2uyzknswhj5twktr37ne

NOTE THAT I may forget to update this URI, but the root will always be up to date!

## Nothing to Hide

```
/videos/Nothing to Hide - The documentary about surveillance and you (2017) 1080p.mp4
```

=&gt; https://vidcommons.org/w/efeEpsHSK3bzJwVLW9fh7U VidCommons&#39; PeerTube instance
=&gt; ipfs://bafybeidi44wekwu3bi24m5x6ofnttzbcsfomr4dw5bssovqq35wdwva26m?filename=Nothing%20to%20Hide%20-%20The%20documentary%20about%20surveillance%20and%20you%20(2017)%201080p.mp4
=&gt; magnet:?xt=urn:btih:34d4615762a92083aaf892630e84284c3ebaf3e5&amp;dn=Nothing%20to%20Hide%20-%20The%20documentary%20about%20surveillance%20and%20you%20%282017%29%201080p.mp4&amp;tr=https%3A%2F%2Fvidcommons.org%2Ftracker%2Fannounce&amp;ws=https%3A%2F%2Fvidcommons.org%2Fstatic%2Fwebseed%2F6b43a28c-86ee-4681-8ab9-787ac140afc0-1080.mp4

## TPB: AFK

```
/videos/TPB.AFK.2013.1080p.h264-SimonKlose.mkv
```

=&gt; magnet:?xt=urn:btih:411a7a164505636ab1a8276395b375a3a30bff32&amp;dn=TPB.AFK.2013.1080p.h264-SimonKlose&amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2F9.rarbg.to%3A2710%2Fannounce&amp;tr=udp%3A%2F%2F9.rarbg.me%3A2780%2Fannounce&amp;tr=udp%3A%2F%2F9.rarbg.to%3A2730%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&amp;tr=http%3A%2F%2Fp4p.arenabg.com%3A1337%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.torrent.eu.org%3A451%2Fannounce&amp;tr=udp%3A%2F%2Ftracker.tiny-vps.com%3A6969%2Fannounce&amp;tr=udp%3A%2F%2Fopen.stealth.si%3A80%2Fannounce

## Steal this Film

```
/videos/StealThisFilm.Part1.mov
/videos/StealThisFilmII.720p.mov
```

=&gt; https://www.stealthisfilm.com Official site

=&gt; magnet:?xt=urn:btih:2d71be0c1bcc93373e926f02aaa4ab484979a542&amp;dn=StealThisFilm.Part1.mov&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce
=&gt; magnet:?xt=urn:btih:0ff9cd4f43f5df2a30c694c87e63978af26ee9d4&amp;dn=Steal%20This%20Film%20II.720p.mov&amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce

The torrents are from the official site.

## O Lado Negro das Energias Verdes

```
/videos/o_lado_negro_das_energias_verdes.mp4
```

This is the documentary The Dark Side of Green Energies, but in PT from RTP (narration &amp; subtitles).

=&gt; https://www.imdb.com/title/tt13524468 The Dark Side of Green Energies
  </content>
  <content type="text/html">

&lt;h1&gt;Care list&lt;/h1&gt;
&lt;p&gt;@siiky
2022/01/09
2022/07/04&lt;/p&gt;
&lt;p&gt;If you don&#39;t know what IPFS is or don&#39;t know how to use it, see this quickstart:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;ipfs.html&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;IPFS root directory of this list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;ipfs://bafybeicsuo27ufnhjw2k5ophno5hgxhuvfbzzerrgsx7fxmy4kxwthpkbi&quot;&gt;ipfs://bafybeicsuo27ufnhjw2k5ophno5hgxhuvfbzzerrgsx7fxmy4kxwthpkbi&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Because sharing is caring. This is a list of things I&#39;m caring with others. Some of the types of cares you may find here are books from Gutenberg or Standard Ebooks that I particularly like; public movies/documentaries I find interesting and/or important; and copies of technical material distributed publicly and freely by their creators. Whatever care you may find here, it shouldn&#39;t be illegal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gutenberg.org&quot;&gt;Gutenberg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://standardebooks.org&quot;&gt;Standard Ebooks&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;You&#39;ll find at least three spider cares.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;spidercare.jpg&quot; alt /&gt;&lt;/p&gt;
&lt;p&gt;The URI of the root of the list will be always at the top of the page (the &amp;quot;IPFS root directory ...&amp;quot;). From it you can get to all other cares (if I don&#39;t screw up). Over the rest of the page I&#39;ll post some notable cares and/or (maybe) more details -- maybe even sources!&lt;/p&gt;
&lt;p&gt;The cares are added to IPFS using &lt;code&gt;ipfs add&lt;/code&gt; with the options &lt;code&gt;--recursive --raw-leaves --cid-version=1&lt;/code&gt;. Videos also get a &lt;code&gt;--trickle&lt;/code&gt;. The full command is something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipfs files cp /ipfs/`ipfs add -p -Q -r -t --pin=false --cid-version=1 --raw-leaves &#39;/path/to/file_or_directory&#39;` &#39;/care-list/videos/file_or_directory&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you feel the urge to support someone after finding or benefitting from this list, support the creators of the cares themselves.&lt;/p&gt;
&lt;h1&gt;Books&lt;/h1&gt;
&lt;h2&gt;Geographies of Digital Exclusion: Data and Inequality&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;/books/geographies_of_digital_exclusion.pdf.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Originally downloaded from the website of the Oxford Internet Institute.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.oii.ox.ac.uk/research/publications/geographies-of-digital-exclusion-data-and-inequality&quot;&gt;https://www.oii.ox.ac.uk/research/publications/geographies-of-digital-exclusion-data-and-inequality&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Published in 2022/01 by Pluto Press, with ISBN 9780745340180.&lt;/p&gt;
&lt;h2&gt;Program Design by Calculation&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;/books/pdbc.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Written by José Nuno Oliveira, professor of the Informatics Department of the University of Minho.&lt;/p&gt;
&lt;p&gt;Not necessarily the latest version! The original is usually available here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www4.di.uminho.pt/~jno/ps/pdbc.pdf&quot;&gt;http://www4.di.uminho.pt/~jno/ps/pdbc.pdf&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h1&gt;Videos&lt;/h1&gt;
&lt;h2&gt;OPLSS (Oregon Programming Language Summer School)&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;/videos/oplss/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only some of the lectures are mirrored on this path.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cs.uoregon.edu/research/summerschool/archives.html&quot;&gt;Official OPLSS site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;ipfs://bafybeidlgjvd6qdjgdb2vqtdnssvvfbv47m3wj2uyzknswhj5twktr37ne&quot;&gt;ipfs://bafybeidlgjvd6qdjgdb2vqtdnssvvfbv47m3wj2uyzknswhj5twktr37ne&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;NOTE THAT I may forget to update this URI, but the root will always be up to date!&lt;/p&gt;
&lt;h2&gt;Nothing to Hide&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;/videos/Nothing to Hide - The documentary about surveillance and you (2017) 1080p.mp4
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vidcommons.org/w/efeEpsHSK3bzJwVLW9fh7U&quot;&gt;VidCommons&#39; PeerTube instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;ipfs://bafybeidi44wekwu3bi24m5x6ofnttzbcsfomr4dw5bssovqq35wdwva26m?filename=Nothing%20to%20Hide%20-%20The%20documentary%20about%20surveillance%20and%20you%20(2017)%201080p.mp4&quot;&gt;ipfs://bafybeidi44wekwu3bi24m5x6ofnttzbcsfomr4dw5bssovqq35wdwva26m?filename=Nothing%20to%20Hide%20-%20The%20documentary%20about%20surveillance%20and%20you%20(2017)%201080p.mp4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;magnet:?xt=urn:btih:34d4615762a92083aaf892630e84284c3ebaf3e5&amp;amp;dn=Nothing%20to%20Hide%20-%20The%20documentary%20about%20surveillance%20and%20you%20%282017%29%201080p.mp4&amp;amp;tr=https%3A%2F%2Fvidcommons.org%2Ftracker%2Fannounce&amp;amp;ws=https%3A%2F%2Fvidcommons.org%2Fstatic%2Fwebseed%2F6b43a28c-86ee-4681-8ab9-787ac140afc0-1080.mp4&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;TPB: AFK&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;/videos/TPB.AFK.2013.1080p.h264-SimonKlose.mkv
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;magnet:?xt=urn:btih:411a7a164505636ab1a8276395b375a3a30bff32&amp;amp;dn=TPB.AFK.2013.1080p.h264-SimonKlose&amp;amp;tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969%2Fannounce&amp;amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A6969%2Fannounce&amp;amp;tr=udp%3A%2F%2F9.rarbg.to%3A2710%2Fannounce&amp;amp;tr=udp%3A%2F%2F9.rarbg.me%3A2780%2Fannounce&amp;amp;tr=udp%3A%2F%2F9.rarbg.to%3A2730%2Fannounce&amp;amp;tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337&amp;amp;tr=http%3A%2F%2Fp4p.arenabg.com%3A1337%2Fannounce&amp;amp;tr=udp%3A%2F%2Ftracker.torrent.eu.org%3A451%2Fannounce&amp;amp;tr=udp%3A%2F%2Ftracker.tiny-vps.com%3A6969%2Fannounce&amp;amp;tr=udp%3A%2F%2Fopen.stealth.si%3A80%2Fannounce&amp;gt;&lt;/li&gt;&lt;/ul&gt;
&lt;h2&gt;Steal this Film&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;/videos/StealThisFilm.Part1.mov
/videos/StealThisFilmII.720p.mov
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.stealthisfilm.com&quot;&gt;Official site&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;magnet:?xt=urn:btih:2d71be0c1bcc93373e926f02aaa4ab484979a542&amp;amp;dn=StealThisFilm.Part1.mov&amp;amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;magnet:?xt=urn:btih:0ff9cd4f43f5df2a30c694c87e63978af26ee9d4&amp;amp;dn=Steal%20This%20Film%20II.720p.mov&amp;amp;tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&amp;gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The torrents are from the official site.&lt;/p&gt;
&lt;h2&gt;O Lado Negro das Energias Verdes&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;/videos/o_lado_negro_das_energias_verdes.mp4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the documentary The Dark Side of Green Energies, but in PT from RTP (narration &amp;amp; subtitles).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.imdb.com/title/tt13524468&quot;&gt;The Dark Side of Green Energies&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;  </content>
</entry>
</feed>
